
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004684  08004684  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004684  08004684  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800468c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000001b4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001034a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000240c  00000000  00000000  000303cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dd0  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ace  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021090  00000000  00000000  0003407e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012647  00000000  00000000  0005510e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caa12  00000000  00000000  00067755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003974  00000000  00000000  00132168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00135adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004634 	.word	0x08004634

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004634 	.word	0x08004634

080001d4 <sendData>:

button_state button = NONE_B;
GPIO_PinState state;


void sendData(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	TxData[1] = HAL_CRC_Calculate(&hcrc, (uint32_t*)TxData[0], sizeof(TxData[0]));
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <sendData+0x30>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2204      	movs	r2, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	4809      	ldr	r0, [pc, #36]	; (8000208 <sendData+0x34>)
 80001e2:	f000 fe73 	bl	8000ecc <HAL_CRC_Calculate>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <sendData+0x30>)
 80001ea:	6053      	str	r3, [r2, #4]
	//TxData[1] = HAL_CRC_Calculate(&hcrc, (uint32_t*)TxData, sizeof(TxData));
	HAL_Delay(10);
 80001ec:	200a      	movs	r0, #10
 80001ee:	f000 fcd3 	bl	8000b98 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 80001f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f6:	220c      	movs	r2, #12
 80001f8:	4902      	ldr	r1, [pc, #8]	; (8000204 <sendData+0x30>)
 80001fa:	4804      	ldr	r0, [pc, #16]	; (800020c <sendData+0x38>)
 80001fc:	f003 fa2a 	bl	8003654 <HAL_UART_Transmit>
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200001ac 	.word	0x200001ac
 8000208:	2000002c 	.word	0x2000002c
 800020c:	2000009c 	.word	0x2000009c

08000210 <bitmask_set>:

void bitmask_set(uint32_t bit_position){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	bit |= (1 << bit_position);
 8000218:	2201      	movs	r2, #1
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	fa02 f303 	lsl.w	r3, r2, r3
 8000220:	461a      	mov	r2, r3
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <bitmask_set+0x28>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4313      	orrs	r3, r2
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <bitmask_set+0x28>)
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	200001b8 	.word	0x200001b8

0800023c <bitmask_clear>:

void bitmask_clear(uint32_t bit_position){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	 bit &= ~(1 << bit_position);
 8000244:	2201      	movs	r2, #1
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	fa02 f303 	lsl.w	r3, r2, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <bitmask_clear+0x2c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4013      	ands	r3, r2
 8000256:	4a04      	ldr	r2, [pc, #16]	; (8000268 <bitmask_clear+0x2c>)
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	200001b8 	.word	0x200001b8

0800026c <bitmask_check>:

int bitmask_check(uint32_t bit_position){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	if(bit & (1 << bit_position)){
 8000274:	2201      	movs	r2, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	fa02 f303 	lsl.w	r3, r2, r3
 800027c:	461a      	mov	r2, r3
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <bitmask_check+0x30>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4013      	ands	r3, r2
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <bitmask_check+0x20>
		return 1;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <bitmask_check+0x22>
	}else{
		return 0;
 800028c:	2300      	movs	r3, #0
	}
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200001b8 	.word	0x200001b8

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fc12 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f854 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 f95e 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b0:	f000 f92c 	bl	800050c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002b4:	f000 f8fa 	bl	80004ac <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80002b8:	f000 f8d0 	bl	800045c <MX_TIM16_Init>
  MX_CRC_Init();
 80002bc:	f000 f8a2 	bl	8000404 <MX_CRC_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 			  sendData();
 80002c0:	f7ff ff88 	bl	80001d4 <sendData>
	 			  	  	  if(bitmask_check(0)) //red
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ffd1 	bl	800026c <bitmask_check>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d00a      	beq.n	80002e6 <main+0x46>
	 			 		  {
	 			 		    TxData[0] = 1;
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <main+0xb0>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]
	 			 		    sendData();
 80002d6:	f7ff ff7d 	bl	80001d4 <sendData>
	 			 		    TxData[0] = 0;
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <main+0xb0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
	 			 		     bitmask_clear(0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ffab 	bl	800023c <bitmask_clear>
	 			 		  }
	 			  	  	  if(bitmask_check(1)) //green
 80002e6:	2001      	movs	r0, #1
 80002e8:	f7ff ffc0 	bl	800026c <bitmask_check>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d00a      	beq.n	8000308 <main+0x68>
	 			 		  {
	 			 		   TxData[0] = 2;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <main+0xb0>)
 80002f4:	2202      	movs	r2, #2
 80002f6:	601a      	str	r2, [r3, #0]
	 			 		    sendData();
 80002f8:	f7ff ff6c 	bl	80001d4 <sendData>
	 			 		    TxData[0] = 0;
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <main+0xb0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
	 			 		      bitmask_clear(1);
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ff9a 	bl	800023c <bitmask_clear>
	 			 		  }
	 			  	  	  if(bitmask_check(2)) //yellow
 8000308:	2002      	movs	r0, #2
 800030a:	f7ff ffaf 	bl	800026c <bitmask_check>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d00a      	beq.n	800032a <main+0x8a>
	 			 		 {
	 			 		    TxData[0] = 3;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <main+0xb0>)
 8000316:	2203      	movs	r2, #3
 8000318:	601a      	str	r2, [r3, #0]
	 			 		    sendData();
 800031a:	f7ff ff5b 	bl	80001d4 <sendData>
	 			 		    TxData[0] = 0;
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <main+0xb0>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
	 			 		    bitmask_clear(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f7ff ff89 	bl	800023c <bitmask_clear>
	 			 		  }
	 			  	    	if(bitmask_check(3)) //blue
 800032a:	2003      	movs	r0, #3
 800032c:	f7ff ff9e 	bl	800026c <bitmask_check>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0c4      	beq.n	80002c0 <main+0x20>
	 			 		  {
	 			 		    TxData[0] = 4;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <main+0xb0>)
 8000338:	2204      	movs	r2, #4
 800033a:	601a      	str	r2, [r3, #0]
	 			 		    sendData();
 800033c:	f7ff ff4a 	bl	80001d4 <sendData>
	 			 		    TxData[0] = 0;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <main+0xb0>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	 			 		    bitmask_clear(3);
 8000346:	2003      	movs	r0, #3
 8000348:	f7ff ff78 	bl	800023c <bitmask_clear>
	 			  sendData();
 800034c:	e7b8      	b.n	80002c0 <main+0x20>
 800034e:	bf00      	nop
 8000350:	200001ac 	.word	0x200001ac

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b0a6      	sub	sp, #152	; 0x98
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 f939 	bl	80045da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2258      	movs	r2, #88	; 0x58
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f004 f92b 	bl	80045da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000384:	2302      	movs	r3, #2
 8000386:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038c:	2310      	movs	r3, #16
 800038e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800039c:	4618      	mov	r0, r3
 800039e:	f001 f969 	bl	8001674 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a8:	f000 f9fe 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 f9a8 	bl	800271c <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d2:	f000 f9e9 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <SystemClock_Config+0xac>)
 80003d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003e2:	2300      	movs	r3, #0
 80003e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fbcd 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003f4:	f000 f9d8 	bl	80007a8 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3798      	adds	r7, #152	; 0x98
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	00800003 	.word	0x00800003

08000404 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_CRC_Init+0x50>)
 800040a:	4a13      	ldr	r2, [pc, #76]	; (8000458 <MX_CRC_Init+0x54>)
 800040c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_CRC_Init+0x50>)
 8000410:	2201      	movs	r2, #1
 8000412:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_CRC_Init+0x50>)
 8000416:	2201      	movs	r2, #1
 8000418:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_CRC_Init+0x50>)
 800041c:	2207      	movs	r2, #7
 800041e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_CRC_Init+0x50>)
 8000422:	2210      	movs	r2, #16
 8000424:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_CRC_Init+0x50>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_CRC_Init+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_CRC_Init+0x50>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_CRC_Init+0x50>)
 800043a:	2201      	movs	r2, #1
 800043c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_CRC_Init+0x50>)
 8000440:	f000 fce0 	bl	8000e04 <HAL_CRC_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 800044a:	f000 f9ad 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000002c 	.word	0x2000002c
 8000458:	40023000 	.word	0x40023000

0800045c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)			//	20ms trigger
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <MX_TIM16_Init+0x4c>)
 8000464:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1599;						//	f = 8MHz / PSC = 50kHz
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000468:	f240 623f 	movw	r2, #1599	; 0x63f
 800046c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;								//	T = (1 / f) * period = 20ms
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000476:	f240 32e7 	movw	r2, #999	; 0x3e7
 800047a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_TIM16_Init+0x48>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_TIM16_Init+0x48>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_TIM16_Init+0x48>)
 8000490:	f002 fd98 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800049a:	f000 f985 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000050 	.word	0x20000050
 80004a8:	40014400 	.word	0x40014400

080004ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <MX_USART1_UART_Init+0x5c>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_USART1_UART_Init+0x58>)
 80004f0:	f003 f862 	bl	80035b8 <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004fa:	f000 f955 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000009c 	.word	0x2000009c
 8000508:	40013800 	.word	0x40013800

0800050c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <MX_USART2_UART_Init+0x5c>)
 8000514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800051c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART2_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART2_UART_Init+0x58>)
 8000550:	f003 f832 	bl	80035b8 <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055a:	f000 f925 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000124 	.word	0x20000124
 8000568:	40004400 	.word	0x40004400

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <MX_GPIO_Init+0xcc>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <MX_GPIO_Init+0xcc>)
 8000588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_GPIO_Init+0xcc>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_GPIO_Init+0xcc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a26      	ldr	r2, [pc, #152]	; (8000638 <MX_GPIO_Init+0xcc>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <MX_GPIO_Init+0xcc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_GPIO_Init+0xcc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a20      	ldr	r2, [pc, #128]	; (8000638 <MX_GPIO_Init+0xcc>)
 80005b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_GPIO_Init+0xcc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005ca:	230c      	movs	r3, #12
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <MX_GPIO_Init+0xd0>)
 80005e0:	f000 fe8e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005fc:	f000 fe80 	bl	8001300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2008      	movs	r0, #8
 8000606:	f000 fbc6 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800060a:	2008      	movs	r0, #8
 800060c:	f000 fbdf 	bl	8000dce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2009      	movs	r0, #9
 8000616:	f000 fbbe 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800061a:	2009      	movs	r0, #9
 800061c:	f000 fbd7 	bl	8000dce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2028      	movs	r0, #40	; 0x28
 8000626:	f000 fbb6 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062a:	2028      	movs	r0, #40	; 0x28
 800062c:	f000 fbcf 	bl	8000dce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800
 8000640:	48000400 	.word	0x48000400

08000644 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);

  if (GPIO_Pin == GPIO_PIN_2){
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	2b04      	cmp	r3, #4
 8000652:	d10a      	bne.n	800066a <HAL_GPIO_EXTI_Callback+0x26>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000654:	2104      	movs	r1, #4
 8000656:	481f      	ldr	r0, [pc, #124]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000658:	f000 ffdc 	bl	8001614 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000662:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_1;	//red
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <HAL_GPIO_EXTI_Callback+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_3){
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	2b08      	cmp	r3, #8
 800066e:	d10a      	bne.n	8000686 <HAL_GPIO_EXTI_Callback+0x42>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000670:	2108      	movs	r1, #8
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000674:	f000 ffce 	bl	8001614 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x94>)
 800067e:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_2;	//green
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_GPIO_EXTI_Callback+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_14){
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800068c:	d10b      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0x62>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4813      	ldr	r0, [pc, #76]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000694:	f000 ffbe 	bl	8001614 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x94>)
 800069e:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_3;	//yellow
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_GPIO_EXTI_Callback+0x98>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_15){
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006ac:	d10b      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x82>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80006ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80006b4:	f000 ffae 	bl	8001614 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x94>)
 80006be:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_4;	//blue
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_GPIO_EXTI_Callback+0x98>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
  }
  HAL_TIM_Base_Start_IT(&htim16);
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006c8:	f002 fcd4 	bl	8003074 <HAL_TIM_Base_Start_IT>

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	48000800 	.word	0x48000800
 80006d8:	200001bc 	.word	0x200001bc
 80006dc:	20000000 	.word	0x20000000
 80006e0:	48000400 	.word	0x48000400
 80006e4:	20000050 	.word	0x20000050

080006e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	 UNUSED(htim);

	if(htim == &htim16){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d145      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == state && button == BUTTON_1){
 80006f8:	2104      	movs	r1, #4
 80006fa:	4827      	ldr	r0, [pc, #156]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80006fc:	f000 ff8a 	bl	8001614 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d106      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x32>
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x32>
			bitmask_set(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fd7b 	bl	8000210 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == state && button == BUTTON_2){
 800071a:	2108      	movs	r1, #8
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800071e:	f000 ff79 	bl	8001614 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d106      	bne.n	800073c <HAL_TIM_PeriodElapsedCallback+0x54>
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d102      	bne.n	800073c <HAL_TIM_PeriodElapsedCallback+0x54>
			bitmask_set(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fd6a 	bl	8000210 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == state && button == BUTTON_3){
 800073c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000742:	f000 ff67 	bl	8001614 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d106      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d102      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x78>
			bitmask_set(2);
 800075a:	2002      	movs	r0, #2
 800075c:	f7ff fd58 	bl	8000210 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == state && button == BUTTON_4){
 8000760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000764:	480f      	ldr	r0, [pc, #60]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000766:	f000 ff55 	bl	8001614 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d106      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d102      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x9c>
			bitmask_set(3);
 800077e:	2003      	movs	r0, #3
 8000780:	f7ff fd46 	bl	8000210 <bitmask_set>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000786:	f002 fce5 	bl	8003154 <HAL_TIM_Base_Stop_IT>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000050 	.word	0x20000050
 8000798:	48000800 	.word	0x48000800
 800079c:	200001bc 	.word	0x200001bc
 80007a0:	20000000 	.word	0x20000000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_CRC_MspInit+0x38>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10b      	bne.n	8000826 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_CRC_MspInit+0x3c>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_CRC_MspInit+0x3c>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_CRC_MspInit+0x3c>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023000 	.word	0x40023000
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_TIM_Base_MspInit+0x44>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d113      	bne.n	8000876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2019      	movs	r0, #25
 800086c:	f000 fa93 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000870:	2019      	movs	r0, #25
 8000872:	f000 faac 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40014400 	.word	0x40014400
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a36      	ldr	r2, [pc, #216]	; (8000980 <HAL_UART_MspInit+0xf8>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d130      	bne.n	800090c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a35      	ldr	r2, [pc, #212]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b30      	ldr	r3, [pc, #192]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <HAL_UART_MspInit+0xfc>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008da:	2330      	movs	r3, #48	; 0x30
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ea:	2307      	movs	r3, #7
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <HAL_UART_MspInit+0x100>)
 80008f6:	f000 fd03 	bl	8001300 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2025      	movs	r0, #37	; 0x25
 8000900:	f000 fa49 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000904:	2025      	movs	r0, #37	; 0x25
 8000906:	f000 fa62 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090a:	e035      	b.n	8000978 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <HAL_UART_MspInit+0x104>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d130      	bne.n	8000978 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_UART_MspInit+0xfc>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_UART_MspInit+0xfc>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0xfc>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0xfc>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_UART_MspInit+0xfc>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0xfc>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000946:	230c      	movs	r3, #12
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fccc 	bl	8001300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2026      	movs	r0, #38	; 0x26
 800096e:	f000 fa12 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000972:	2026      	movs	r0, #38	; 0x26
 8000974:	f000 fa2b 	bl	8000dce <HAL_NVIC_EnableIRQ>
}
 8000978:	bf00      	nop
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	40021000 	.word	0x40021000
 8000988:	48000800 	.word	0x48000800
 800098c:	40004400 	.word	0x40004400

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8bc 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80009e8:	2004      	movs	r0, #4
 80009ea:	f000 fe2b 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80009f6:	2008      	movs	r0, #8
 80009f8:	f000 fe24 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a06:	f002 fbd4 	bl	80031b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000050 	.word	0x20000050

08000a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USART1_IRQHandler+0x10>)
 8000a1a:	f002 fea5 	bl	8003768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000009c 	.word	0x2000009c

08000a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <USART2_IRQHandler+0x10>)
 8000a2e:	f002 fe9b 	bl	8003768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000124 	.word	0x20000124

08000a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a44:	f000 fdfe 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a4c:	f000 fdfa 	bl	8001644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f003 fda1 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fbf9 	bl	80002a0 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000abc:	0800468c 	.word	0x0800468c
  ldr r2, =_sbss
 8000ac0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ac4:	200001c4 	.word	0x200001c4

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x28>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f94f 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe64 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f967 	bl	8000dea <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f92f 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	200001c0 	.word	0x200001c0

08000b80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200001c0 	.word	0x200001c0

08000b98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff29 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff3e 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff8e 	bl	8000cd4 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5d 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff31 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffa2 	bl	8000d3c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e054      	b.n	8000ec0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7f5b      	ldrb	r3, [r3, #29]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d105      	bne.n	8000e2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fce8 	bl	80007fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_CRC_Init+0xc4>)
 8000e40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0218 	bic.w	r2, r2, #24
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	e00c      	b.n	8000e6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6899      	ldr	r1, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f948 	bl	80010f4 <HAL_CRCEx_Polynomial_Set>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e028      	b.n	8000ec0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	e004      	b.n	8000e8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6912      	ldr	r2, [r2, #16]
 8000e8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	04c11db7 	.word	0x04c11db7

08000ecc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0201 	orr.w	r2, r2, #1
 8000ef0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d006      	beq.n	8000f08 <HAL_CRC_Calculate+0x3c>
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d829      	bhi.n	8000f52 <HAL_CRC_Calculate+0x86>
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d019      	beq.n	8000f36 <HAL_CRC_Calculate+0x6a>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d01e      	beq.n	8000f44 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8000f06:	e024      	b.n	8000f52 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	441a      	add	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3f0      	bcc.n	8000f0e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      break;
 8000f34:	e00e      	b.n	8000f54 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f812 	bl	8000f64 <CRC_Handle_8>
 8000f40:	6138      	str	r0, [r7, #16]
      break;
 8000f42:	e007      	b.n	8000f54 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 f899 	bl	8001080 <CRC_Handle_16>
 8000f4e:	6138      	str	r0, [r7, #16]
      break;
 8000f50:	e000      	b.n	8000f54 <HAL_CRC_Calculate+0x88>
      break;
 8000f52:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8000f5a:	693b      	ldr	r3, [r7, #16]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	e023      	b.n	8000fbe <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	3301      	adds	r3, #1
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	440b      	add	r3, r1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000f90:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	440b      	add	r3, r1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000fa0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	440b      	add	r3, r1
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000fb4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3d6      	bcc.n	8000f76 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d04d      	beq.n	800106e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d116      	bne.n	8001024 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	440b      	add	r3, r1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	8b7a      	ldrh	r2, [r7, #26]
 8001022:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d11f      	bne.n	800106e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	3301      	adds	r3, #1
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	440b      	add	r3, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	8b7a      	ldrh	r2, [r7, #26]
 800105a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3724      	adds	r7, #36	; 0x24
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e013      	b.n	80010ba <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	440b      	add	r3, r1
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3e6      	bcc.n	8001092 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d009      	beq.n	80010e2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001104:	231f      	movs	r3, #31
 8001106:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
 8001116:	e063      	b.n	80011e0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001118:	bf00      	nop
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	613a      	str	r2, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d009      	beq.n	8001138 <HAL_CRCEx_Polynomial_Set+0x44>
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b18      	cmp	r3, #24
 800113c:	d846      	bhi.n	80011cc <HAL_CRCEx_Polynomial_Set+0xd8>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	080011d3 	.word	0x080011d3
 8001148:	080011cd 	.word	0x080011cd
 800114c:	080011cd 	.word	0x080011cd
 8001150:	080011cd 	.word	0x080011cd
 8001154:	080011cd 	.word	0x080011cd
 8001158:	080011cd 	.word	0x080011cd
 800115c:	080011cd 	.word	0x080011cd
 8001160:	080011cd 	.word	0x080011cd
 8001164:	080011c1 	.word	0x080011c1
 8001168:	080011cd 	.word	0x080011cd
 800116c:	080011cd 	.word	0x080011cd
 8001170:	080011cd 	.word	0x080011cd
 8001174:	080011cd 	.word	0x080011cd
 8001178:	080011cd 	.word	0x080011cd
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011cd 	.word	0x080011cd
 8001184:	080011b5 	.word	0x080011b5
 8001188:	080011cd 	.word	0x080011cd
 800118c:	080011cd 	.word	0x080011cd
 8001190:	080011cd 	.word	0x080011cd
 8001194:	080011cd 	.word	0x080011cd
 8001198:	080011cd 	.word	0x080011cd
 800119c:	080011cd 	.word	0x080011cd
 80011a0:	080011cd 	.word	0x080011cd
 80011a4:	080011a9 	.word	0x080011a9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d913      	bls.n	80011d6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011b2:	e010      	b.n	80011d6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d90f      	bls.n	80011da <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011be:	e00c      	b.n	80011da <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d90b      	bls.n	80011de <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80011ca:	e008      	b.n	80011de <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
        break;
 80011d0:	e006      	b.n	80011e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011d2:	bf00      	nop
 80011d4:	e004      	b.n	80011e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011d6:	bf00      	nop
 80011d8:	e002      	b.n	80011e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80011de:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 0118 	bic.w	r1, r3, #24
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	430a      	orrs	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
}
 8001204:	4618      	mov	r0, r3
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800121e:	2b02      	cmp	r3, #2
 8001220:	d008      	beq.n	8001234 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2204      	movs	r2, #4
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e020      	b.n	8001276 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 020e 	bic.w	r2, r2, #14
 8001242:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001294:	2b02      	cmp	r3, #2
 8001296:	d005      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e027      	b.n	80012f4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
    } 
  }
  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	e160      	b.n	80015d2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8152 	beq.w	80015cc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <HAL_GPIO_Init+0x40>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001376:	2201      	movs	r2, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 0201 	and.w	r2, r3, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d017      	beq.n	80013de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d123      	bne.n	8001432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0203 	and.w	r2, r3, #3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80ac 	beq.w	80015cc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_GPIO_Init+0x2f0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_GPIO_Init+0x2f0>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_GPIO_Init+0x2f0>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800148c:	4a59      	ldr	r2, [pc, #356]	; (80015f4 <HAL_GPIO_Init+0x2f4>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014b6:	d025      	beq.n	8001504 <HAL_GPIO_Init+0x204>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x2f8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01f      	beq.n	8001500 <HAL_GPIO_Init+0x200>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_GPIO_Init+0x2fc>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d019      	beq.n	80014fc <HAL_GPIO_Init+0x1fc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a4d      	ldr	r2, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x300>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d013      	beq.n	80014f8 <HAL_GPIO_Init+0x1f8>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x304>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00d      	beq.n	80014f4 <HAL_GPIO_Init+0x1f4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <HAL_GPIO_Init+0x308>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0x1f0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4a      	ldr	r2, [pc, #296]	; (800160c <HAL_GPIO_Init+0x30c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_GPIO_Init+0x1ec>
 80014e8:	2306      	movs	r3, #6
 80014ea:	e00c      	b.n	8001506 <HAL_GPIO_Init+0x206>
 80014ec:	2307      	movs	r3, #7
 80014ee:	e00a      	b.n	8001506 <HAL_GPIO_Init+0x206>
 80014f0:	2305      	movs	r3, #5
 80014f2:	e008      	b.n	8001506 <HAL_GPIO_Init+0x206>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x206>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x206>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x206>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x206>
 8001504:	2300      	movs	r3, #0
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001516:	4937      	ldr	r1, [pc, #220]	; (80015f4 <HAL_GPIO_Init+0x2f4>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_GPIO_Init+0x310>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001548:	4a31      	ldr	r2, [pc, #196]	; (8001610 <HAL_GPIO_Init+0x310>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_GPIO_Init+0x310>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_GPIO_Init+0x310>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_GPIO_Init+0x310>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159c:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_GPIO_Init+0x310>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_GPIO_Init+0x310>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_GPIO_Init+0x310>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f ae97 	bne.w	8001310 <HAL_GPIO_Init+0x10>
  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00
 8001604:	48001000 	.word	0x48001000
 8001608:	48001400 	.word	0x48001400
 800160c:	48001800 	.word	0x48001800
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e001      	b.n	8001636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ffee 	bl	8000644 <HAL_GPIO_EXTI_Callback>
  }
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800167a:	af00      	add	r7, sp, #0
 800167c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001684:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f001 b83a 	b.w	800270e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 816f 	beq.w	800198e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016b0:	4bb5      	ldr	r3, [pc, #724]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4bb2      	ldr	r3, [pc, #712]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d15c      	bne.n	8001782 <HAL_RCC_OscConfig+0x10e>
 80016c8:	4baf      	ldr	r3, [pc, #700]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d155      	bne.n	8001782 <HAL_RCC_OscConfig+0x10e>
 80016d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x94>
 8001702:	4ba1      	ldr	r3, [pc, #644]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	e015      	b.n	8001734 <HAL_RCC_OscConfig+0xc0>
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001724:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001730:	4b95      	ldr	r3, [pc, #596]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001738:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800173c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001740:	fa92 f2a2 	rbit	r2, r2
 8001744:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001748:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800174c:	fab2 f282 	clz	r2, r2
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f002 021f 	and.w	r2, r2, #31
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8111 	beq.w	800198c <HAL_RCC_OscConfig+0x318>
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 8108 	bne.w	800198c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f000 bfc6 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12e>
 8001794:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7b      	ldr	r2, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e036      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x158>
 80017b2:	4b75      	ldr	r3, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a74      	ldr	r2, [pc, #464]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e021      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x184>
 80017de:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a69      	ldr	r2, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x19c>
 80017f8:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a62      	ldr	r2, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a5f      	ldr	r2, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d059      	beq.n	80018d4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f9ae 	bl	8000b80 <HAL_GetTick>
 8001824:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182a:	f7ff f9a9 	bl	8000b80 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d902      	bls.n	8001840 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	f000 bf67 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001844:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001854:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d102      	bne.n	8001872 <HAL_RCC_OscConfig+0x1fe>
 800186c:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x22a>
 8001872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001876:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800188e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018a6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018aa:	fa92 f2a2 	rbit	r2, r2
 80018ae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f042 0220 	orr.w	r2, r2, #32
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f002 021f 	and.w	r2, r2, #31
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f202 	lsl.w	r2, r1, r2
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ab      	beq.n	800182a <HAL_RCC_OscConfig+0x1b6>
 80018d2:	e05c      	b.n	800198e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f954 	bl	8000b80 <HAL_GetTick>
 80018d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018de:	f7ff f94f 	bl	8000b80 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d902      	bls.n	80018f4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f000 bf0d 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001908:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d102      	bne.n	8001926 <HAL_RCC_OscConfig+0x2b2>
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x2de>
 8001926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800193a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001942:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_RCC_OscConfig+0x314>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001956:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800195a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001966:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800196a:	fab2 f282 	clz	r2, r2
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f002 021f 	and.w	r2, r2, #31
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ab      	bne.n	80018de <HAL_RCC_OscConfig+0x26a>
 8001986:	e002      	b.n	800198e <HAL_RCC_OscConfig+0x31a>
 8001988:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 817f 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a4:	4ba7      	ldr	r3, [pc, #668]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b0:	4ba4      	ldr	r3, [pc, #656]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d173      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x430>
 80019bc:	4ba1      	ldr	r3, [pc, #644]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c8:	d16c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x430>
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x386>
 80019f4:	4b93      	ldr	r3, [pc, #588]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x3ae>
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a12:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2202      	movs	r2, #2
 8001a24:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a28:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a34:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3f6>
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f000 be52 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	21f8      	movs	r1, #248	; 0xf8
 8001a80:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a88:	fa91 f1a1 	rbit	r1, r1
 8001a8c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a90:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a94:	fab1 f181 	clz	r1, r1
 8001a98:	b2c9      	uxtb	r1, r1
 8001a9a:	408b      	lsls	r3, r1
 8001a9c:	4969      	ldr	r1, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	e0fe      	b.n	8001ca2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8088 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x552>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ac8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f84d 	bl	8000b80 <HAL_GetTick>
 8001ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff f848 	bl	8000b80 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 be06 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b14:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4be>
 8001b2c:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e013      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b60:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b64:	fa92 f2a2 	rbit	r2, r2
 8001b68:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0af      	beq.n	8001aec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	21f8      	movs	r1, #248	; 0xf8
 8001ba2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001baa:	fa91 f1a1 	rbit	r1, r1
 8001bae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bb2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bb6:	fab1 f181 	clz	r1, r1
 8001bba:	b2c9      	uxtb	r1, r1
 8001bbc:	408b      	lsls	r3, r1
 8001bbe:	4921      	ldr	r1, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e06d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x62e>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001bd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	461a      	mov	r2, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe ffc5 	bl	8000b80 <HAL_GetTick>
 8001bf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7fe ffc0 	bl	8000b80 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d902      	bls.n	8001c12 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	f000 bd7e 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5d4>
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_RCC_OscConfig+0x5d0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e016      	b.n	8001c70 <HAL_RCC_OscConfig+0x5fc>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c6c:	4bbf      	ldr	r3, [pc, #764]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2202      	movs	r2, #2
 8001c72:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c76:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ac      	bne.n	8001bfc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8113 	beq.w	8001ede <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d07c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x74e>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4ba2      	ldr	r3, [pc, #648]	; (8001f70 <HAL_RCC_OscConfig+0x8fc>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	461a      	mov	r2, r3
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe ff45 	bl	8000b80 <HAL_GetTick>
 8001cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe ff40 	bl	8000b80 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f000 bcfe 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b7e      	ldr	r3, [pc, #504]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f1a3 	rbit	r1, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d98:	6019      	str	r1, [r3, #0]
  return result;
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d09d      	beq.n	8001cfc <HAL_RCC_OscConfig+0x688>
 8001dc0:	e08d      	b.n	8001ede <HAL_RCC_OscConfig+0x86a>
 8001dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001de4:	601a      	str	r2, [r3, #0]
  return result;
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x8fc>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe febc 	bl	8000b80 <HAL_GetTick>
 8001e08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7fe feb7 	bl	8000b80 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d902      	bls.n	8001e24 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	f000 bc75 	b.w	800270e <HAL_RCC_OscConfig+0x109a>
 8001e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e50:	2202      	movs	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	6019      	str	r1, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f1a3 	rbit	r1, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001eb6:	6019      	str	r1, [r3, #0]
  return result;
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d197      	bne.n	8001e0e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 81a5 	beq.w	800223e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_RCC_OscConfig+0x8f8>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d121      	bne.n	8001f84 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x900>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fe18 	bl	8000b80 <HAL_GetTick>
 8001f50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e010      	b.n	8001f78 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7fe fe13 	bl	8000b80 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d908      	bls.n	8001f78 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e3d1      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	10908120 	.word	0x10908120
 8001f74:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_OscConfig+0xb3c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0e8      	beq.n	8001f56 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x92e>
 8001f94:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a86      	ldr	r2, [pc, #536]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e035      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x958>
 8001fb2:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a7f      	ldr	r2, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e020      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x982>
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x99a>
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a6b      	ldr	r2, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8081 	beq.w	8002122 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe fdae 	bl	8000b80 <HAL_GetTick>
 8002024:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fda9 	bl	8000b80 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e365      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002046:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002076:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002084:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002088:	601a      	str	r2, [r3, #0]
  return result;
 800208a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002092:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_OscConfig+0xa3a>
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	e013      	b.n	80020d6 <HAL_RCC_OscConfig+0xa62>
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020de:	2102      	movs	r1, #2
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	fa92 f1a2 	rbit	r1, r2
 80020f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020f4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020fe:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d084      	beq.n	800202a <HAL_RCC_OscConfig+0x9b6>
 8002120:	e083      	b.n	800222a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fd2d 	bl	8000b80 <HAL_GetTick>
 8002126:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fd28 	bl	8000b80 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2e4      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002178:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800218a:	601a      	str	r2, [r3, #0]
  return result;
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002194:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0xb44>
 80021aa:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_OscConfig+0xb40>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	e017      	b.n	80021e0 <HAL_RCC_OscConfig+0xb6c>
 80021b0:	40007000 	.word	0x40007000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4bb3      	ldr	r3, [pc, #716]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021e8:	2102      	movs	r1, #2
 80021ea:	6011      	str	r1, [r2, #0]
 80021ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	fa92 f1a2 	rbit	r1, r2
 80021fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021fe:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002202:	6011      	str	r1, [r2, #0]
  return result;
 8002204:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002208:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d180      	bne.n	800212c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a9d      	ldr	r2, [pc, #628]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002242:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 825e 	beq.w	800270c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b96      	ldr	r3, [pc, #600]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	f000 821f 	beq.w	800269c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 8170 	bne.w	8002550 <HAL_RCC_OscConfig+0xedc>
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002282:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002290:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002294:	601a      	str	r2, [r3, #0]
  return result;
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800229e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fc63 	bl	8000b80 <HAL_GetTick>
 80022ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fc5e 	bl	8000b80 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e21c      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0xcaa>
 8002318:	4b64      	ldr	r3, [pc, #400]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e027      	b.n	800236e <HAL_RCC_OscConfig+0xcfa>
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002330:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002364:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002372:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002376:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237a:	6011      	str	r1, [r2, #0]
 800237c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002380:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	fa92 f1a2 	rbit	r1, r2
 800238a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800238e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002392:	6011      	str	r1, [r2, #0]
  return result;
 8002394:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002398:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d182      	bne.n	80022c0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	4937      	ldr	r1, [pc, #220]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a19      	ldr	r1, [r3, #32]
 80023e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	492d      	ldr	r1, [pc, #180]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002420:	601a      	str	r2, [r3, #0]
  return result;
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800242a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002436:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fb9d 	bl	8000b80 <HAL_GetTick>
 8002446:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244a:	e009      	b.n	8002460 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fb98 	bl	8000b80 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e156      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002468:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002480:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800248e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0xe3c>
 80024a4:	4b01      	ldr	r3, [pc, #4]	; (80024ac <HAL_RCC_OscConfig+0xe38>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	e02a      	b.n	8002500 <HAL_RCC_OscConfig+0xe8c>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4b86      	ldr	r3, [pc, #536]	; (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002504:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002512:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fa92 f1a2 	rbit	r1, r2
 800251c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002520:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800252a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f43f af7f 	beq.w	800244c <HAL_RCC_OscConfig+0xdd8>
 800254e:	e0dd      	b.n	800270c <HAL_RCC_OscConfig+0x1098>
 8002550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002554:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f2a3 	rbit	r2, r3
 800256c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002570:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002574:	601a      	str	r2, [r3, #0]
  return result;
 8002576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800257e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800258a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe faf3 	bl	8000b80 <HAL_GetTick>
 800259a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e009      	b.n	80025b4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe faee 	bl	8000b80 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0ac      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
 80025b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0xf8a>
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e027      	b.n	800264e <HAL_RCC_OscConfig+0xfda>
 80025fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002602:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002610:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002628:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800262c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4b33      	ldr	r3, [pc, #204]	; (8002718 <HAL_RCC_OscConfig+0x10a4>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002652:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002656:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800265a:	6011      	str	r1, [r2, #0]
 800265c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002660:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fa92 f1a2 	rbit	r1, r2
 800266a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800266e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002672:	6011      	str	r1, [r2, #0]
  return result;
 8002674:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002678:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d182      	bne.n	80025a0 <HAL_RCC_OscConfig+0xf2c>
 800269a:	e037      	b.n	800270c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e02e      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_RCC_OscConfig+0x10a4>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026c4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d117      	bne.n	8002708 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026dc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b09e      	sub	sp, #120	; 0x78
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e162      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b90      	ldr	r3, [pc, #576]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	498b      	ldr	r1, [pc, #556]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b89      	ldr	r3, [pc, #548]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e14a      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	497f      	ldr	r1, [pc, #508]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80dc 	beq.w	8002948 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d13c      	bne.n	8002812 <HAL_RCC_ClockConfig+0xf6>
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xa6>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e00f      	b.n	80027e2 <HAL_RCC_ClockConfig+0xc6>
 80027c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
 80027d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d4:	663b      	str	r3, [r7, #96]	; 0x60
 80027d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027de:	4b67      	ldr	r3, [pc, #412]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d17b      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0f3      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d13c      	bne.n	8002894 <HAL_RCC_ClockConfig+0x178>
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_RCC_ClockConfig+0x128>
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_RCC_ClockConfig+0x148>
 8002844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
 8002852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
 8002858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002860:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002868:	63ba      	str	r2, [r7, #56]	; 0x38
 800286a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d13a      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b2      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_ClockConfig+0x1a0>
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e00d      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1bc>
 80028bc:	2302      	movs	r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2202      	movs	r2, #2
 80028da:	61ba      	str	r2, [r7, #24]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	fa92 f2a2 	rbit	r2, r2
 80028e2:	617a      	str	r2, [r7, #20]
  return result;
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f002 021f 	and.w	r2, r2, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e079      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	491a      	ldr	r1, [pc, #104]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe f932 	bl	8000b80 <HAL_GetTick>
 800291c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe f92e 	bl	8000b80 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e061      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_ClockConfig+0x260>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d214      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4906      	ldr	r1, [pc, #24]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_ClockConfig+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e040      	b.n	80029fa <HAL_RCC_ClockConfig+0x2de>
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	491a      	ldr	r1, [pc, #104]	; (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4912      	ldr	r1, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029be:	f000 f829 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029c2:	4601      	mov	r1, r0
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCC_ClockConfig+0x2e8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029cc:	22f0      	movs	r2, #240	; 0xf0
 80029ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	60fa      	str	r2, [r7, #12]
  return result;
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	40d3      	lsrs	r3, r2
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x2ec>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_RCC_ClockConfig+0x2f0>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_RCC_ClockConfig+0x2f4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f880 	bl	8000af8 <HAL_InitTick>
  
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3778      	adds	r7, #120	; 0x78
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	0800464c 	.word	0x0800464c
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	20000008 	.word	0x20000008

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b08b      	sub	sp, #44	; 0x2c
 8002a18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x36>
 8002a42:	e03f      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a46:	623b      	str	r3, [r7, #32]
      break;
 8002a48:	e03f      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	fa92 f2a2 	rbit	r2, r2
 8002a5c:	607a      	str	r2, [r7, #4]
  return result;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	fab2 f282 	clz	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	40d3      	lsrs	r3, r2
 8002a68:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	220f      	movs	r2, #15
 8002a78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	fa92 f2a2 	rbit	r2, r2
 8002a80:	60fa      	str	r2, [r7, #12]
  return result;
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	fab2 f282 	clz	r2, r2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	40d3      	lsrs	r3, r2
 8002a8c:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e007      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	623b      	str	r3, [r7, #32]
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	6a3b      	ldr	r3, [r7, #32]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	372c      	adds	r7, #44	; 0x2c
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	08004664 	.word	0x08004664
 8002ae4:	08004674 	.word	0x08004674

08002ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b06:	f7ff ffef 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	603a      	str	r2, [r7, #0]
  return result;
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	0800465c 	.word	0x0800465c

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b4a:	f7ff ffcd 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b4e:	4601      	mov	r1, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	fa92 f2a2 	rbit	r2, r2
 8002b64:	603a      	str	r2, [r7, #0]
  return result;
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	fab2 f282 	clz	r2, r2
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	40d3      	lsrs	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	0800465c 	.word	0x0800465c

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b092      	sub	sp, #72	; 0x48
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80d4 	beq.w	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a41      	ldr	r2, [pc, #260]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fd ffc7 	bl	8000b80 <HAL_GetTick>
 8002bf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fd ffc3 	bl	8000b80 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	; 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1d6      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8084 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d07c      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c86:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04b      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fd ff73 	bl	8000b80 <HAL_GetTick>
 8002c9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd ff6f 	bl	8000b80 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e180      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ce2:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	e00d      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	10908100 	.word	0x10908100
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2202      	movs	r2, #2
 8002d06:	613a      	str	r2, [r7, #16]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0b7      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d2e:	4b8f      	ldr	r3, [pc, #572]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	498c      	ldr	r1, [pc, #560]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4a87      	ldr	r2, [pc, #540]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d60:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f023 0203 	bic.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	497f      	ldr	r1, [pc, #508]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4978      	ldr	r1, [pc, #480]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9c:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4970      	ldr	r1, [pc, #448]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dba:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4969      	ldr	r1, [pc, #420]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4961      	ldr	r1, [pc, #388]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f023 0220 	bic.w	r2, r3, #32
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	495a      	ldr	r1, [pc, #360]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e14:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	4952      	ldr	r1, [pc, #328]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e32:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	494b      	ldr	r1, [pc, #300]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e50:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4943      	ldr	r1, [pc, #268]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	493c      	ldr	r1, [pc, #240]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	4934      	ldr	r1, [pc, #208]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	491e      	ldr	r1, [pc, #120]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	4916      	ldr	r1, [pc, #88]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	490f      	ldr	r1, [pc, #60]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e002      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	4913      	ldr	r1, [pc, #76]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fae:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3748      	adds	r7, #72	; 0x48
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fc26 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fa1c 	bl	8003440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e04f      	b.n	800312c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <HAL_TIM_Base_Start_IT+0xc4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d018      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_TIM_Base_Start_IT+0xc8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_TIM_Base_Start_IT+0xcc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_TIM_Base_Start_IT+0xd0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_TIM_Base_Start_IT+0xd4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_TIM_Base_Start_IT+0xd8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d115      	bne.n	8003116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d015      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d011      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	e008      	b.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e000      	b.n	800312a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40013400 	.word	0x40013400
 8003148:	40014000 	.word	0x40014000
 800314c:	40015000 	.word	0x40015000
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	f241 1311 	movw	r3, #4369	; 0x1111
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10f      	bne.n	800319c <HAL_TIM_Base_Stop_IT+0x48>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	f240 4344 	movw	r3, #1092	; 0x444
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_TIM_Base_Stop_IT+0x48>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d122      	bne.n	800320e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d11b      	bne.n	800320e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0202 	mvn.w	r2, #2
 80031de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f905 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 80031fa:	e005      	b.n	8003208 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8f7 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f908 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d122      	bne.n	8003262 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b04      	cmp	r3, #4
 8003228:	d11b      	bne.n	8003262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0204 	mvn.w	r2, #4
 8003232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8db 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 800324e:	e005      	b.n	800325c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8cd 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8de 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d122      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11b      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f06f 0208 	mvn.w	r2, #8
 8003286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2204      	movs	r2, #4
 800328c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8b1 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 80032a2:	e005      	b.n	80032b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8a3 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8b4 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d122      	bne.n	800330a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d11b      	bne.n	800330a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0210 	mvn.w	r2, #16
 80032da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2208      	movs	r2, #8
 80032e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f887 	bl	8003404 <HAL_TIM_IC_CaptureCallback>
 80032f6:	e005      	b.n	8003304 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f879 	bl	80033f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f88a 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10e      	bne.n	8003336 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0201 	mvn.w	r2, #1
 800332e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd f9d9 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b80      	cmp	r3, #128	; 0x80
 8003342:	d10e      	bne.n	8003362 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b80      	cmp	r3, #128	; 0x80
 8003350:	d107      	bne.n	8003362 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800335a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f917 	bl	8003590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f90a 	bl	80035a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f838 	bl	800342c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0220 	mvn.w	r2, #32
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8ca 	bl	800357c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a42      	ldr	r2, [pc, #264]	; (800355c <TIM_Base_SetConfig+0x11c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d00f      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3f      	ldr	r2, [pc, #252]	; (8003560 <TIM_Base_SetConfig+0x120>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <TIM_Base_SetConfig+0x124>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <TIM_Base_SetConfig+0x128>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3c      	ldr	r2, [pc, #240]	; (800356c <TIM_Base_SetConfig+0x12c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d108      	bne.n	8003492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a31      	ldr	r2, [pc, #196]	; (800355c <TIM_Base_SetConfig+0x11c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d01b      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <TIM_Base_SetConfig+0x120>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d017      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <TIM_Base_SetConfig+0x124>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <TIM_Base_SetConfig+0x128>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <TIM_Base_SetConfig+0x130>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2b      	ldr	r2, [pc, #172]	; (8003574 <TIM_Base_SetConfig+0x134>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <TIM_Base_SetConfig+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0x12c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <TIM_Base_SetConfig+0x11c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <TIM_Base_SetConfig+0x100>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <TIM_Base_SetConfig+0x128>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00f      	beq.n	8003540 <TIM_Base_SetConfig+0x100>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <TIM_Base_SetConfig+0x130>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00b      	beq.n	8003540 <TIM_Base_SetConfig+0x100>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <TIM_Base_SetConfig+0x134>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_Base_SetConfig+0x100>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <TIM_Base_SetConfig+0x138>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0x100>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <TIM_Base_SetConfig+0x12c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40013400 	.word	0x40013400
 800356c:	40015000 	.word	0x40015000
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e040      	b.n	800364c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd f954 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fbbc 	bl	8003d74 <UART_SetConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e022      	b.n	800364c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fd84 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fe0b 	bl	8004260 <UART_CheckIdleState>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003668:	2b20      	cmp	r3, #32
 800366a:	d178      	bne.n	800375e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_Transmit+0x24>
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e071      	b.n	8003760 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	; 0x21
 8003688:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368a:	f7fd fa79 	bl	8000b80 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d108      	bne.n	80036bc <HAL_UART_Transmit+0x68>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e003      	b.n	80036c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036c4:	e030      	b.n	8003728 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fe6d 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e03c      	b.n	8003760 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	b292      	uxth	r2, r2
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e008      	b.n	8003716 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b292      	uxth	r2, r2
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1c8      	bne.n	80036c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2200      	movs	r2, #0
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fe36 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e005      	b.n	8003760 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0ba      	sub	sp, #232	; 0xe8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800378e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003792:	f640 030f 	movw	r3, #2063	; 0x80f
 8003796:	4013      	ands	r3, r2
 8003798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800379c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d115      	bne.n	80037d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00f      	beq.n	80037d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 82ab 	beq.w	8003d1c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
      }
      return;
 80037ce:	e2a5      	b.n	8003d1c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8117 	beq.w	8003a08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037ea:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_UART_IRQHandler+0x298>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 810a 	beq.w	8003a08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d011      	beq.n	8003824 <HAL_UART_IRQHandler+0xbc>
 8003800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d011      	beq.n	8003854 <HAL_UART_IRQHandler+0xec>
 8003830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2202      	movs	r2, #2
 8003842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	f043 0204 	orr.w	r2, r3, #4
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_UART_IRQHandler+0x11c>
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2204      	movs	r2, #4
 8003872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d017      	beq.n	80038c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800389c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2208      	movs	r2, #8
 80038ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	f043 0208 	orr.w	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_UART_IRQHandler+0x18a>
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00c      	beq.n	80038f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8211 	beq.w	8003d20 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800390a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800393e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d04f      	beq.n	80039ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fd97 	bl	800447e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d141      	bne.n	80039e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3308      	adds	r3, #8
 8003964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800398e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1d9      	bne.n	800395e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d013      	beq.n	80039da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_UART_IRQHandler+0x29c>)
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fc5f 	bl	8001282 <HAL_DMA_Abort_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d017      	beq.n	80039fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039d4:	4610      	mov	r0, r2
 80039d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00f      	b.n	80039fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9b4 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e00b      	b.n	80039fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9b0 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e007      	b.n	80039fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9ac 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80039f8:	e192      	b.n	8003d20 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fa:	bf00      	nop
    return;
 80039fc:	e190      	b.n	8003d20 <HAL_UART_IRQHandler+0x5b8>
 80039fe:	bf00      	nop
 8003a00:	04000120 	.word	0x04000120
 8003a04:	08004547 	.word	0x08004547

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	f040 814b 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8144 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 813d 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2210      	movs	r2, #16
 8003a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	f040 80b5 	bne.w	8003bb0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8164 	beq.w	8003d24 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a66:	429a      	cmp	r2, r3
 8003a68:	f080 815c 	bcs.w	8003d24 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f000 8086 	beq.w	8003b8e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ab0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1da      	bne.n	8003a82 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003af8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e1      	bne.n	8003acc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e3      	bne.n	8003b08 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5e:	f023 0310 	bic.w	r3, r3, #16
 8003b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b72:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e4      	bne.n	8003b4e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd fb41 	bl	8001210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8d7 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bae:	e0b9      	b.n	8003d24 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80ab 	beq.w	8003d28 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a6 	beq.w	8003d28 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003c00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e4      	bne.n	8003bdc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	623b      	str	r3, [r7, #32]
   return(result);
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c36:	633a      	str	r2, [r7, #48]	; 0x30
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e3      	bne.n	8003c12 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e4      	bne.n	8003c5e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f85b 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca6:	e03f      	b.n	8003d28 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x56a>
 8003cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fc7b 	bl	80045c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cd0:	e02d      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01c      	beq.n	8003d2c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
    }
    return;
 8003cfa:	e017      	b.n	8003d2c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fc2c 	bl	8004572 <UART_EndTransmit_IT>
    return;
 8003d1a:	e008      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d1c:	bf00      	nop
 8003d1e:	e006      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d2c:	bf00      	nop
  }

}
 8003d2e:	37e8      	adds	r7, #232	; 0xe8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b92      	ldr	r3, [pc, #584]	; (8003fe8 <UART_SetConfig+0x274>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6979      	ldr	r1, [r7, #20]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a80      	ldr	r2, [pc, #512]	; (8003fec <UART_SetConfig+0x278>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d120      	bne.n	8003e32 <UART_SetConfig+0xbe>
 8003df0:	4b7f      	ldr	r3, [pc, #508]	; (8003ff0 <UART_SetConfig+0x27c>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d817      	bhi.n	8003e2c <UART_SetConfig+0xb8>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <UART_SetConfig+0x90>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e21 	.word	0x08003e21
 8003e0c:	08003e27 	.word	0x08003e27
 8003e10:	08003e1b 	.word	0x08003e1b
 8003e14:	2301      	movs	r3, #1
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0b5      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e0b2      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e20:	2304      	movs	r3, #4
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e0af      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e26:	2308      	movs	r3, #8
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e0ac      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e0a9      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6f      	ldr	r2, [pc, #444]	; (8003ff4 <UART_SetConfig+0x280>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d124      	bne.n	8003e86 <UART_SetConfig+0x112>
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <UART_SetConfig+0x27c>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e48:	d011      	beq.n	8003e6e <UART_SetConfig+0xfa>
 8003e4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e4e:	d817      	bhi.n	8003e80 <UART_SetConfig+0x10c>
 8003e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e54:	d011      	beq.n	8003e7a <UART_SetConfig+0x106>
 8003e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e5a:	d811      	bhi.n	8003e80 <UART_SetConfig+0x10c>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0xf4>
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x100>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x10c>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e08b      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e088      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e085      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e082      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e07f      	b.n	8003f86 <UART_SetConfig+0x212>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ff8 <UART_SetConfig+0x284>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d124      	bne.n	8003eda <UART_SetConfig+0x166>
 8003e90:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <UART_SetConfig+0x27c>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e9c:	d011      	beq.n	8003ec2 <UART_SetConfig+0x14e>
 8003e9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ea2:	d817      	bhi.n	8003ed4 <UART_SetConfig+0x160>
 8003ea4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ea8:	d011      	beq.n	8003ece <UART_SetConfig+0x15a>
 8003eaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eae:	d811      	bhi.n	8003ed4 <UART_SetConfig+0x160>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <UART_SetConfig+0x148>
 8003eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eb8:	d006      	beq.n	8003ec8 <UART_SetConfig+0x154>
 8003eba:	e00b      	b.n	8003ed4 <UART_SetConfig+0x160>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e061      	b.n	8003f86 <UART_SetConfig+0x212>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e05e      	b.n	8003f86 <UART_SetConfig+0x212>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e05b      	b.n	8003f86 <UART_SetConfig+0x212>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e058      	b.n	8003f86 <UART_SetConfig+0x212>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e055      	b.n	8003f86 <UART_SetConfig+0x212>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a47      	ldr	r2, [pc, #284]	; (8003ffc <UART_SetConfig+0x288>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d124      	bne.n	8003f2e <UART_SetConfig+0x1ba>
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <UART_SetConfig+0x27c>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef0:	d011      	beq.n	8003f16 <UART_SetConfig+0x1a2>
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d817      	bhi.n	8003f28 <UART_SetConfig+0x1b4>
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efc:	d011      	beq.n	8003f22 <UART_SetConfig+0x1ae>
 8003efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f02:	d811      	bhi.n	8003f28 <UART_SetConfig+0x1b4>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <UART_SetConfig+0x19c>
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d006      	beq.n	8003f1c <UART_SetConfig+0x1a8>
 8003f0e:	e00b      	b.n	8003f28 <UART_SetConfig+0x1b4>
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e037      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e034      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e031      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f22:	2308      	movs	r3, #8
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e02e      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e02b      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a33      	ldr	r2, [pc, #204]	; (8004000 <UART_SetConfig+0x28c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d124      	bne.n	8003f82 <UART_SetConfig+0x20e>
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <UART_SetConfig+0x27c>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f44:	d011      	beq.n	8003f6a <UART_SetConfig+0x1f6>
 8003f46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f4a:	d817      	bhi.n	8003f7c <UART_SetConfig+0x208>
 8003f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f50:	d011      	beq.n	8003f76 <UART_SetConfig+0x202>
 8003f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f56:	d811      	bhi.n	8003f7c <UART_SetConfig+0x208>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x1f0>
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d006      	beq.n	8003f70 <UART_SetConfig+0x1fc>
 8003f62:	e00b      	b.n	8003f7c <UART_SetConfig+0x208>
 8003f64:	2300      	movs	r3, #0
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e00d      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e00a      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f70:	2304      	movs	r3, #4
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e007      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f76:	2308      	movs	r3, #8
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e004      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e001      	b.n	8003f86 <UART_SetConfig+0x212>
 8003f82:	2310      	movs	r3, #16
 8003f84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d16b      	bne.n	8004068 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003f90:	7ffb      	ldrb	r3, [r7, #31]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d838      	bhi.n	8004008 <UART_SetConfig+0x294>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x228>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fd1 	.word	0x08003fd1
 8003fa8:	08004009 	.word	0x08004009
 8003fac:	08003fd7 	.word	0x08003fd7
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fd9e 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	61b8      	str	r0, [r7, #24]
        break;
 8003fc6:	e024      	b.n	8004012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7fe fdbc 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	61b8      	str	r0, [r7, #24]
        break;
 8003fce:	e020      	b.n	8004012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <UART_SetConfig+0x290>)
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e01d      	b.n	8004012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7fe fd1d 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003fda:	61b8      	str	r0, [r7, #24]
        break;
 8003fdc:	e019      	b.n	8004012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	61bb      	str	r3, [r7, #24]
        break;
 8003fe4:	e015      	b.n	8004012 <UART_SetConfig+0x29e>
 8003fe6:	bf00      	nop
 8003fe8:	efff69f3 	.word	0xefff69f3
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	40004c00 	.word	0x40004c00
 8004000:	40005000 	.word	0x40005000
 8004004:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	77bb      	strb	r3, [r7, #30]
        break;
 8004010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d073      	beq.n	8004100 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	005a      	lsls	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	441a      	add	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d916      	bls.n	8004062 <UART_SetConfig+0x2ee>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d212      	bcs.n	8004062 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	b29a      	uxth	r2, r3
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	4313      	orrs	r3, r2
 8004056:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	89fa      	ldrh	r2, [r7, #14]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e04e      	b.n	8004100 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	77bb      	strb	r3, [r7, #30]
 8004066:	e04b      	b.n	8004100 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004068:	7ffb      	ldrb	r3, [r7, #31]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d827      	bhi.n	80040be <UART_SetConfig+0x34a>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x300>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fd32 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fd50 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <UART_SetConfig+0x3a4>)
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fcb1 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80040b2:	61b8      	str	r0, [r7, #24]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	61bb      	str	r3, [r7, #24]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	77bb      	strb	r3, [r7, #30]
        break;
 80040c6:	bf00      	nop
    }

    if (pclk != 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085a      	lsrs	r2, r3, #1
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d909      	bls.n	80040fc <UART_SetConfig+0x388>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d205      	bcs.n	80040fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e001      	b.n	8004100 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800410c:	7fbb      	ldrb	r3, [r7, #30]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	007a1200 	.word	0x007a1200

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b098      	sub	sp, #96	; 0x60
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fc fc86 	bl	8000b80 <HAL_GetTick>
 8004274:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d12e      	bne.n	80042e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f88c 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d021      	beq.n	80042e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e062      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d149      	bne.n	8004384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f856 	bl	80043b0 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03c      	beq.n	8004384 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	623b      	str	r3, [r7, #32]
   return(result);
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
 800432a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800432e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	; 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e011      	b.n	80043a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3758      	adds	r7, #88	; 0x58
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	e049      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d045      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fc fbd9 	bl	8000b80 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e048      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d031      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d110      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f838 	bl	800447e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e029      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d111      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f81e 	bl	800447e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d0a6      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b095      	sub	sp, #84	; 0x54
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
 80044a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d118      	bne.n	8004526 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60bb      	str	r3, [r7, #8]
   return(result);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0310 	bic.w	r3, r3, #16
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	669a      	str	r2, [r3, #104]	; 0x68
}
 800453a:	bf00      	nop
 800453c:	3754      	adds	r7, #84	; 0x54
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fbef 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b088      	sub	sp, #32
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60bb      	str	r3, [r7, #8]
   return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e6      	bne.n	800457a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fbbb 	bl	8003d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <memset>:
 80045da:	4402      	add	r2, r0
 80045dc:	4603      	mov	r3, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <memset+0xa>
 80045e2:	4770      	bx	lr
 80045e4:	f803 1b01 	strb.w	r1, [r3], #1
 80045e8:	e7f9      	b.n	80045de <memset+0x4>
	...

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4d0d      	ldr	r5, [pc, #52]	; (8004624 <__libc_init_array+0x38>)
 80045f0:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f2:	1b64      	subs	r4, r4, r5
 80045f4:	10a4      	asrs	r4, r4, #2
 80045f6:	2600      	movs	r6, #0
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	4d0b      	ldr	r5, [pc, #44]	; (800462c <__libc_init_array+0x40>)
 80045fe:	4c0c      	ldr	r4, [pc, #48]	; (8004630 <__libc_init_array+0x44>)
 8004600:	f000 f818 	bl	8004634 <_init>
 8004604:	1b64      	subs	r4, r4, r5
 8004606:	10a4      	asrs	r4, r4, #2
 8004608:	2600      	movs	r6, #0
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08004684 	.word	0x08004684
 8004628:	08004684 	.word	0x08004684
 800462c:	08004684 	.word	0x08004684
 8004630:	08004688 	.word	0x08004688

08004634 <_init>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr

08004640 <_fini>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr
