
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c14  08003c14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c14  08003c14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c14  08003c14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000018c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dcd0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc6  00000000  00000000  0002dd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b88  00000000  00000000  0002fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000904  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020887  00000000  00000000  00030fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f390  00000000  00000000  0005182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9763  00000000  00000000  00060bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002fe8  00000000  00000000  0012a320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003bc4 	.word	0x08003bc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003bc4 	.word	0x08003bc4

080001d4 <sendData>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
int flag = 0;

void sendData (volatile uint8_t *data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, 1, 1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	2201      	movs	r2, #1
 80001e2:	6879      	ldr	r1, [r7, #4]
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <sendData+0x20>)
 80001e6:	f002 fcfd 	bl	8002be4 <HAL_UART_Transmit>
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000074 	.word	0x20000074

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fb52 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f878 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f954 	bl	80004b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000208:	f000 f922 	bl	8000450 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800020c:	f000 f8f0 	bl	80003f0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000210:	f000 f8c8 	bl	80003a4 <MX_TIM16_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sendData(TxData);
 8000214:	4833      	ldr	r0, [pc, #204]	; (80002e4 <main+0xec>)
 8000216:	f7ff ffdd 	bl	80001d4 <sendData>
	  HAL_Delay(10);
 800021a:	200a      	movs	r0, #10
 800021c:	f000 fba8 	bl	8000970 <HAL_Delay>
	  if (flag == 1 && (currentMillis - previousMillis > 20))
 8000220:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <main+0xf0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d113      	bne.n	8000250 <main+0x58>
 8000228:	4b30      	ldr	r3, [pc, #192]	; (80002ec <main+0xf4>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b30      	ldr	r3, [pc, #192]	; (80002f0 <main+0xf8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	2b14      	cmp	r3, #20
 8000234:	d90c      	bls.n	8000250 <main+0x58>
	  {
	    TxData[0] = 1;
 8000236:	4b2b      	ldr	r3, [pc, #172]	; (80002e4 <main+0xec>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
	    sendData(TxData);
 800023c:	4829      	ldr	r0, [pc, #164]	; (80002e4 <main+0xec>)
 800023e:	f7ff ffc9 	bl	80001d4 <sendData>
	    previousMillis = currentMillis;
 8000242:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <main+0xf4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a2a      	ldr	r2, [pc, #168]	; (80002f0 <main+0xf8>)
 8000248:	6013      	str	r3, [r2, #0]
	    TxData[0] = 0;
 800024a:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <main+0xec>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
	  }
	  if (flag == 2 && (currentMillis - previousMillis > 20))
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <main+0xf0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d113      	bne.n	8000280 <main+0x88>
 8000258:	4b24      	ldr	r3, [pc, #144]	; (80002ec <main+0xf4>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b24      	ldr	r3, [pc, #144]	; (80002f0 <main+0xf8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	2b14      	cmp	r3, #20
 8000264:	d90c      	bls.n	8000280 <main+0x88>
	  {
	    TxData[0] = 2;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <main+0xec>)
 8000268:	2202      	movs	r2, #2
 800026a:	701a      	strb	r2, [r3, #0]
	    sendData(TxData);
 800026c:	481d      	ldr	r0, [pc, #116]	; (80002e4 <main+0xec>)
 800026e:	f7ff ffb1 	bl	80001d4 <sendData>
	    previousMillis = currentMillis;
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <main+0xf4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <main+0xf8>)
 8000278:	6013      	str	r3, [r2, #0]
	    TxData[0] = 0;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <main+0xec>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	  }
	 if (flag == 3 && (currentMillis - previousMillis > 20))
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <main+0xf0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d113      	bne.n	80002b0 <main+0xb8>
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <main+0xf4>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <main+0xf8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	2b14      	cmp	r3, #20
 8000294:	d90c      	bls.n	80002b0 <main+0xb8>
	 {
	    TxData[0] = 3;
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <main+0xec>)
 8000298:	2203      	movs	r2, #3
 800029a:	701a      	strb	r2, [r3, #0]
	    sendData(TxData);
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <main+0xec>)
 800029e:	f7ff ff99 	bl	80001d4 <sendData>
	    previousMillis = currentMillis;
 80002a2:	4b12      	ldr	r3, [pc, #72]	; (80002ec <main+0xf4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <main+0xf8>)
 80002a8:	6013      	str	r3, [r2, #0]
	    TxData[0] = 0;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <main+0xec>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	  }
	  if (flag == 4 && (currentMillis - previousMillis > 20))
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <main+0xf0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d1ad      	bne.n	8000214 <main+0x1c>
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <main+0xf4>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0xf8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	2b14      	cmp	r3, #20
 80002c4:	d9a6      	bls.n	8000214 <main+0x1c>
	  {
	    TxData[0] = 4;
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <main+0xec>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	701a      	strb	r2, [r3, #0]
	    sendData(TxData);
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <main+0xec>)
 80002ce:	f7ff ff81 	bl	80001d4 <sendData>
	    previousMillis = currentMillis;
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <main+0xf4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <main+0xf8>)
 80002d8:	6013      	str	r3, [r2, #0]
	    TxData[0] = 0;
 80002da:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <main+0xec>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
	  sendData(TxData);
 80002e0:	e798      	b.n	8000214 <main+0x1c>
 80002e2:	bf00      	nop
 80002e4:	20000184 	.word	0x20000184
 80002e8:	20000190 	.word	0x20000190
 80002ec:	2000018c 	.word	0x2000018c
 80002f0:	20000188 	.word	0x20000188

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b0a6      	sub	sp, #152	; 0x98
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fc31 	bl	8003b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2258      	movs	r2, #88	; 0x58
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fc23 	bl	8003b6a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000332:	2300      	movs	r3, #0
 8000334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fe65 	bl	800100c <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000348:	f000 f94a 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	2300      	movs	r3, #0
 8000352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fea4 	bl	80020b4 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000372:	f000 f935 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <SystemClock_Config+0xac>)
 8000378:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000382:	2300      	movs	r3, #0
 8000384:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f002 f8c9 	bl	8002520 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000394:	f000 f924 	bl	80005e0 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3798      	adds	r7, #152	; 0x98
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	00800003 	.word	0x00800003

080003a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003aa:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_TIM16_Init+0x48>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003b0:	224f      	movs	r2, #79	; 0x4f
 80003b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_TIM16_Init+0x44>)
 80003d6:	f002 fac1 	bl	800295c <HAL_TIM_Base_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80003e0:	f000 f8fe 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000028 	.word	0x20000028
 80003ec:	40014400 	.word	0x40014400

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	f002 fb88 	bl	8002b48 <HAL_UART_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f8cf 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000074 	.word	0x20000074
 800044c:	40013800 	.word	0x40013800

08000450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART2_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800045c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000494:	f002 fb58 	bl	8002b48 <HAL_UART_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f89f 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000fc 	.word	0x200000fc
 80004ac:	40004400 	.word	0x40004400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_GPIO_Init+0xcc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a2c      	ldr	r2, [pc, #176]	; (800057c <MX_GPIO_Init+0xcc>)
 80004cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_GPIO_Init+0xcc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_GPIO_Init+0xcc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <MX_GPIO_Init+0xcc>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <MX_GPIO_Init+0xcc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_GPIO_Init+0xcc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a20      	ldr	r2, [pc, #128]	; (800057c <MX_GPIO_Init+0xcc>)
 80004fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_GPIO_Init+0xcc>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800050e:	230c      	movs	r3, #12
 8000510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000512:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <MX_GPIO_Init+0xd0>)
 8000524:	f000 fbd0 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000528:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800052c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	4811      	ldr	r0, [pc, #68]	; (8000584 <MX_GPIO_Init+0xd4>)
 8000540:	f000 fbc2 	bl	8000cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2008      	movs	r0, #8
 800054a:	f000 fb10 	bl	8000b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800054e:	2008      	movs	r0, #8
 8000550:	f000 fb29 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2009      	movs	r0, #9
 800055a:	f000 fb08 	bl	8000b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800055e:	2009      	movs	r0, #9
 8000560:	f000 fb21 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	2028      	movs	r0, #40	; 0x28
 800056a:	f000 fb00 	bl	8000b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800056e:	2028      	movs	r0, #40	; 0x28
 8000570:	f000 fb19 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800
 8000584:	48000400 	.word	0x48000400

08000588 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);

  currentMillis = HAL_GetTick();
 8000592:	f000 f9e1 	bl	8000958 <HAL_GetTick>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x50>)
 800059a:	6013      	str	r3, [r2, #0]
	//  currentMillis = __HAL_TIM_GET_COUNTER(&htim16);
  if (GPIO_Pin == GPIO_PIN_2){
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d102      	bne.n	80005a8 <HAL_GPIO_EXTI_Callback+0x20>
	  flag = 1;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_3){
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	2b08      	cmp	r3, #8
 80005ac:	d102      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x2c>
	  flag = 2;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_14){
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005ba:	d102      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x3a>
	  flag = 3;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005be:	2203      	movs	r2, #3
 80005c0:	601a      	str	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_15){
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005c8:	d102      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x48>
	  flag = 4;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005cc:	2204      	movs	r2, #4
 80005ce:	601a      	str	r2, [r3, #0]
  }

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000018c 	.word	0x2000018c
 80005dc:	20000190 	.word	0x20000190

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <HAL_MspInit+0x44>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_TIM_Base_MspInit+0x38>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d10b      	bne.n	800065e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_TIM_Base_MspInit+0x3c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <HAL_TIM_Base_MspInit+0x3c>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_TIM_Base_MspInit+0x3c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40014400 	.word	0x40014400
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a36      	ldr	r2, [pc, #216]	; (800076c <HAL_UART_MspInit+0xf8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d130      	bne.n	80006f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000696:	4b36      	ldr	r3, [pc, #216]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a35      	ldr	r2, [pc, #212]	; (8000770 <HAL_UART_MspInit+0xfc>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <HAL_UART_MspInit+0xfc>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <HAL_UART_MspInit+0xfc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <HAL_UART_MspInit+0xfc>)
 80006b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_UART_MspInit+0xfc>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006c6:	2330      	movs	r3, #48	; 0x30
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006d6:	2307      	movs	r3, #7
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <HAL_UART_MspInit+0x100>)
 80006e2:	f000 faf1 	bl	8000cc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f000 fa3f 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006f0:	2025      	movs	r0, #37	; 0x25
 80006f2:	f000 fa58 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f6:	e035      	b.n	8000764 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_UART_MspInit+0x104>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d130      	bne.n	8000764 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_UART_MspInit+0xfc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_UART_MspInit+0xfc>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000732:	230c      	movs	r3, #12
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000742:	2307      	movs	r3, #7
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f000 faba 	bl	8000cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2026      	movs	r0, #38	; 0x26
 800075a:	f000 fa08 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800075e:	2026      	movs	r0, #38	; 0x26
 8000760:	f000 fa21 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
}
 8000764:	bf00      	nop
 8000766:	3730      	adds	r7, #48	; 0x30
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40013800 	.word	0x40013800
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800
 8000778:	40004400 	.word	0x40004400

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f8b2 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f000 fc01 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80007e2:	2008      	movs	r0, #8
 80007e4:	f000 fbfa 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <USART1_IRQHandler+0x10>)
 80007f2:	f002 fa81 	bl	8002cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000074 	.word	0x20000074

08000800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <USART2_IRQHandler+0x10>)
 8000806:	f002 fa77 	bl	8002cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000fc 	.word	0x200000fc

08000814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000818:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800081c:	f000 fbde 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000820:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000824:	f000 fbda 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000854:	f7ff ffea 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f003 f97d 	bl	8003b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fcb9 	bl	80001f8 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000888:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000894:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8000898:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800089c:	20000198 	.word	0x20000198

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x28>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f94f 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fe94 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f967 	bl	8000bc2 <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f92f 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000194 	.word	0x20000194

08000958 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;  
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000194 	.word	0x20000194

08000970 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff29 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff3e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff31 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa2 	bl	8000b14 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d008      	beq.n	8000bfe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2204      	movs	r2, #4
 8000bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e020      	b.n	8000c40 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 020e 	bic.w	r2, r2, #14
 8000c0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d005      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2204      	movs	r2, #4
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e027      	b.n	8000cbe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 020e 	bic.w	r2, r2, #14
 8000c7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0201 	bic.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
    } 
  }
  return status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd6:	e160      	b.n	8000f9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8152 	beq.w	8000f94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x40>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 0201 	and.w	r2, r3, #1
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	6939      	ldr	r1, [r7, #16]
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0203 	and.w	r2, r3, #3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80ac 	beq.w	8000f94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a5d      	ldr	r2, [pc, #372]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e54:	4a59      	ldr	r2, [pc, #356]	; (8000fbc <HAL_GPIO_Init+0x2f4>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7e:	d025      	beq.n	8000ecc <HAL_GPIO_Init+0x204>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d01f      	beq.n	8000ec8 <HAL_GPIO_Init+0x200>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x2fc>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d019      	beq.n	8000ec4 <HAL_GPIO_Init+0x1fc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x300>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d013      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <HAL_GPIO_Init+0x1f4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x308>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d007      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d101      	bne.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e00c      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000eb8:	2305      	movs	r3, #5
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x2f4>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae97 	bne.w	8000cd8 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	48001800 	.word	0x48001800
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fac4 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001012:	af00      	add	r7, sp, #0
 8001014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800101c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	f001 b83a 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 816f 	beq.w	8001326 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001048:	4bb5      	ldr	r3, [pc, #724]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b04      	cmp	r3, #4
 8001052:	d00c      	beq.n	800106e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001054:	4bb2      	ldr	r3, [pc, #712]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d15c      	bne.n	800111a <HAL_RCC_OscConfig+0x10e>
 8001060:	4baf      	ldr	r3, [pc, #700]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d155      	bne.n	800111a <HAL_RCC_OscConfig+0x10e>
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001082:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x94>
 800109a:	4ba1      	ldr	r3, [pc, #644]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	e015      	b.n	80010cc <HAL_RCC_OscConfig+0xc0>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010c8:	4b95      	ldr	r3, [pc, #596]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010d8:	fa92 f2a2 	rbit	r2, r2
 80010dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010e4:	fab2 f282 	clz	r2, r2
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f042 0220 	orr.w	r2, r2, #32
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f002 021f 	and.w	r2, r2, #31
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8111 	beq.w	8001324 <HAL_RCC_OscConfig+0x318>
 8001102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001106:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8108 	bne.w	8001324 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	f000 bfc6 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800111e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x12e>
 800112c:	4b7c      	ldr	r3, [pc, #496]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a7b      	ldr	r2, [pc, #492]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e036      	b.n	80011a8 <HAL_RCC_OscConfig+0x19c>
 800113a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800113e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x158>
 800114a:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a74      	ldr	r2, [pc, #464]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b72      	ldr	r3, [pc, #456]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a71      	ldr	r2, [pc, #452]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e021      	b.n	80011a8 <HAL_RCC_OscConfig+0x19c>
 8001164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0x184>
 8001176:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a69      	ldr	r2, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a66      	ldr	r2, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0x19c>
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a62      	ldr	r2, [pc, #392]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d059      	beq.n	800126c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fbce 	bl	8000958 <HAL_GetTick>
 80011bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff fbc9 	bl	8000958 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d902      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f000 bf67 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 80011d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x1fe>
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e015      	b.n	8001236 <HAL_RCC_OscConfig+0x22a>
 800120a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800121e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001222:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001226:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800123e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800124a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800124e:	fab2 f282 	clz	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 021f 	and.w	r2, r2, #31
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0ab      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1b6>
 800126a:	e05c      	b.n	8001326 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb74 	bl	8000958 <HAL_GetTick>
 8001270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff fb6f 	bl	8000958 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bf0d 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 800128c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001290:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0x2b2>
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x2de>
 80012be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_RCC_OscConfig+0x314>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ab      	bne.n	8001276 <HAL_RCC_OscConfig+0x26a>
 800131e:	e002      	b.n	8001326 <HAL_RCC_OscConfig+0x31a>
 8001320:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 817f 	beq.w	800163a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800133c:	4ba7      	ldr	r3, [pc, #668]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00c      	beq.n	8001362 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001348:	4ba4      	ldr	r3, [pc, #656]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b08      	cmp	r3, #8
 8001352:	d173      	bne.n	800143c <HAL_RCC_OscConfig+0x430>
 8001354:	4ba1      	ldr	r3, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800135c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001360:	d16c      	bne.n	800143c <HAL_RCC_OscConfig+0x430>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001374:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x386>
 800138c:	4b93      	ldr	r3, [pc, #588]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	e013      	b.n	80013ba <HAL_RCC_OscConfig+0x3ae>
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013aa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	2202      	movs	r2, #2
 80013bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013c0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013c4:	fa92 f2a2 	rbit	r2, r2
 80013c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f042 0220 	orr.w	r2, r2, #32
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f002 021f 	and.w	r2, r2, #31
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00a      	beq.n	8001402 <HAL_RCC_OscConfig+0x3f6>
 80013ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d002      	beq.n	8001402 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f000 be52 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800140e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	21f8      	movs	r1, #248	; 0xf8
 8001418:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001420:	fa91 f1a1 	rbit	r1, r1
 8001424:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001428:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800142c:	fab1 f181 	clz	r1, r1
 8001430:	b2c9      	uxtb	r1, r1
 8001432:	408b      	lsls	r3, r1
 8001434:	4969      	ldr	r1, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e0fe      	b.n	800163a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800143c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001440:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8088 	beq.w	800155e <HAL_RCC_OscConfig+0x552>
 800144e:	2301      	movs	r3, #1
 8001450:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001460:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800146e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2301      	movs	r3, #1
 8001478:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa6d 	bl	8000958 <HAL_GetTick>
 800147e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fa68 	bl	8000958 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 be06 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0x4be>
 80014c4:	4b45      	ldr	r3, [pc, #276]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e013      	b.n	80014f2 <HAL_RCC_OscConfig+0x4e6>
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	2202      	movs	r2, #2
 80014f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014fc:	fa92 f2a2 	rbit	r2, r2
 8001500:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001504:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001508:	fab2 f282 	clz	r2, r2
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f042 0220 	orr.w	r2, r2, #32
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	f002 021f 	and.w	r2, r2, #31
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0af      	beq.n	8001484 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001530:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	21f8      	movs	r1, #248	; 0xf8
 800153a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001542:	fa91 f1a1 	rbit	r1, r1
 8001546:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800154a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800154e:	fab1 f181 	clz	r1, r1
 8001552:	b2c9      	uxtb	r1, r1
 8001554:	408b      	lsls	r3, r1
 8001556:	4921      	ldr	r1, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e06d      	b.n	800163a <HAL_RCC_OscConfig+0x62e>
 800155e:	2301      	movs	r3, #1
 8001560:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001570:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800157e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	461a      	mov	r2, r3
 8001586:	2300      	movs	r3, #0
 8001588:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f9e5 	bl	8000958 <HAL_GetTick>
 800158e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff f9e0 	bl	8000958 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d902      	bls.n	80015aa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f000 bd7e 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5d4>
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_RCC_OscConfig+0x5d0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e016      	b.n	8001608 <HAL_RCC_OscConfig+0x5fc>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001604:	4bbf      	ldr	r3, [pc, #764]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2202      	movs	r2, #2
 800160a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800160e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001612:	fa92 f2a2 	rbit	r2, r2
 8001616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800161a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800161e:	fab2 f282 	clz	r2, r2
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	f042 0220 	orr.w	r2, r2, #32
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	f002 021f 	and.w	r2, r2, #31
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ac      	bne.n	8001594 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8113 	beq.w	8001876 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d07c      	beq.n	800175a <HAL_RCC_OscConfig+0x74e>
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4ba2      	ldr	r3, [pc, #648]	; (8001908 <HAL_RCC_OscConfig+0x8fc>)
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	461a      	mov	r2, r3
 8001686:	2301      	movs	r3, #1
 8001688:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff f965 	bl	8000958 <HAL_GetTick>
 800168e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff f960 	bl	8000958 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d902      	bls.n	80016aa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f000 bcfe 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001704:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001708:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001716:	2102      	movs	r1, #2
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f1a3 	rbit	r1, r3
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001730:	6019      	str	r1, [r3, #0]
  return result;
 8001732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001736:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d09d      	beq.n	8001694 <HAL_RCC_OscConfig+0x688>
 8001758:	e08d      	b.n	8001876 <HAL_RCC_OscConfig+0x86a>
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001778:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001786:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCC_OscConfig+0x8fc>)
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	461a      	mov	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff f8dc 	bl	8000958 <HAL_GetTick>
 80017a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff f8d7 	bl	8000958 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d902      	bls.n	80017bc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f000 bc75 	b.w	80020a6 <HAL_RCC_OscConfig+0x109a>
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001826:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 800182a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001834:	2102      	movs	r1, #2
 8001836:	6019      	str	r1, [r3, #0]
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f1a3 	rbit	r1, r3
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800184e:	6019      	str	r1, [r3, #0]
  return result;
 8001850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001854:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d197      	bne.n	80017a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 81a5 	beq.w	8001bd6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_RCC_OscConfig+0x8f8>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x900>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d121      	bne.n	800191c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x900>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x900>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f838 	bl	8000958 <HAL_GetTick>
 80018e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e010      	b.n	8001910 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff f833 	bl	8000958 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d908      	bls.n	8001910 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e3d1      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	10908120 	.word	0x10908120
 800190c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b8d      	ldr	r3, [pc, #564]	; (8001b48 <HAL_RCC_OscConfig+0xb3c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0e8      	beq.n	80018ee <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x92e>
 800192c:	4b87      	ldr	r3, [pc, #540]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a86      	ldr	r2, [pc, #536]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e035      	b.n	80019a6 <HAL_RCC_OscConfig+0x99a>
 800193a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x958>
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a7c      	ldr	r2, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	e020      	b.n	80019a6 <HAL_RCC_OscConfig+0x99a>
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x982>
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a74      	ldr	r2, [pc, #464]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a71      	ldr	r2, [pc, #452]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x99a>
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8081 	beq.w	8001aba <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7fe ffce 	bl	8000958 <HAL_GetTick>
 80019bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7fe ffc9 	bl	8000958 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e365      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a20:	601a      	str	r2, [r3, #0]
  return result;
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0xa3a>
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	e013      	b.n	8001a6e <HAL_RCC_OscConfig+0xa62>
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a64:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a76:	2102      	movs	r1, #2
 8001a78:	6011      	str	r1, [r2, #0]
 8001a7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	fa92 f1a2 	rbit	r1, r2
 8001a88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a8c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a90:	6011      	str	r1, [r2, #0]
  return result;
 8001a92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a96:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fab2 f282 	clz	r2, r2
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f002 021f 	and.w	r2, r2, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d084      	beq.n	80019c2 <HAL_RCC_OscConfig+0x9b6>
 8001ab8:	e083      	b.n	8001bc2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7fe ff4d 	bl	8000958 <HAL_GetTick>
 8001abe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7fe ff48 	bl	8000958 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2e4      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b22:	601a      	str	r2, [r3, #0]
  return result;
 8001b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b28:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0xb44>
 8001b42:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <HAL_RCC_OscConfig+0xb40>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	e017      	b.n	8001b78 <HAL_RCC_OscConfig+0xb6c>
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b58:	2202      	movs	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	4bb3      	ldr	r3, [pc, #716]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b80:	2102      	movs	r1, #2
 8001b82:	6011      	str	r1, [r2, #0]
 8001b84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	fa92 f1a2 	rbit	r1, r2
 8001b92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b96:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b9a:	6011      	str	r1, [r2, #0]
  return result;
 8001b9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ba0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f002 021f 	and.w	r2, r2, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d180      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a9d      	ldr	r2, [pc, #628]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 825e 	beq.w	80020a4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b96      	ldr	r3, [pc, #600]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	f000 821f 	beq.w	8002034 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	f040 8170 	bne.w	8001ee8 <HAL_RCC_OscConfig+0xedc>
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c2c:	601a      	str	r2, [r3, #0]
  return result;
 8001c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c36:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fe83 	bl	8000958 <HAL_GetTick>
 8001c52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	e009      	b.n	8001c6c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe fe7e 	bl	8000958 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e21c      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 8001c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c90:	601a      	str	r2, [r3, #0]
  return result;
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xcaa>
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	e027      	b.n	8001d06 <HAL_RCC_OscConfig+0xcfa>
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d12:	6011      	str	r1, [r2, #0]
 8001d14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	fa92 f1a2 	rbit	r1, r2
 8001d22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d26:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d2a:	6011      	str	r1, [r2, #0]
  return result;
 8001d2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d30:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d182      	bne.n	8001c58 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a19      	ldr	r1, [r3, #32]
 8001d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	492d      	ldr	r1, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001db8:	601a      	str	r2, [r3, #0]
  return result;
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dc2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fdbd 	bl	8000958 <HAL_GetTick>
 8001dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de2:	e009      	b.n	8001df8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fdb8 	bl	8000958 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e156      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e1c:	601a      	str	r2, [r3, #0]
  return result;
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0xe3c>
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <HAL_RCC_OscConfig+0xe38>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e02a      	b.n	8001e98 <HAL_RCC_OscConfig+0xe8c>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b86      	ldr	r3, [pc, #536]	; (80020b0 <HAL_RCC_OscConfig+0x10a4>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea4:	6011      	str	r1, [r2, #0]
 8001ea6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eaa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fa92 f1a2 	rbit	r1, r2
 8001eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ebc:	6011      	str	r1, [r2, #0]
  return result;
 8001ebe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f43f af7f 	beq.w	8001de4 <HAL_RCC_OscConfig+0xdd8>
 8001ee6:	e0dd      	b.n	80020a4 <HAL_RCC_OscConfig+0x1098>
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f0c:	601a      	str	r2, [r3, #0]
  return result;
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f16:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fd13 	bl	8000958 <HAL_GetTick>
 8001f32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	e009      	b.n	8001f4c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe fd0e 	bl	8000958 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0ac      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_OscConfig+0xf8a>
 8001f90:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x10a4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e027      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfda>
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fdc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x10a4>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff2:	6011      	str	r1, [r2, #0]
 8001ff4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	fa92 f1a2 	rbit	r1, r2
 8002002:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002006:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800200a:	6011      	str	r1, [r2, #0]
  return result;
 800200c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002010:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d182      	bne.n	8001f38 <HAL_RCC_OscConfig+0xf2c>
 8002032:	e037      	b.n	80020a4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e02e      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_OscConfig+0x10a4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_RCC_OscConfig+0x10a4>)
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002058:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800205c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d117      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002070:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002074:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002084:	429a      	cmp	r2, r3
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b09e      	sub	sp, #120	; 0x78
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e162      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b90      	ldr	r3, [pc, #576]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	498b      	ldr	r1, [pc, #556]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e14a      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b82      	ldr	r3, [pc, #520]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	497f      	ldr	r1, [pc, #508]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80dc 	beq.w	80022e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d13c      	bne.n	80021aa <HAL_RCC_ClockConfig+0xf6>
 8002130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002134:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_ClockConfig+0xa6>
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e00f      	b.n	800217a <HAL_RCC_ClockConfig+0xc6>
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	667b      	str	r3, [r7, #100]	; 0x64
 8002168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216c:	663b      	str	r3, [r7, #96]	; 0x60
 800216e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800217e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d17b      	bne.n	800229e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0f3      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d13c      	bne.n	800222c <HAL_RCC_ClockConfig+0x178>
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_ClockConfig+0x128>
 80021d6:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_RCC_ClockConfig+0x148>
 80021dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
 80021f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f8:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002200:	63ba      	str	r2, [r7, #56]	; 0x38
 8002202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002204:	fa92 f2a2 	rbit	r2, r2
 8002208:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800220a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d13a      	bne.n	800229e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b2      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
 800222c:	2302      	movs	r3, #2
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_RCC_ClockConfig+0x1a0>
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e00d      	b.n	8002270 <HAL_RCC_ClockConfig+0x1bc>
 8002254:	2302      	movs	r3, #2
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2202      	movs	r2, #2
 8002272:	61ba      	str	r2, [r7, #24]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	617a      	str	r2, [r7, #20]
  return result;
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0220 	orr.w	r2, r2, #32
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e079      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	491a      	ldr	r1, [pc, #104]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7fe fb52 	bl	8000958 <HAL_GetTick>
 80022b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe fb4e 	bl	8000958 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e061      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d214      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4906      	ldr	r1, [pc, #24]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_ClockConfig+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e040      	b.n	8002392 <HAL_RCC_ClockConfig+0x2de>
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	491a      	ldr	r1, [pc, #104]	; (800239c <HAL_RCC_ClockConfig+0x2e8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x2e8>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4912      	ldr	r1, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x2e8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002356:	f000 f829 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800235a:	4601      	mov	r1, r0
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_ClockConfig+0x2e8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002364:	22f0      	movs	r2, #240	; 0xf0
 8002366:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	fa92 f2a2 	rbit	r2, r2
 800236e:	60fa      	str	r2, [r7, #12]
  return result;
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	fab2 f282 	clz	r2, r2
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	40d3      	lsrs	r3, r2
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x2ec>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	fa21 f303 	lsr.w	r3, r1, r3
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe faa0 	bl	80008d0 <HAL_InitTick>
  
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3778      	adds	r7, #120	; 0x78
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003bdc 	.word	0x08003bdc
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b08b      	sub	sp, #44	; 0x2c
 80023b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x30>
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x36>
 80023da:	e03f      	b.n	800245c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	e03f      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	fa92 f2a2 	rbit	r2, r2
 80023f4:	607a      	str	r2, [r7, #4]
  return result;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	40d3      	lsrs	r3, r2
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	220f      	movs	r2, #15
 8002410:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	fa92 f2a2 	rbit	r2, r2
 8002418:	60fa      	str	r2, [r7, #12]
  return result;
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	40d3      	lsrs	r3, r2
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002434:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	fbb2 f2f3 	udiv	r2, r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e007      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fbb2 f2f3 	udiv	r2, r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	623b      	str	r3, [r7, #32]
      break;
 800245a:	e002      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc8>)
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002462:	6a3b      	ldr	r3, [r7, #32]
}
 8002464:	4618      	mov	r0, r3
 8002466:	372c      	adds	r7, #44	; 0x2c
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40021000 	.word	0x40021000
 8002474:	007a1200 	.word	0x007a1200
 8002478:	08003bf4 	.word	0x08003bf4
 800247c:	08003c04 	.word	0x08003c04

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800249e:	f7ff ffef 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	603a      	str	r2, [r7, #0]
  return result;
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	40d3      	lsrs	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08003bec 	.word	0x08003bec

080024dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024e2:	f7ff ffcd 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024e6:	4601      	mov	r1, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	fa92 f2a2 	rbit	r2, r2
 80024fc:	603a      	str	r2, [r7, #0]
  return result;
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	fab2 f282 	clz	r2, r2
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	40d3      	lsrs	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_RCC_GetPCLK2Freq+0x40>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	08003bec 	.word	0x08003bec

08002520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b092      	sub	sp, #72	; 0x48
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80d4 	beq.w	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002544:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a41      	ldr	r2, [pc, #260]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe f9e7 	bl	8000958 <HAL_GetTick>
 800258a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe f9e3 	bl	8000958 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	; 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1d6      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8084 	beq.w	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d07c      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	461a      	mov	r2, r3
 80025f6:	2301      	movs	r3, #1
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	461a      	mov	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d04b      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe f993 	bl	8000958 <HAL_GetTick>
 8002632:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe f98f 	bl	8000958 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e180      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800264c:	2302      	movs	r3, #2
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	61fb      	str	r3, [r7, #28]
  return result;
 8002664:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d108      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800267a:	4b01      	ldr	r3, [pc, #4]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	e00d      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	10908100 	.word	0x10908100
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	4b9a      	ldr	r3, [pc, #616]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2202      	movs	r2, #2
 800269e:	613a      	str	r2, [r7, #16]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	fa92 f2a2 	rbit	r2, r2
 80026a6:	60fa      	str	r2, [r7, #12]
  return result;
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	fab2 f282 	clz	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0b7      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026c6:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	498c      	ldr	r1, [pc, #560]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4a87      	ldr	r2, [pc, #540]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f8:	4b82      	ldr	r3, [pc, #520]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f023 0203 	bic.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	497f      	ldr	r1, [pc, #508]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002716:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4978      	ldr	r1, [pc, #480]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002734:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	4970      	ldr	r1, [pc, #448]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002752:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f023 0210 	bic.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4969      	ldr	r1, [pc, #420]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	4961      	ldr	r1, [pc, #388]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f023 0220 	bic.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	495a      	ldr	r1, [pc, #360]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ac:	4b55      	ldr	r3, [pc, #340]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	4952      	ldr	r1, [pc, #328]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ca:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	494b      	ldr	r1, [pc, #300]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4943      	ldr	r1, [pc, #268]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	493c      	ldr	r1, [pc, #240]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002842:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	492d      	ldr	r1, [pc, #180]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002860:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	4925      	ldr	r1, [pc, #148]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	491e      	ldr	r1, [pc, #120]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	490f      	ldr	r1, [pc, #60]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	e002      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	4913      	ldr	r1, [pc, #76]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	490b      	ldr	r1, [pc, #44]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002948:	4313      	orrs	r3, r2
 800294a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3748      	adds	r7, #72	; 0x48
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e049      	b.n	8002a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd fe56 	bl	8000634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 f836 	bl	8002a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d00f      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <TIM_Base_SetConfig+0x120>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <TIM_Base_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d01b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <TIM_Base_SetConfig+0x120>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d017      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <TIM_Base_SetConfig+0x124>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <TIM_Base_SetConfig+0x130>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <TIM_Base_SetConfig+0x134>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2a      	ldr	r2, [pc, #168]	; (8002b44 <TIM_Base_SetConfig+0x138>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00f      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <TIM_Base_SetConfig+0x130>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <TIM_Base_SetConfig+0x134>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <TIM_Base_SetConfig+0x138>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40015000 	.word	0x40015000
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e040      	b.n	8002bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd fd82 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fbbc 	bl	8003304 <UART_SetConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e022      	b.n	8002bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fd84 	bl	80036ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fe0b 	bl	80037f0 <UART_CheckIdleState>
 8002bda:	4603      	mov	r3, r0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d178      	bne.n	8002cee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_UART_Transmit+0x24>
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e071      	b.n	8002cf0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1a:	f7fd fe9d 	bl	8000958 <HAL_GetTick>
 8002c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c38:	d108      	bne.n	8002c4c <HAL_UART_Transmit+0x68>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e003      	b.n	8002c54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c54:	e030      	b.n	8002cb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2180      	movs	r1, #128	; 0x80
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fe6d 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e03c      	b.n	8002cf0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10b      	bne.n	8002c94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	3302      	adds	r3, #2
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e008      	b.n	8002ca6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1c8      	bne.n	8002c56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fe36 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e005      	b.n	8002cf0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0ba      	sub	sp, #232	; 0xe8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d22:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d26:	4013      	ands	r3, r2
 8002d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00f      	beq.n	8002d60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 82ab 	beq.w	80032ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
      return;
 8002d5e:	e2a5      	b.n	80032ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8117 	beq.w	8002f98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d7a:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_UART_IRQHandler+0x298>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 810a 	beq.w	8002f98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d011      	beq.n	8002db4 <HAL_UART_IRQHandler+0xbc>
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2201      	movs	r2, #1
 8002da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d011      	beq.n	8002de4 <HAL_UART_IRQHandler+0xec>
 8002dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	f043 0204 	orr.w	r2, r3, #4
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d011      	beq.n	8002e14 <HAL_UART_IRQHandler+0x11c>
 8002df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d017      	beq.n	8002e50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	f043 0208 	orr.w	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <HAL_UART_IRQHandler+0x18a>
 8002e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8211 	beq.w	80032b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d005      	beq.n	8002eda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04f      	beq.n	8002f7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fd97 	bl	8003a0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d141      	bne.n	8002f72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1d9      	bne.n	8002eee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d013      	beq.n	8002f6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_UART_IRQHandler+0x29c>)
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fe7c 	bl	8000c4c <HAL_DMA_Abort_IT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d017      	beq.n	8002f8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f64:	4610      	mov	r0, r2
 8002f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e00f      	b.n	8002f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9b4 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	e00b      	b.n	8002f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9b0 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e007      	b.n	8002f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9ac 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f88:	e192      	b.n	80032b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8a:	bf00      	nop
    return;
 8002f8c:	e190      	b.n	80032b0 <HAL_UART_IRQHandler+0x5b8>
 8002f8e:	bf00      	nop
 8002f90:	04000120 	.word	0x04000120
 8002f94:	08003ad7 	.word	0x08003ad7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 814b 	bne.w	8003238 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8144 	beq.w	8003238 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 813d 	beq.w	8003238 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	f040 80b5 	bne.w	8003140 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fe2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8164 	beq.w	80032b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f080 815c 	bcs.w	80032b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b20      	cmp	r3, #32
 800300e:	f000 8086 	beq.w	800311e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800302a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800303c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003040:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003048:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1da      	bne.n	8003012 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3308      	adds	r3, #8
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800306c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3308      	adds	r3, #8
 800307c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003080:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003084:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e1      	bne.n	800305c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3308      	adds	r3, #8
 800309e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3308      	adds	r3, #8
 80030b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e3      	bne.n	8003098 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003100:	65bb      	str	r3, [r7, #88]	; 0x58
 8003102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e4      	bne.n	80030de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fd5e 	bl	8000bda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003130:	b29b      	uxth	r3, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	b29b      	uxth	r3, r3
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8d7 	bl	80032ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800313e:	e0b9      	b.n	80032b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800314c:	b29b      	uxth	r3, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80ab 	beq.w	80032b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a6 	beq.w	80032b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
 8003190:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e4      	bne.n	800316c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	623b      	str	r3, [r7, #32]
   return(result);
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031c6:	633a      	str	r2, [r7, #48]	; 0x30
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e3      	bne.n	80031a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0310 	bic.w	r3, r3, #16
 8003202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	617b      	str	r3, [r7, #20]
   return(result);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e4      	bne.n	80031ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800322a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f85b 	bl	80032ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003236:	e03f      	b.n	80032b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <HAL_UART_IRQHandler+0x56a>
 8003244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fc7b 	bl	8003b56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003260:	e02d      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800326e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01c      	beq.n	80032bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
    }
    return;
 800328a:	e017      	b.n	80032bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_UART_IRQHandler+0x5c6>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fc2c 	bl	8003b02 <UART_EndTransmit_IT>
    return;
 80032aa:	e008      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
      return;
 80032ac:	bf00      	nop
 80032ae:	e006      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
    return;
 80032b0:	bf00      	nop
 80032b2:	e004      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
      return;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
      return;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_UART_IRQHandler+0x5c6>
    return;
 80032bc:	bf00      	nop
  }

}
 80032be:	37e8      	adds	r7, #232	; 0xe8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b92      	ldr	r3, [pc, #584]	; (8003578 <UART_SetConfig+0x274>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	430b      	orrs	r3, r1
 800333a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a80      	ldr	r2, [pc, #512]	; (800357c <UART_SetConfig+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d120      	bne.n	80033c2 <UART_SetConfig+0xbe>
 8003380:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <UART_SetConfig+0x27c>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d817      	bhi.n	80033bc <UART_SetConfig+0xb8>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x90>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b1 	.word	0x080033b1
 800339c:	080033b7 	.word	0x080033b7
 80033a0:	080033ab 	.word	0x080033ab
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e0b5      	b.n	8003516 <UART_SetConfig+0x212>
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e0b2      	b.n	8003516 <UART_SetConfig+0x212>
 80033b0:	2304      	movs	r3, #4
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0af      	b.n	8003516 <UART_SetConfig+0x212>
 80033b6:	2308      	movs	r3, #8
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0ac      	b.n	8003516 <UART_SetConfig+0x212>
 80033bc:	2310      	movs	r3, #16
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0a9      	b.n	8003516 <UART_SetConfig+0x212>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <UART_SetConfig+0x280>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d124      	bne.n	8003416 <UART_SetConfig+0x112>
 80033cc:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <UART_SetConfig+0x27c>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033d8:	d011      	beq.n	80033fe <UART_SetConfig+0xfa>
 80033da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033de:	d817      	bhi.n	8003410 <UART_SetConfig+0x10c>
 80033e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e4:	d011      	beq.n	800340a <UART_SetConfig+0x106>
 80033e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ea:	d811      	bhi.n	8003410 <UART_SetConfig+0x10c>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <UART_SetConfig+0xf4>
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d006      	beq.n	8003404 <UART_SetConfig+0x100>
 80033f6:	e00b      	b.n	8003410 <UART_SetConfig+0x10c>
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e08b      	b.n	8003516 <UART_SetConfig+0x212>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e088      	b.n	8003516 <UART_SetConfig+0x212>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e085      	b.n	8003516 <UART_SetConfig+0x212>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e082      	b.n	8003516 <UART_SetConfig+0x212>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e07f      	b.n	8003516 <UART_SetConfig+0x212>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5b      	ldr	r2, [pc, #364]	; (8003588 <UART_SetConfig+0x284>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d124      	bne.n	800346a <UART_SetConfig+0x166>
 8003420:	4b57      	ldr	r3, [pc, #348]	; (8003580 <UART_SetConfig+0x27c>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003428:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800342c:	d011      	beq.n	8003452 <UART_SetConfig+0x14e>
 800342e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003432:	d817      	bhi.n	8003464 <UART_SetConfig+0x160>
 8003434:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003438:	d011      	beq.n	800345e <UART_SetConfig+0x15a>
 800343a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800343e:	d811      	bhi.n	8003464 <UART_SetConfig+0x160>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <UART_SetConfig+0x148>
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003448:	d006      	beq.n	8003458 <UART_SetConfig+0x154>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x160>
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e061      	b.n	8003516 <UART_SetConfig+0x212>
 8003452:	2302      	movs	r3, #2
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e05e      	b.n	8003516 <UART_SetConfig+0x212>
 8003458:	2304      	movs	r3, #4
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e05b      	b.n	8003516 <UART_SetConfig+0x212>
 800345e:	2308      	movs	r3, #8
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e058      	b.n	8003516 <UART_SetConfig+0x212>
 8003464:	2310      	movs	r3, #16
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e055      	b.n	8003516 <UART_SetConfig+0x212>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a47      	ldr	r2, [pc, #284]	; (800358c <UART_SetConfig+0x288>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d124      	bne.n	80034be <UART_SetConfig+0x1ba>
 8003474:	4b42      	ldr	r3, [pc, #264]	; (8003580 <UART_SetConfig+0x27c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800347c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003480:	d011      	beq.n	80034a6 <UART_SetConfig+0x1a2>
 8003482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003486:	d817      	bhi.n	80034b8 <UART_SetConfig+0x1b4>
 8003488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348c:	d011      	beq.n	80034b2 <UART_SetConfig+0x1ae>
 800348e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003492:	d811      	bhi.n	80034b8 <UART_SetConfig+0x1b4>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <UART_SetConfig+0x19c>
 8003498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349c:	d006      	beq.n	80034ac <UART_SetConfig+0x1a8>
 800349e:	e00b      	b.n	80034b8 <UART_SetConfig+0x1b4>
 80034a0:	2300      	movs	r3, #0
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e037      	b.n	8003516 <UART_SetConfig+0x212>
 80034a6:	2302      	movs	r3, #2
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e034      	b.n	8003516 <UART_SetConfig+0x212>
 80034ac:	2304      	movs	r3, #4
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e031      	b.n	8003516 <UART_SetConfig+0x212>
 80034b2:	2308      	movs	r3, #8
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e02e      	b.n	8003516 <UART_SetConfig+0x212>
 80034b8:	2310      	movs	r3, #16
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e02b      	b.n	8003516 <UART_SetConfig+0x212>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a33      	ldr	r2, [pc, #204]	; (8003590 <UART_SetConfig+0x28c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d124      	bne.n	8003512 <UART_SetConfig+0x20e>
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <UART_SetConfig+0x27c>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80034d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d4:	d011      	beq.n	80034fa <UART_SetConfig+0x1f6>
 80034d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034da:	d817      	bhi.n	800350c <UART_SetConfig+0x208>
 80034dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e0:	d011      	beq.n	8003506 <UART_SetConfig+0x202>
 80034e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e6:	d811      	bhi.n	800350c <UART_SetConfig+0x208>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <UART_SetConfig+0x1f0>
 80034ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f0:	d006      	beq.n	8003500 <UART_SetConfig+0x1fc>
 80034f2:	e00b      	b.n	800350c <UART_SetConfig+0x208>
 80034f4:	2300      	movs	r3, #0
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e00d      	b.n	8003516 <UART_SetConfig+0x212>
 80034fa:	2302      	movs	r3, #2
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e00a      	b.n	8003516 <UART_SetConfig+0x212>
 8003500:	2304      	movs	r3, #4
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e007      	b.n	8003516 <UART_SetConfig+0x212>
 8003506:	2308      	movs	r3, #8
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e004      	b.n	8003516 <UART_SetConfig+0x212>
 800350c:	2310      	movs	r3, #16
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e001      	b.n	8003516 <UART_SetConfig+0x212>
 8003512:	2310      	movs	r3, #16
 8003514:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d16b      	bne.n	80035f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003520:	7ffb      	ldrb	r3, [r7, #31]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d838      	bhi.n	8003598 <UART_SetConfig+0x294>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0x228>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003551 	.word	0x08003551
 8003530:	08003559 	.word	0x08003559
 8003534:	08003561 	.word	0x08003561
 8003538:	08003599 	.word	0x08003599
 800353c:	08003567 	.word	0x08003567
 8003540:	08003599 	.word	0x08003599
 8003544:	08003599 	.word	0x08003599
 8003548:	08003599 	.word	0x08003599
 800354c:	0800356f 	.word	0x0800356f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7fe ffa2 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003554:	61b8      	str	r0, [r7, #24]
        break;
 8003556:	e024      	b.n	80035a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7fe ffc0 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 800355c:	61b8      	str	r0, [r7, #24]
        break;
 800355e:	e020      	b.n	80035a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <UART_SetConfig+0x290>)
 8003562:	61bb      	str	r3, [r7, #24]
        break;
 8003564:	e01d      	b.n	80035a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003566:	f7fe ff21 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800356a:	61b8      	str	r0, [r7, #24]
        break;
 800356c:	e019      	b.n	80035a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e015      	b.n	80035a2 <UART_SetConfig+0x29e>
 8003576:	bf00      	nop
 8003578:	efff69f3 	.word	0xefff69f3
 800357c:	40013800 	.word	0x40013800
 8003580:	40021000 	.word	0x40021000
 8003584:	40004400 	.word	0x40004400
 8003588:	40004800 	.word	0x40004800
 800358c:	40004c00 	.word	0x40004c00
 8003590:	40005000 	.word	0x40005000
 8003594:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77bb      	strb	r3, [r7, #30]
        break;
 80035a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d073      	beq.n	8003690 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	005a      	lsls	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d916      	bls.n	80035f2 <UART_SetConfig+0x2ee>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ca:	d212      	bcs.n	80035f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f023 030f 	bic.w	r3, r3, #15
 80035d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	89fa      	ldrh	r2, [r7, #14]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e04e      	b.n	8003690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77bb      	strb	r3, [r7, #30]
 80035f6:	e04b      	b.n	8003690 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f8:	7ffb      	ldrb	r3, [r7, #31]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d827      	bhi.n	800364e <UART_SetConfig+0x34a>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x300>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003629 	.word	0x08003629
 8003608:	08003631 	.word	0x08003631
 800360c:	08003639 	.word	0x08003639
 8003610:	0800364f 	.word	0x0800364f
 8003614:	0800363f 	.word	0x0800363f
 8003618:	0800364f 	.word	0x0800364f
 800361c:	0800364f 	.word	0x0800364f
 8003620:	0800364f 	.word	0x0800364f
 8003624:	08003647 	.word	0x08003647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003628:	f7fe ff36 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e013      	b.n	8003658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7fe ff54 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 8003634:	61b8      	str	r0, [r7, #24]
        break;
 8003636:	e00f      	b.n	8003658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <UART_SetConfig+0x3a4>)
 800363a:	61bb      	str	r3, [r7, #24]
        break;
 800363c:	e00c      	b.n	8003658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363e:	f7fe feb5 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003642:	61b8      	str	r0, [r7, #24]
        break;
 8003644:	e008      	b.n	8003658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	61bb      	str	r3, [r7, #24]
        break;
 800364c:	e004      	b.n	8003658 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	77bb      	strb	r3, [r7, #30]
        break;
 8003656:	bf00      	nop
    }

    if (pclk != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085a      	lsrs	r2, r3, #1
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	441a      	add	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d909      	bls.n	800368c <UART_SetConfig+0x388>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d205      	bcs.n	800368c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e001      	b.n	8003690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800369c:	7fbb      	ldrb	r3, [r7, #30]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	007a1200 	.word	0x007a1200

080036ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01a      	beq.n	80037c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037aa:	d10a      	bne.n	80037c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b098      	sub	sp, #96	; 0x60
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003800:	f7fd f8aa 	bl	8000958 <HAL_GetTick>
 8003804:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b08      	cmp	r3, #8
 8003812:	d12e      	bne.n	8003872 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f88c 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d021      	beq.n	8003872 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003842:	653b      	str	r3, [r7, #80]	; 0x50
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
 800384e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e062      	b.n	8003938 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d149      	bne.n	8003914 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f856 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03c      	beq.n	8003914 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	623b      	str	r3, [r7, #32]
   return(result);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60fb      	str	r3, [r7, #12]
   return(result);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ec:	61fa      	str	r2, [r7, #28]
 80038ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	617b      	str	r3, [r7, #20]
   return(result);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e011      	b.n	8003938 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3758      	adds	r7, #88	; 0x58
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003950:	e049      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d045      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fc fffd 	bl	8000958 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <UART_WaitOnFlagUntilTimeout+0x30>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e048      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d031      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d110      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2208      	movs	r2, #8
 8003996:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f838 	bl	8003a0e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2208      	movs	r2, #8
 80039a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e029      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c0:	d111      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f81e 	bl	8003a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00f      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d0a6      	beq.n	8003952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b095      	sub	sp, #84	; 0x54
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	643b      	str	r3, [r7, #64]	; 0x40
 8003a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e6      	bne.n	8003a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e5      	bne.n	8003a48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d118      	bne.n	8003ab6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f023 0310 	bic.w	r3, r3, #16
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e6      	bne.n	8003a84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aca:	bf00      	nop
 8003acc:	3754      	adds	r7, #84	; 0x54
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fbef 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6979      	ldr	r1, [r7, #20]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	613b      	str	r3, [r7, #16]
   return(result);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fbbb 	bl	80032c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <memset>:
 8003b6a:	4402      	add	r2, r0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d100      	bne.n	8003b74 <memset+0xa>
 8003b72:	4770      	bx	lr
 8003b74:	f803 1b01 	strb.w	r1, [r3], #1
 8003b78:	e7f9      	b.n	8003b6e <memset+0x4>
	...

08003b7c <__libc_init_array>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4d0d      	ldr	r5, [pc, #52]	; (8003bb4 <__libc_init_array+0x38>)
 8003b80:	4c0d      	ldr	r4, [pc, #52]	; (8003bb8 <__libc_init_array+0x3c>)
 8003b82:	1b64      	subs	r4, r4, r5
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	2600      	movs	r6, #0
 8003b88:	42a6      	cmp	r6, r4
 8003b8a:	d109      	bne.n	8003ba0 <__libc_init_array+0x24>
 8003b8c:	4d0b      	ldr	r5, [pc, #44]	; (8003bbc <__libc_init_array+0x40>)
 8003b8e:	4c0c      	ldr	r4, [pc, #48]	; (8003bc0 <__libc_init_array+0x44>)
 8003b90:	f000 f818 	bl	8003bc4 <_init>
 8003b94:	1b64      	subs	r4, r4, r5
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	2600      	movs	r6, #0
 8003b9a:	42a6      	cmp	r6, r4
 8003b9c:	d105      	bne.n	8003baa <__libc_init_array+0x2e>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba4:	4798      	blx	r3
 8003ba6:	3601      	adds	r6, #1
 8003ba8:	e7ee      	b.n	8003b88 <__libc_init_array+0xc>
 8003baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bae:	4798      	blx	r3
 8003bb0:	3601      	adds	r6, #1
 8003bb2:	e7f2      	b.n	8003b9a <__libc_init_array+0x1e>
 8003bb4:	08003c14 	.word	0x08003c14
 8003bb8:	08003c14 	.word	0x08003c14
 8003bbc:	08003c14 	.word	0x08003c14
 8003bc0:	08003c18 	.word	0x08003c18

08003bc4 <_init>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

08003bd0 <_fini>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr
