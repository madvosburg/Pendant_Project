
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004480  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800464c  0800464c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800464c  0800464c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004654  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000198  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000db19  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026a2  00000000  00000000  0002dc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b08  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000860  00000000  00000000  00030db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000232c2  00000000  00000000  00031610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f910  00000000  00000000  000548d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d04e9  00000000  00000000  000641e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b9c  00000000  00000000  001346cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00137268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080045fc 	.word	0x080045fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	080045fc 	.word	0x080045fc

080001d4 <crc_append>:
uint64_t crc_key = 0xD;

/**
 * appends 3 zeros to end of data to prepare for division
 */
uint64_t crc_append(uint64_t crc_data){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	e9c7 0100 	strd	r0, r1, [r7]
	return crc_data << 3;
 80001de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001e2:	f04f 0200 	mov.w	r2, #0
 80001e6:	f04f 0300 	mov.w	r3, #0
 80001ea:	00cb      	lsls	r3, r1, #3
 80001ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001f0:	00c2      	lsls	r2, r0, #3
}
 80001f2:	4610      	mov	r0, r2
 80001f4:	4619      	mov	r1, r3
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 8000200:	b4b0      	push	{r4, r5, r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 800020a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800020e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 8000212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000216:	f000 0208 	and.w	r2, r0, #8
 800021a:	2300      	movs	r3, #0
 800021c:	4313      	orrs	r3, r2
 800021e:	d00a      	beq.n	8000236 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <crc_xor+0x48>)
 8000222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800022a:	ea80 0402 	eor.w	r4, r0, r2
 800022e:	ea81 0503 	eor.w	r5, r1, r3
 8000232:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 8000236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800023a:	4610      	mov	r0, r2
 800023c:	4619      	mov	r1, r3
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bcb0      	pop	{r4, r5, r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 800024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000250:	b08f      	sub	sp, #60	; 0x3c
 8000252:	af00      	add	r7, sp, #0
 8000254:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000258:	617a      	str	r2, [r7, #20]
 800025a:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000264:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000268:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 800026c:	f04f 0200 	mov.w	r2, #0
 8000270:	f04f 0300 	mov.w	r3, #0
 8000274:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000278:	e057      	b.n	800032a <crc_division+0xde>
		bit_shift--;
 800027a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800027c:	3b01      	subs	r3, #1
 800027e:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 8000280:	f04f 0200 	mov.w	r2, #0
 8000284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000288:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800028a:	f1c0 0120 	rsb	r1, r0, #32
 800028e:	f1b0 0420 	subs.w	r4, r0, #32
 8000292:	fa22 fa00 	lsr.w	sl, r2, r0
 8000296:	fa03 f101 	lsl.w	r1, r3, r1
 800029a:	ea4a 0a01 	orr.w	sl, sl, r1
 800029e:	d403      	bmi.n	80002a8 <crc_division+0x5c>
 80002a0:	fa43 f404 	asr.w	r4, r3, r4
 80002a4:	ea4a 0a04 	orr.w	sl, sl, r4
 80002a8:	fa43 fb00 	asr.w	fp, r3, r0
 80002ac:	4650      	mov	r0, sl
 80002ae:	4659      	mov	r1, fp
 80002b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80002b4:	ea02 0500 	and.w	r5, r2, r0
 80002b8:	ea03 0601 	and.w	r6, r3, r1
 80002bc:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002c6:	f1c0 0420 	rsb	r4, r0, #32
 80002ca:	f1a0 0120 	sub.w	r1, r0, #32
 80002ce:	fa22 f800 	lsr.w	r8, r2, r0
 80002d2:	fa03 f404 	lsl.w	r4, r3, r4
 80002d6:	ea48 0804 	orr.w	r8, r8, r4
 80002da:	fa23 f101 	lsr.w	r1, r3, r1
 80002de:	ea48 0801 	orr.w	r8, r8, r1
 80002e2:	fa23 f900 	lsr.w	r9, r3, r0
 80002e6:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002ee:	1891      	adds	r1, r2, r2
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	415b      	adcs	r3, r3
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80002fa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 80002fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000306:	1884      	adds	r4, r0, r2
 8000308:	603c      	str	r4, [r7, #0]
 800030a:	eb41 0303 	adc.w	r3, r1, r3
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000314:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 8000318:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800031c:	f7ff ff70 	bl	8000200 <crc_xor>
 8000320:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000326:	3301      	adds	r3, #1
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 800032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800032c:	2b00      	cmp	r3, #0
 800032e:	dca4      	bgt.n	800027a <crc_division+0x2e>
	}
	return remain;
 8000330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000334:	4610      	mov	r0, r2
 8000336:	4619      	mov	r1, r3
 8000338:	373c      	adds	r7, #60	; 0x3c
 800033a:	46bd      	mov	sp, r7
 800033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000340 <flash_write>:
#include "flash_driver.h"

/**
* writes button press counts to flash memory
*/
HAL_StatusTypeDef flash_write(uint32_t address, uint32_t data, bool timer_flag, WWDG_HandleTypeDef *hwwdg){
 8000340:	b5b0      	push	{r4, r5, r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	4613      	mov	r3, r2
 800034e:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Unlock();
 8000350:	f001 f83a 	bl	80013c8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {0};
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
	FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitStruct.PageAddress = address;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitStruct.NbPages = 1;
 8000368:	2301      	movs	r3, #1
 800036a:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &PageError);
 800036c:	f107 0210 	add.w	r2, r7, #16
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f001 f8ea 	bl	8001550 <HAL_FLASHEx_Erase>

	if(timer_flag){
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <flash_write+0x48>
		HAL_WWDG_Refresh(hwwdg);
 8000382:	6838      	ldr	r0, [r7, #0]
 8000384:	f004 f82b 	bl	80043de <HAL_WWDG_Refresh>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, (uint64_t)data);
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	2200      	movs	r2, #0
 800038c:	461c      	mov	r4, r3
 800038e:	4615      	mov	r5, r2
 8000390:	4622      	mov	r2, r4
 8000392:	462b      	mov	r3, r5
 8000394:	68f9      	ldr	r1, [r7, #12]
 8000396:	2002      	movs	r0, #2
 8000398:	f000 ffa6 	bl	80012e8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800039c:	f001 f83a 	bl	8001414 <HAL_FLASH_Lock>

	return HAL_OK;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080003ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <__NVIC_GetPriorityGrouping+0x18>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	f003 0307 	and.w	r3, r3, #7
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db0b      	blt.n	80003f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 021f 	and.w	r2, r3, #31
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <__NVIC_EnableIRQ+0x38>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	095b      	lsrs	r3, r3, #5
 80003e8:	2001      	movs	r0, #1
 80003ea:	fa00 f202 	lsl.w	r2, r0, r2
 80003ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e100 	.word	0xe000e100

08000404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	6039      	str	r1, [r7, #0]
 800040e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db0a      	blt.n	800042e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	b2da      	uxtb	r2, r3
 800041c:	490c      	ldr	r1, [pc, #48]	; (8000450 <__NVIC_SetPriority+0x4c>)
 800041e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000422:	0112      	lsls	r2, r2, #4
 8000424:	b2d2      	uxtb	r2, r2
 8000426:	440b      	add	r3, r1
 8000428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800042c:	e00a      	b.n	8000444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4908      	ldr	r1, [pc, #32]	; (8000454 <__NVIC_SetPriority+0x50>)
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f003 030f 	and.w	r3, r3, #15
 800043a:	3b04      	subs	r3, #4
 800043c:	0112      	lsls	r2, r2, #4
 800043e:	b2d2      	uxtb	r2, r2
 8000440:	440b      	add	r3, r1
 8000442:	761a      	strb	r2, [r3, #24]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	e000e100 	.word	0xe000e100
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000458:	b480      	push	{r7}
 800045a:	b089      	sub	sp, #36	; 0x24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f003 0307 	and.w	r3, r3, #7
 800046a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	f1c3 0307 	rsb	r3, r3, #7
 8000472:	2b04      	cmp	r3, #4
 8000474:	bf28      	it	cs
 8000476:	2304      	movcs	r3, #4
 8000478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	3304      	adds	r3, #4
 800047e:	2b06      	cmp	r3, #6
 8000480:	d902      	bls.n	8000488 <NVIC_EncodePriority+0x30>
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3b03      	subs	r3, #3
 8000486:	e000      	b.n	800048a <NVIC_EncodePriority+0x32>
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800048c:	f04f 32ff 	mov.w	r2, #4294967295
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	43da      	mvns	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	401a      	ands	r2, r3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004a0:	f04f 31ff 	mov.w	r1, #4294967295
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43d9      	mvns	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	4313      	orrs	r3, r2
         );
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3724      	adds	r7, #36	; 0x24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f043 0201 	orr.w	r2, r3, #1
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f023 0201 	bic.w	r2, r3, #1
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f06f 0201 	mvn.w	r2, #1
 800052c:	611a      	str	r2, [r3, #16]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b01      	cmp	r3, #1
 800054c:	d101      	bne.n	8000552 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f043 0201 	orr.w	r2, r3, #1
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	615a      	str	r2, [r3, #20]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800058a:	699a      	ldr	r2, [r3, #24]
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <crc_encode>:
uint8_t wwdg_msg[20] = "Watchdog init\n\r";

/**
 * initializes values for division and carries out the encoding of each crc value
 */
void crc_encode(){
 80005b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b4:	b08d      	sub	sp, #52	; 0x34
 80005b6:	af02      	add	r7, sp, #8
	int shift = 60;
 80005b8:	233c      	movs	r3, #60	; 0x3c
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
	int position = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
	uint64_t appended_data = crc_append(data);
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <crc_encode+0xa8>)
 80005c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c6:	4610      	mov	r0, r2
 80005c8:	4619      	mov	r1, r3
 80005ca:	f7ff fe03 	bl	80001d4 <crc_append>
 80005ce:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 80005d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005d6:	f04f 0a00 	mov.w	sl, #0
 80005da:	f003 4b70 	and.w	fp, r3, #4026531840	; 0xf0000000
 80005de:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	dividend = dividend >> shift;
 80005e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80005e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005e8:	f1c1 0620 	rsb	r6, r1, #32
 80005ec:	f1a1 0020 	sub.w	r0, r1, #32
 80005f0:	fa22 f401 	lsr.w	r4, r2, r1
 80005f4:	fa03 f606 	lsl.w	r6, r3, r6
 80005f8:	4334      	orrs	r4, r6
 80005fa:	fa23 f000 	lsr.w	r0, r3, r0
 80005fe:	4304      	orrs	r4, r0
 8000600:	fa23 f501 	lsr.w	r5, r3, r1
 8000604:	e9c7 4504 	strd	r4, r5, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 8000608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800060c:	f7ff fdf8 	bl	8000200 <crc_xor>
 8000610:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 8000614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000618:	e9cd 2300 	strd	r2, r3, [sp]
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	6a3a      	ldr	r2, [r7, #32]
 8000620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000624:	f7ff fe12 	bl	800024c <crc_division>
 8000628:	e9c7 0100 	strd	r0, r1, [r7]
	TxData[0] = data;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <crc_encode+0xa8>)
 800062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000632:	490a      	ldr	r1, [pc, #40]	; (800065c <crc_encode+0xac>)
 8000634:	e9c1 2300 	strd	r2, r3, [r1]
	TxData[1] = appended_data + remain;
 8000638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800063c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000640:	eb10 0802 	adds.w	r8, r0, r2
 8000644:	eb41 0903 	adc.w	r9, r1, r3
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <crc_encode+0xac>)
 800064a:	e9c3 8902 	strd	r8, r9, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	372c      	adds	r7, #44	; 0x2c
 8000652:	46bd      	mov	sp, r7
 8000654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000658:	200001d0 	.word	0x200001d0
 800065c:	200001b8 	.word	0x200001b8

08000660 <send_data>:

/**
 * sends data with crc to receiver every 10ms
 */
void send_data(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	crc_encode();
 8000664:	f7ff ffa4 	bl	80005b0 <crc_encode>

	HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f000 fc91 	bl	8000f90 <HAL_Delay>
	if(timer_flag){
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <send_data+0x30>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <send_data+0x1c>
		HAL_WWDG_Refresh(&hwwdg);		//transmitting timeout
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <send_data+0x34>)
 8000678:	f003 feb1 	bl	80043de <HAL_WWDG_Refresh>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	2218      	movs	r2, #24
 8000682:	4905      	ldr	r1, [pc, #20]	; (8000698 <send_data+0x38>)
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <send_data+0x3c>)
 8000686:	f002 fec3 	bl	8003410 <HAL_UART_Transmit>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200001d8 	.word	0x200001d8
 8000694:	200001a4 	.word	0x200001a4
 8000698:	200001b8 	.word	0x200001b8
 800069c:	20000094 	.word	0x20000094

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fc0e 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f920 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fa34 	bl	8000b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f9e2 	bl	8000a78 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 f9b0 	bl	8000a18 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006b8:	f000 f970 	bl	800099c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM16);
 80006bc:	4877      	ldr	r0, [pc, #476]	; (800089c <main+0x1fc>)
 80006be:	f7ff fefe 	bl	80004be <LL_TIM_EnableCounter>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//watchdog calibration
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 80006c2:	4876      	ldr	r0, [pc, #472]	; (800089c <main+0x1fc>)
 80006c4:	f7ff ff39 	bl	800053a <LL_TIM_IsActiveFlag_UPDATE>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d010      	beq.n	80006f0 <main+0x50>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <main+0x1fc>)
 80006d0:	f7ff ff25 	bl	800051e <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 80006d4:	4871      	ldr	r0, [pc, #452]	; (800089c <main+0x1fc>)
 80006d6:	f7ff ff02 	bl	80004de <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 80006da:	f000 f9fd 	bl	8000ad8 <MX_WWDG_Init>
			timer_flag = true;
 80006de:	4b70      	ldr	r3, [pc, #448]	; (80008a0 <main+0x200>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 80006e4:	230a      	movs	r3, #10
 80006e6:	2214      	movs	r2, #20
 80006e8:	496e      	ldr	r1, [pc, #440]	; (80008a4 <main+0x204>)
 80006ea:	486f      	ldr	r0, [pc, #444]	; (80008a8 <main+0x208>)
 80006ec:	f002 fe90 	bl	8003410 <HAL_UART_Transmit>
		}

		//button logic
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 80006f0:	2104      	movs	r1, #4
 80006f2:	486e      	ldr	r0, [pc, #440]	; (80008ac <main+0x20c>)
 80006f4:	f001 f95a 	bl	80019ac <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d11c      	bne.n	8000738 <main+0x98>
		{
			data = RELAY1_ON;
 80006fe:	496c      	ldr	r1, [pc, #432]	; (80008b0 <main+0x210>)
 8000700:	f04f 0201 	mov.w	r2, #1
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 800070c:	f7ff ffa8 	bl	8000660 <send_data>
			HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 8000710:	230a      	movs	r3, #10
 8000712:	2214      	movs	r2, #20
 8000714:	4967      	ldr	r1, [pc, #412]	; (80008b4 <main+0x214>)
 8000716:	4864      	ldr	r0, [pc, #400]	; (80008a8 <main+0x208>)
 8000718:	f002 fe7a 	bl	8003410 <HAL_UART_Transmit>
			relay1_count++;
 800071c:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <main+0x218>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a65      	ldr	r2, [pc, #404]	; (80008b8 <main+0x218>)
 8000724:	6013      	str	r3, [r2, #0]
			flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
 8000726:	4b64      	ldr	r3, [pc, #400]	; (80008b8 <main+0x218>)
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <main+0x200>)
 800072c:	781a      	ldrb	r2, [r3, #0]
 800072e:	4b63      	ldr	r3, [pc, #396]	; (80008bc <main+0x21c>)
 8000730:	4863      	ldr	r0, [pc, #396]	; (80008c0 <main+0x220>)
 8000732:	f7ff fe05 	bl	8000340 <flash_write>
 8000736:	e00f      	b.n	8000758 <main+0xb8>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1){
 8000738:	2104      	movs	r1, #4
 800073a:	485c      	ldr	r0, [pc, #368]	; (80008ac <main+0x20c>)
 800073c:	f001 f936 	bl	80019ac <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d108      	bne.n	8000758 <main+0xb8>
			data = RELAY1_OFF;
 8000746:	495a      	ldr	r1, [pc, #360]	; (80008b0 <main+0x210>)
 8000748:	f04f 0202 	mov.w	r2, #2
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000754:	f7ff ff84 	bl	8000660 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8000758:	2108      	movs	r1, #8
 800075a:	4854      	ldr	r0, [pc, #336]	; (80008ac <main+0x20c>)
 800075c:	f001 f926 	bl	80019ac <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d11c      	bne.n	80007a0 <main+0x100>
		{
			data = RELAY2_ON;
 8000766:	4952      	ldr	r1, [pc, #328]	; (80008b0 <main+0x210>)
 8000768:	f04f 0203 	mov.w	r2, #3
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000774:	f7ff ff74 	bl	8000660 <send_data>
			HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 8000778:	230a      	movs	r3, #10
 800077a:	2214      	movs	r2, #20
 800077c:	4951      	ldr	r1, [pc, #324]	; (80008c4 <main+0x224>)
 800077e:	484a      	ldr	r0, [pc, #296]	; (80008a8 <main+0x208>)
 8000780:	f002 fe46 	bl	8003410 <HAL_UART_Transmit>
			relay2_count++;
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <main+0x228>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <main+0x228>)
 800078c:	6013      	str	r3, [r2, #0]
			flash_write(RELAY2_ADDRESS, relay2_count, timer_flag, &hwwdg);
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <main+0x228>)
 8000790:	6819      	ldr	r1, [r3, #0]
 8000792:	4b43      	ldr	r3, [pc, #268]	; (80008a0 <main+0x200>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <main+0x21c>)
 8000798:	484c      	ldr	r0, [pc, #304]	; (80008cc <main+0x22c>)
 800079a:	f7ff fdd1 	bl	8000340 <flash_write>
 800079e:	e00f      	b.n	80007c0 <main+0x120>
		}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1){
 80007a0:	2108      	movs	r1, #8
 80007a2:	4842      	ldr	r0, [pc, #264]	; (80008ac <main+0x20c>)
 80007a4:	f001 f902 	bl	80019ac <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d108      	bne.n	80007c0 <main+0x120>
			data = RELAY2_OFF;
 80007ae:	4940      	ldr	r1, [pc, #256]	; (80008b0 <main+0x210>)
 80007b0:	f04f 0204 	mov.w	r2, #4
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 80007bc:	f7ff ff50 	bl	8000660 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	4842      	ldr	r0, [pc, #264]	; (80008d0 <main+0x230>)
 80007c6:	f001 f8f1 	bl	80019ac <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d11c      	bne.n	800080a <main+0x16a>
		{
			data = RELAY3_ON;
 80007d0:	4937      	ldr	r1, [pc, #220]	; (80008b0 <main+0x210>)
 80007d2:	f04f 0205 	mov.w	r2, #5
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 80007de:	f7ff ff3f 	bl	8000660 <send_data>
			HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 80007e2:	230a      	movs	r3, #10
 80007e4:	2214      	movs	r2, #20
 80007e6:	493b      	ldr	r1, [pc, #236]	; (80008d4 <main+0x234>)
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <main+0x208>)
 80007ea:	f002 fe11 	bl	8003410 <HAL_UART_Transmit>
			relay3_count++;
 80007ee:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <main+0x238>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <main+0x238>)
 80007f6:	6013      	str	r3, [r2, #0]
			flash_write(RELAY3_ADDRESS, relay3_count, timer_flag, &hwwdg);
 80007f8:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <main+0x238>)
 80007fa:	6819      	ldr	r1, [r3, #0]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <main+0x200>)
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <main+0x21c>)
 8000802:	4836      	ldr	r0, [pc, #216]	; (80008dc <main+0x23c>)
 8000804:	f7ff fd9c 	bl	8000340 <flash_write>
 8000808:	e010      	b.n	800082c <main+0x18c>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1){
 800080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080e:	4830      	ldr	r0, [pc, #192]	; (80008d0 <main+0x230>)
 8000810:	f001 f8cc 	bl	80019ac <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d108      	bne.n	800082c <main+0x18c>
			data = RELAY3_OFF;
 800081a:	4925      	ldr	r1, [pc, #148]	; (80008b0 <main+0x210>)
 800081c:	f04f 0206 	mov.w	r2, #6
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000828:	f7ff ff1a 	bl	8000660 <send_data>
		}

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)
 800082c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <main+0x230>)
 8000832:	f001 f8bb 	bl	80019ac <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11c      	bne.n	8000876 <main+0x1d6>
		{
			data = RELAY4_ON;
 800083c:	491c      	ldr	r1, [pc, #112]	; (80008b0 <main+0x210>)
 800083e:	f04f 0207 	mov.w	r2, #7
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 800084a:	f7ff ff09 	bl	8000660 <send_data>
			HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 800084e:	230a      	movs	r3, #10
 8000850:	2214      	movs	r2, #20
 8000852:	4923      	ldr	r1, [pc, #140]	; (80008e0 <main+0x240>)
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <main+0x208>)
 8000856:	f002 fddb 	bl	8003410 <HAL_UART_Transmit>
			relay4_count++;
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <main+0x244>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <main+0x244>)
 8000862:	6013      	str	r3, [r2, #0]
			flash_write(RELAY4_ADDRESS, relay4_count, timer_flag, &hwwdg);
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <main+0x244>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0x200>)
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <main+0x21c>)
 800086e:	481e      	ldr	r0, [pc, #120]	; (80008e8 <main+0x248>)
 8000870:	f7ff fd66 	bl	8000340 <flash_write>
 8000874:	e725      	b.n	80006c2 <main+0x22>
		}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <main+0x230>)
 800087c:	f001 f896 	bl	80019ac <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	f47f af1d 	bne.w	80006c2 <main+0x22>
			data = RELAY4_OFF;
 8000888:	4909      	ldr	r1, [pc, #36]	; (80008b0 <main+0x210>)
 800088a:	f04f 0208 	mov.w	r2, #8
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	e9c1 2300 	strd	r2, r3, [r1]
			send_data();
 8000896:	f7ff fee3 	bl	8000660 <send_data>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 800089a:	e712      	b.n	80006c2 <main+0x22>
 800089c:	40014400 	.word	0x40014400
 80008a0:	200001d8 	.word	0x200001d8
 80008a4:	20000058 	.word	0x20000058
 80008a8:	2000011c 	.word	0x2000011c
 80008ac:	48000800 	.word	0x48000800
 80008b0:	200001d0 	.word	0x200001d0
 80008b4:	20000008 	.word	0x20000008
 80008b8:	200001dc 	.word	0x200001dc
 80008bc:	200001a4 	.word	0x200001a4
 80008c0:	0803f800 	.word	0x0803f800
 80008c4:	2000001c 	.word	0x2000001c
 80008c8:	200001e0 	.word	0x200001e0
 80008cc:	0803f000 	.word	0x0803f000
 80008d0:	48000400 	.word	0x48000400
 80008d4:	20000030 	.word	0x20000030
 80008d8:	200001e4 	.word	0x200001e4
 80008dc:	0803e800 	.word	0x0803e800
 80008e0:	20000044 	.word	0x20000044
 80008e4:	200001e8 	.word	0x200001e8
 80008e8:	0803e000 	.word	0x0803e000

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a6      	sub	sp, #152	; 0x98
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fe52 	bl	80045a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2258      	movs	r2, #88	; 0x58
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fe44 	bl	80045a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f875 	bl	8001a24 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000940:	f000 f956 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000948:	2300      	movs	r3, #0
 800094a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f8b4 	bl	8002acc <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800096a:	f000 f941 	bl	8000bf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SystemClock_Config+0xac>)
 8000970:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800097a:	2300      	movs	r3, #0
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fad9 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800098c:	f000 f930 	bl	8000bf0 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3798      	adds	r7, #152	; 0x98
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	00800003 	.word	0x00800003

0800099c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80009b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009b4:	f7ff fde4 	bl	8000580 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009b8:	f7ff fcf8 	bl	80003ac <__NVIC_GetPriorityGrouping>
 80009bc:	4603      	mov	r3, r0
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fd48 	bl	8000458 <NVIC_EncodePriority>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	2019      	movs	r0, #25
 80009ce:	f7ff fd19 	bl	8000404 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009d2:	2019      	movs	r0, #25
 80009d4:	f7ff fcf8 	bl	80003c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 80009d8:	f240 136f 	movw	r3, #367	; 0x16f
 80009dc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 80009e2:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 80009e6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM16_Init+0x78>)
 80009f6:	f003 fd3d 	bl	8004474 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_TIM16_Init+0x78>)
 80009fc:	f7ff fd7f 	bl	80004fe <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

	LL_TIM_GenerateEvent_UPDATE(TIM16);
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_TIM16_Init+0x78>)
 8000a02:	f7ff fdad 	bl	8000560 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM16_Init+0x78>)
 8000a08:	f7ff fd89 	bl	800051e <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40014400 	.word	0x40014400

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <MX_USART1_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a5c:	f002 fc8a 	bl	8003374 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a66:	f000 f8c3 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000094 	.word	0x20000094
 8000a74:	40013800 	.word	0x40013800

08000a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_USART2_UART_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000abc:	f002 fc5a 	bl	8003374 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 f893 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000011c 	.word	0x2000011c
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_Init 1 */
	//counter = ((max_time * clk) / (4096 * prescalar)) + 64			= ((0.015 * 8M) / (4096 * 4)) + 64 = 72
	//window = counter - ((min_time * clk) / (4096 * prescalar))		= 72 - ((0.005 * 8M) / (4096 * 4)) = 70
	//5-30ms window for watchdog reset (79, 77)
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <MX_WWDG_Init+0x3c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae8:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000aec:	2246      	movs	r2, #70	; 0x46
 8000aee:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000af2:	2248      	movs	r2, #72	; 0x48
 8000af4:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_WWDG_Init+0x38>)
 8000afe:	f003 fc4a 	bl	8004396 <HAL_WWDG_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000b08:	f000 f872 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200001a4 	.word	0x200001a4
 8000b14:	40002c00 	.word	0x40002c00

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_GPIO_Init+0xcc>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4817      	ldr	r0, [pc, #92]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b8c:	f000 fd84 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000ba8:	f000 fd76 	bl	8001698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2008      	movs	r0, #8
 8000bb2:	f000 faec 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000bb6:	2008      	movs	r0, #8
 8000bb8:	f000 fb05 	bl	80011c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2009      	movs	r0, #9
 8000bc2:	f000 fae4 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bc6:	2009      	movs	r0, #9
 8000bc8:	f000 fafd 	bl	80011c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f000 fadc 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd6:	2028      	movs	r0, #40	; 0x28
 8000bd8:	f000 faf5 	bl	80011c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000400 	.word	0x48000400

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_UART_MspInit+0xf8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d130      	bne.n	8000cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c96:	2330      	movs	r3, #48	; 0x30
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4824      	ldr	r0, [pc, #144]	; (8000d44 <HAL_UART_MspInit+0x100>)
 8000cb2:	f000 fcf1 	bl	8001698 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fa67 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 fa80 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	e035      	b.n	8000d34 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_UART_MspInit+0x104>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d130      	bne.n	8000d34 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0xfc>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d02:	230c      	movs	r3, #12
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 fcba 	bl	8001698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2026      	movs	r0, #38	; 0x26
 8000d2a:	f000 fa30 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2e:	2026      	movs	r0, #38	; 0x26
 8000d30:	f000 fa49 	bl	80011c6 <HAL_NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3730      	adds	r7, #48	; 0x30
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48000800 	.word	0x48000800
 8000d48:	40004400 	.word	0x40004400

08000d4c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_WWDG_MspInit+0x38>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10b      	bne.n	8000d76 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_WWDG_MspInit+0x3c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_WWDG_MspInit+0x3c>)
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_WWDG_MspInit+0x3c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40002c00 	.word	0x40002c00
 8000d88:	40021000 	.word	0x40021000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f8ba 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000de4:	2004      	movs	r0, #4
 8000de6:	f000 fdf9 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000df2:	2008      	movs	r0, #8
 8000df4:	f000 fdf2 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <USART1_IRQHandler+0x10>)
 8000e12:	f002 fb87 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000094 	.word	0x20000094

08000e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USART2_IRQHandler+0x10>)
 8000e26:	f002 fb7d 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000011c 	.word	0x2000011c

08000e34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000e38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e3c:	f000 fdce 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e44:	f000 fdca 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f003 fb89 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fbfd 	bl	80006a0 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000eb4:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 8000eb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ebc:	20000210 	.word	0x20000210

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x28>)
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe8c 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000006c 	.word	0x2000006c
 8000f48:	20000074 	.word	0x20000074
 8000f4c:	20000070 	.word	0x20000070

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000074 	.word	0x20000074
 8000f74:	200001ec 	.word	0x200001ec

08000f78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001ec 	.word	0x200001ec

08000f90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000074 	.word	0x20000074

08000fd8 <__NVIC_SetPriorityGrouping>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001208:	2b02      	cmp	r3, #2
 800120a:	d008      	beq.n	800121e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2204      	movs	r2, #4
 8001210:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e020      	b.n	8001260 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 020e 	bic.w	r2, r2, #14
 800122c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800127e:	2b02      	cmp	r3, #2
 8001280:	d005      	beq.n	800128e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e027      	b.n	80012de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
    } 
  }
  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_FLASH_Program+0xd8>)
 8001304:	7e1b      	ldrb	r3, [r3, #24]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_FLASH_Program+0x26>
 800130a:	2302      	movs	r3, #2
 800130c:	e054      	b.n	80013b8 <HAL_FLASH_Program+0xd0>
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <HAL_FLASH_Program+0xd8>)
 8001310:	2201      	movs	r2, #1
 8001312:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001314:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001318:	f000 f8a8 	bl	800146c <FLASH_WaitForLastOperation>
 800131c:	4603      	mov	r3, r0
 800131e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d144      	bne.n	80013b0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800132c:	2301      	movs	r3, #1
 800132e:	757b      	strb	r3, [r7, #21]
 8001330:	e007      	b.n	8001342 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d102      	bne.n	800133e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001338:	2302      	movs	r3, #2
 800133a:	757b      	strb	r3, [r7, #21]
 800133c:	e001      	b.n	8001342 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800133e:	2304      	movs	r3, #4
 8001340:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001342:	2300      	movs	r3, #0
 8001344:	75bb      	strb	r3, [r7, #22]
 8001346:	e02d      	b.n	80013a4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	005a      	lsls	r2, r3, #1
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	eb02 0c03 	add.w	ip, r2, r3
 8001352:	7dbb      	ldrb	r3, [r7, #22]
 8001354:	0119      	lsls	r1, r3, #4
 8001356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135a:	f1c1 0620 	rsb	r6, r1, #32
 800135e:	f1a1 0020 	sub.w	r0, r1, #32
 8001362:	fa22 f401 	lsr.w	r4, r2, r1
 8001366:	fa03 f606 	lsl.w	r6, r3, r6
 800136a:	4334      	orrs	r4, r6
 800136c:	fa23 f000 	lsr.w	r0, r3, r0
 8001370:	4304      	orrs	r4, r0
 8001372:	fa23 f501 	lsr.w	r5, r3, r1
 8001376:	b2a3      	uxth	r3, r4
 8001378:	4619      	mov	r1, r3
 800137a:	4660      	mov	r0, ip
 800137c:	f000 f85a 	bl	8001434 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001380:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001384:	f000 f872 	bl	800146c <FLASH_WaitForLastOperation>
 8001388:	4603      	mov	r3, r0
 800138a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_FLASH_Program+0xdc>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_FLASH_Program+0xdc>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d107      	bne.n	80013ae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800139e:	7dbb      	ldrb	r3, [r7, #22]
 80013a0:	3301      	adds	r3, #1
 80013a2:	75bb      	strb	r3, [r7, #22]
 80013a4:	7dba      	ldrb	r2, [r7, #22]
 80013a6:	7d7b      	ldrb	r3, [r7, #21]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3cd      	bcc.n	8001348 <HAL_FLASH_Program+0x60>
 80013ac:	e000      	b.n	80013b0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80013ae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_FLASH_Program+0xd8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	761a      	strb	r2, [r3, #24]

  return status;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c0:	200001f0 	.word	0x200001f0
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_FLASH_Unlock+0x40>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_FLASH_Unlock+0x40>)
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_FLASH_Unlock+0x44>)
 80013e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_FLASH_Unlock+0x40>)
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_FLASH_Unlock+0x48>)
 80013e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_FLASH_Unlock+0x40>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40022000 	.word	0x40022000
 800140c:	45670123 	.word	0x45670123
 8001410:	cdef89ab 	.word	0xcdef89ab

08001414 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_FLASH_Lock+0x1c>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_FLASH_Lock+0x1c>)
 800141e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001422:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40022000 	.word	0x40022000

08001434 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <FLASH_Program_HalfWord+0x30>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <FLASH_Program_HalfWord+0x34>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <FLASH_Program_HalfWord+0x34>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	801a      	strh	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200001f0 	.word	0x200001f0
 8001468:	40022000 	.word	0x40022000

0800146c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff fd80 	bl	8000f78 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800147a:	e010      	b.n	800149e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001482:	d00c      	beq.n	800149e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <FLASH_WaitForLastOperation+0x2e>
 800148a:	f7ff fd75 	bl	8000f78 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	d201      	bcs.n	800149e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e01f      	b.n	80014de <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <FLASH_WaitForLastOperation+0x7c>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d0e8      	beq.n	800147c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <FLASH_WaitForLastOperation+0x7c>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d102      	bne.n	80014bc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <FLASH_WaitForLastOperation+0x7c>)
 80014b8:	2220      	movs	r2, #32
 80014ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <FLASH_WaitForLastOperation+0x7c>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d005      	beq.n	80014d4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <FLASH_WaitForLastOperation+0x7c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d103      	bne.n	80014dc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014d4:	f000 f80a 	bl	80014ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <FLASH_SetErrorCode+0x5c>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d109      	bne.n	8001516 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <FLASH_SetErrorCode+0x60>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <FLASH_SetErrorCode+0x60>)
 800150c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <FLASH_SetErrorCode+0x5c>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b04      	cmp	r3, #4
 8001520:	d109      	bne.n	8001536 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <FLASH_SetErrorCode+0x60>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <FLASH_SetErrorCode+0x60>)
 800152c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <FLASH_SetErrorCode+0x5c>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60d3      	str	r3, [r2, #12]
}  
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40022000 	.word	0x40022000
 800154c:	200001f0 	.word	0x200001f0

08001550 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_FLASHEx_Erase+0xcc>)
 8001564:	7e1b      	ldrb	r3, [r3, #24]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_FLASHEx_Erase+0x1e>
 800156a:	2302      	movs	r3, #2
 800156c:	e052      	b.n	8001614 <HAL_FLASHEx_Erase+0xc4>
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_FLASHEx_Erase+0xcc>)
 8001570:	2201      	movs	r2, #1
 8001572:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d115      	bne.n	80015a8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800157c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001580:	f7ff ff74 	bl	800146c <FLASH_WaitForLastOperation>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d140      	bne.n	800160c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800158a:	f000 f84b 	bl	8001624 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001592:	f7ff ff6b 	bl	800146c <FLASH_WaitForLastOperation>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_FLASHEx_Erase+0xd0>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_FLASHEx_Erase+0xd0>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6113      	str	r3, [r2, #16]
 80015a6:	e031      	b.n	800160c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80015a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015ac:	f7ff ff5e 	bl	800146c <FLASH_WaitForLastOperation>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d12a      	bne.n	800160c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	e019      	b.n	80015fa <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80015c6:	68b8      	ldr	r0, [r7, #8]
 80015c8:	f000 f846 	bl	8001658 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015d0:	f7ff ff4c 	bl	800146c <FLASH_WaitForLastOperation>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_FLASHEx_Erase+0xd0>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_FLASHEx_Erase+0xd0>)
 80015de:	f023 0302 	bic.w	r3, r3, #2
 80015e2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	601a      	str	r2, [r3, #0]
            break;
 80015f0:	e00c      	b.n	800160c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	02da      	lsls	r2, r3, #11
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4413      	add	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3dc      	bcc.n	80015c6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_FLASHEx_Erase+0xcc>)
 800160e:	2200      	movs	r2, #0
 8001610:	761a      	strb	r2, [r3, #24]

  return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001f0 	.word	0x200001f0
 8001620:	40022000 	.word	0x40022000

08001624 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <FLASH_MassErase+0x2c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <FLASH_MassErase+0x30>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <FLASH_MassErase+0x30>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <FLASH_MassErase+0x30>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <FLASH_MassErase+0x30>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6113      	str	r3, [r2, #16]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200001f0 	.word	0x200001f0
 8001654:	40022000 	.word	0x40022000

08001658 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <FLASH_PageErase+0x38>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <FLASH_PageErase+0x3c>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <FLASH_PageErase+0x3c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <FLASH_PageErase+0x3c>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <FLASH_PageErase+0x3c>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <FLASH_PageErase+0x3c>)
 800167e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001682:	6113      	str	r3, [r2, #16]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	200001f0 	.word	0x200001f0
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e160      	b.n	800196a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8152 	beq.w	8001964 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	6939      	ldr	r1, [r7, #16]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80ac 	beq.w	8001964 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a5d      	ldr	r2, [pc, #372]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001824:	4a59      	ldr	r2, [pc, #356]	; (800198c <HAL_GPIO_Init+0x2f4>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184e:	d025      	beq.n	800189c <HAL_GPIO_Init+0x204>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d01f      	beq.n	8001898 <HAL_GPIO_Init+0x200>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d019      	beq.n	8001894 <HAL_GPIO_Init+0x1fc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_GPIO_Init+0x1f8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x304>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_GPIO_Init+0x1f4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x308>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0x1f0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x30c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_GPIO_Init+0x1ec>
 8001880:	2306      	movs	r3, #6
 8001882:	e00c      	b.n	800189e <HAL_GPIO_Init+0x206>
 8001884:	2307      	movs	r3, #7
 8001886:	e00a      	b.n	800189e <HAL_GPIO_Init+0x206>
 8001888:	2305      	movs	r3, #5
 800188a:	e008      	b.n	800189e <HAL_GPIO_Init+0x206>
 800188c:	2304      	movs	r3, #4
 800188e:	e006      	b.n	800189e <HAL_GPIO_Init+0x206>
 8001890:	2303      	movs	r3, #3
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x206>
 8001894:	2302      	movs	r3, #2
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x206>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x206>
 800189c:	2300      	movs	r3, #0
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ae:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2f4>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_GPIO_Init+0x310>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e0:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_GPIO_Init+0x310>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_GPIO_Init+0x310>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_GPIO_Init+0x310>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_GPIO_Init+0x310>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_GPIO_Init+0x310>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x310>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_GPIO_Init+0x310>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f ae97 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	48000c00 	.word	0x48000c00
 800199c:	48001000 	.word	0x48001000
 80019a0:	48001400 	.word	0x48001400
 80019a4:	48001800 	.word	0x48001800
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f001 b83a 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 816f 	beq.w	8001d3e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a60:	4bb5      	ldr	r3, [pc, #724]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4bb2      	ldr	r3, [pc, #712]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d15c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x10e>
 8001a78:	4baf      	ldr	r3, [pc, #700]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d155      	bne.n	8001b32 <HAL_RCC_OscConfig+0x10e>
 8001a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x94>
 8001ab2:	4ba1      	ldr	r3, [pc, #644]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e015      	b.n	8001ae4 <HAL_RCC_OscConfig+0xc0>
 8001ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ad4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ae0:	4b95      	ldr	r3, [pc, #596]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001aec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001af0:	fa92 f2a2 	rbit	r2, r2
 8001af4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001af8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8111 	beq.w	8001d3c <HAL_RCC_OscConfig+0x318>
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8108 	bne.w	8001d3c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f000 bfc6 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12e>
 8001b44:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7b      	ldr	r2, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e036      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x158>
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a74      	ldr	r2, [pc, #464]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a71      	ldr	r2, [pc, #452]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e021      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x184>
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a69      	ldr	r2, [pc, #420]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x19c>
 8001ba8:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a62      	ldr	r2, [pc, #392]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a5f      	ldr	r2, [pc, #380]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d059      	beq.n	8001c84 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f9d2 	bl	8000f78 <HAL_GetTick>
 8001bd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9cd 	bl	8000f78 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d902      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f000 bf67 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 8001bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_OscConfig+0x1fe>
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x22a>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c52:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c56:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001c62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f002 021f 	and.w	r2, r2, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ab      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b6>
 8001c82:	e05c      	b.n	8001d3e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f978 	bl	8000f78 <HAL_GetTick>
 8001c88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7ff f973 	bl	8000f78 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d902      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f000 bf0d 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 8001ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001cb8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2b2>
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x2de>
 8001cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cf2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_RCC_OscConfig+0x314>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d0e:	fa92 f2a2 	rbit	r2, r2
 8001d12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d1a:	fab2 f282 	clz	r2, r2
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f002 021f 	and.w	r2, r2, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ab      	bne.n	8001c8e <HAL_RCC_OscConfig+0x26a>
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_OscConfig+0x31a>
 8001d38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 817f 	beq.w	8002052 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d54:	4ba7      	ldr	r3, [pc, #668]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d60:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d173      	bne.n	8001e54 <HAL_RCC_OscConfig+0x430>
 8001d6c:	4ba1      	ldr	r3, [pc, #644]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d78:	d16c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x430>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001d8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x386>
 8001da4:	4b93      	ldr	r3, [pc, #588]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e013      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3ae>
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dc2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001dd8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ddc:	fa92 f2a2 	rbit	r2, r2
 8001de0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001de4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3f6>
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d002      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f000 be52 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	21f8      	movs	r1, #248	; 0xf8
 8001e30:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e38:	fa91 f1a1 	rbit	r1, r1
 8001e3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e44:	fab1 f181 	clz	r1, r1
 8001e48:	b2c9      	uxtb	r1, r1
 8001e4a:	408b      	lsls	r3, r1
 8001e4c:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e0fe      	b.n	8002052 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8088 	beq.w	8001f76 <HAL_RCC_OscConfig+0x552>
 8001e66:	2301      	movs	r3, #1
 8001e68:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001e78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff f871 	bl	8000f78 <HAL_GetTick>
 8001e96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f86c 	bl	8000f78 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d902      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	f000 be06 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ec4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4be>
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	e013      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e6>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001efa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f06:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f10:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f002 021f 	and.w	r2, r2, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0af      	beq.n	8001e9c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	21f8      	movs	r1, #248	; 0xf8
 8001f52:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f5a:	fa91 f1a1 	rbit	r1, r1
 8001f5e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f62:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f66:	fab1 f181 	clz	r1, r1
 8001f6a:	b2c9      	uxtb	r1, r1
 8001f6c:	408b      	lsls	r3, r1
 8001f6e:	4921      	ldr	r1, [pc, #132]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e06d      	b.n	8002052 <HAL_RCC_OscConfig+0x62e>
 8001f76:	2301      	movs	r3, #1
 8001f78:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001f88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ffe9 	bl	8000f78 <HAL_GetTick>
 8001fa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fac:	f7fe ffe4 	bl	8000f78 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	f000 bd7e 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001fd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5d4>
 8001fec:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <HAL_RCC_OscConfig+0x5d0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e016      	b.n	8002020 <HAL_RCC_OscConfig+0x5fc>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002010:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800201c:	4bbf      	ldr	r3, [pc, #764]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002026:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002032:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ac      	bne.n	8001fac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8113 	beq.w	800228e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d07c      	beq.n	8002172 <HAL_RCC_OscConfig+0x74e>
 8002078:	2301      	movs	r3, #1
 800207a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800208a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4ba2      	ldr	r3, [pc, #648]	; (8002320 <HAL_RCC_OscConfig+0x8fc>)
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe ff69 	bl	8000f78 <HAL_GetTick>
 80020a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe ff64 	bl	8000f78 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bcfe 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002106:	2202      	movs	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002120:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 8002124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800212e:	2102      	movs	r1, #2
 8002130:	6019      	str	r1, [r3, #0]
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f1a3 	rbit	r1, r3
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002148:	6019      	str	r1, [r3, #0]
  return result;
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d09d      	beq.n	80020ac <HAL_RCC_OscConfig+0x688>
 8002170:	e08d      	b.n	800228e <HAL_RCC_OscConfig+0x86a>
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800219e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x8fc>)
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fee0 	bl	8000f78 <HAL_GetTick>
 80021b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fedb 	bl	8000f78 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d902      	bls.n	80021d4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f000 bc75 	b.w	8002abe <HAL_RCC_OscConfig+0x109a>
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002220:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800223e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800224c:	2102      	movs	r1, #2
 800224e:	6019      	str	r1, [r3, #0]
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f1a3 	rbit	r1, r3
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002266:	6019      	str	r1, [r3, #0]
  return result;
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d197      	bne.n	80021be <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 81a5 	beq.w	80025ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCC_OscConfig+0x8f8>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_RCC_OscConfig+0x900>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_OscConfig+0x900>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_RCC_OscConfig+0x900>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fc:	f7fe fe3c 	bl	8000f78 <HAL_GetTick>
 8002300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e010      	b.n	8002328 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fe37 	bl	8000f78 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e3d1      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	10908120 	.word	0x10908120
 8002324:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <HAL_RCC_OscConfig+0xb3c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0e8      	beq.n	8002306 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x92e>
 8002344:	4b87      	ldr	r3, [pc, #540]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a86      	ldr	r2, [pc, #536]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e035      	b.n	80023be <HAL_RCC_OscConfig+0x99a>
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x958>
 8002362:	4b80      	ldr	r3, [pc, #512]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a7c      	ldr	r2, [pc, #496]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	e020      	b.n	80023be <HAL_RCC_OscConfig+0x99a>
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x982>
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a74      	ldr	r2, [pc, #464]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a71      	ldr	r2, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x99a>
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a6b      	ldr	r2, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8081 	beq.w	80024d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fdd2 	bl	8000f78 <HAL_GetTick>
 80023d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00b      	b.n	80023f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fdcd 	bl	8000f78 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e365      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800241e:	2202      	movs	r2, #2
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002434:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002438:	601a      	str	r2, [r3, #0]
  return result;
 800243a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002442:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d102      	bne.n	800245e <HAL_RCC_OscConfig+0xa3a>
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	e013      	b.n	8002486 <HAL_RCC_OscConfig+0xa62>
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002466:	2202      	movs	r2, #2
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800248a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800248e:	2102      	movs	r1, #2
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002496:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	fa92 f1a2 	rbit	r1, r2
 80024a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024a4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80024a8:	6011      	str	r1, [r2, #0]
  return result;
 80024aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f002 021f 	and.w	r2, r2, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d084      	beq.n	80023da <HAL_RCC_OscConfig+0x9b6>
 80024d0:	e083      	b.n	80025da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fd51 	bl	8000f78 <HAL_GetTick>
 80024d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fd4c 	bl	8000f78 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e2e4      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024fc:	2202      	movs	r2, #2
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002504:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002512:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002536:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800253a:	601a      	str	r2, [r3, #0]
  return result;
 800253c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002540:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002544:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0xb44>
 800255a:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_RCC_OscConfig+0xb40>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	e017      	b.n	8002590 <HAL_RCC_OscConfig+0xb6c>
 8002560:	40007000 	.word	0x40007000
 8002564:	40021000 	.word	0x40021000
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	4bb3      	ldr	r3, [pc, #716]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002594:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002598:	2102      	movs	r1, #2
 800259a:	6011      	str	r1, [r2, #0]
 800259c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	fa92 f1a2 	rbit	r1, r2
 80025aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80025b2:	6011      	str	r1, [r2, #0]
  return result;
 80025b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d180      	bne.n	80024dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025da:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b9e      	ldr	r3, [pc, #632]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a9d      	ldr	r2, [pc, #628]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 825e 	beq.w	8002abc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	f000 821f 	beq.w	8002a4c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 8170 	bne.w	8002900 <HAL_RCC_OscConfig+0xedc>
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002644:	601a      	str	r2, [r3, #0]
  return result;
 8002646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800264e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	2300      	movs	r3, #0
 8002664:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fc87 	bl	8000f78 <HAL_GetTick>
 800266a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc82 	bl	8000f78 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e21c      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 8002684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002688:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026a8:	601a      	str	r2, [r3, #0]
  return result;
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_OscConfig+0xcaa>
 80026c8:	4b64      	ldr	r3, [pc, #400]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e027      	b.n	800271e <HAL_RCC_OscConfig+0xcfa>
 80026ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002722:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002726:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800272a:	6011      	str	r1, [r2, #0]
 800272c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002730:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	fa92 f1a2 	rbit	r1, r2
 800273a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002742:	6011      	str	r1, [r2, #0]
  return result;
 8002744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002748:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f042 0220 	orr.w	r2, r2, #32
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d182      	bne.n	8002670 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f023 020f 	bic.w	r2, r3, #15
 8002772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002776:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 8002780:	4313      	orrs	r3, r2
 8002782:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a19      	ldr	r1, [r3, #32]
 8002798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	492d      	ldr	r1, [pc, #180]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fa93 f2a3 	rbit	r2, r3
 80027c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027d0:	601a      	str	r2, [r3, #0]
  return result;
 80027d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	461a      	mov	r2, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fbc1 	bl	8000f78 <HAL_GetTick>
 80027f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fa:	e009      	b.n	8002810 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fbbc 	bl	8000f78 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e156      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 8002810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002814:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800281c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	fa93 f2a3 	rbit	r2, r3
 800282c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002830:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002834:	601a      	str	r2, [r3, #0]
  return result;
 8002836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800283e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0xe3c>
 8002854:	4b01      	ldr	r3, [pc, #4]	; (800285c <HAL_RCC_OscConfig+0xe38>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	e02a      	b.n	80028b0 <HAL_RCC_OscConfig+0xe8c>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002864:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002872:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002880:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <HAL_RCC_OscConfig+0x10a4>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028bc:	6011      	str	r1, [r2, #0]
 80028be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fa92 f1a2 	rbit	r1, r2
 80028cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028d0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80028d4:	6011      	str	r1, [r2, #0]
  return result;
 80028d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028da:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f43f af7f 	beq.w	80027fc <HAL_RCC_OscConfig+0xdd8>
 80028fe:	e0dd      	b.n	8002abc <HAL_RCC_OscConfig+0x1098>
 8002900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002904:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002912:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002920:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002924:	601a      	str	r2, [r3, #0]
  return result;
 8002926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800292e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800293a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	2300      	movs	r3, #0
 8002944:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fb17 	bl	8000f78 <HAL_GetTick>
 800294a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	e009      	b.n	8002964 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fb12 	bl	8000f78 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0ac      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
 8002964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002968:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002976:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002984:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002992:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0xf8a>
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x10a4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e027      	b.n	80029fe <HAL_RCC_OscConfig+0xfda>
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_RCC_OscConfig+0x10a4>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a10:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	fa92 f1a2 	rbit	r1, r2
 8002a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a1e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a28:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d182      	bne.n	8002950 <HAL_RCC_OscConfig+0xf2c>
 8002a4a:	e037      	b.n	8002abc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e02e      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_OscConfig+0x10a4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x10a4>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a74:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d117      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a8c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b09e      	sub	sp, #120	; 0x78
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e162      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b90      	ldr	r3, [pc, #576]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	498b      	ldr	r1, [pc, #556]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e14a      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	497f      	ldr	r1, [pc, #508]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80dc 	beq.w	8002cf8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d13c      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xf6>
 8002b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xa6>
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	e00f      	b.n	8002b92 <HAL_RCC_ClockConfig+0xc6>
 8002b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b84:	663b      	str	r3, [r7, #96]	; 0x60
 8002b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b96:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b9a:	fa92 f2a2 	rbit	r2, r2
 8002b9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba2:	fab2 f282 	clz	r2, r2
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	f042 0220 	orr.w	r2, r2, #32
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f002 021f 	and.w	r2, r2, #31
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d17b      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0f3      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d13c      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x178>
 8002bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x128>
 8002bee:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_ClockConfig+0x148>
 8002bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
 8002c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c18:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c1c:	fa92 f2a2 	rbit	r2, r2
 8002c20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f042 0220 	orr.w	r2, r2, #32
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f002 021f 	and.w	r2, r2, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d13a      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b2      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
 8002c44:	2302      	movs	r3, #2
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1a0>
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e00d      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1bc>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
 8002c78:	2302      	movs	r3, #2
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2202      	movs	r2, #2
 8002c8a:	61ba      	str	r2, [r7, #24]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	fa92 f2a2 	rbit	r2, r2
 8002c92:	617a      	str	r2, [r7, #20]
  return result;
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0220 	orr.w	r2, r2, #32
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e079      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	491a      	ldr	r1, [pc, #104]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f956 	bl	8000f78 <HAL_GetTick>
 8002ccc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe f952 	bl	8000f78 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e061      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d214      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4906      	ldr	r1, [pc, #24]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <HAL_RCC_ClockConfig+0x25c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e040      	b.n	8002daa <HAL_RCC_ClockConfig+0x2de>
 8002d28:	40022000 	.word	0x40022000
 8002d2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	491a      	ldr	r1, [pc, #104]	; (8002db4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4912      	ldr	r1, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d6e:	f000 f829 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d72:	4601      	mov	r1, r0
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	22f0      	movs	r2, #240	; 0xf0
 8002d7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	fa92 f2a2 	rbit	r2, r2
 8002d86:	60fa      	str	r2, [r7, #12]
  return result;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	40d3      	lsrs	r3, r2
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x2ec>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <HAL_RCC_ClockConfig+0x2f0>)
 8002d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_RCC_ClockConfig+0x2f4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f8a4 	bl	8000ef0 <HAL_InitTick>
  
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3778      	adds	r7, #120	; 0x78
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08004614 	.word	0x08004614
 8002dbc:	2000006c 	.word	0x2000006c
 8002dc0:	20000070 	.word	0x20000070

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x30>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x36>
 8002df2:	e03f      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002df6:	623b      	str	r3, [r7, #32]
      break;
 8002df8:	e03f      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	fa92 f2a2 	rbit	r2, r2
 8002e0c:	607a      	str	r2, [r7, #4]
  return result;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	40d3      	lsrs	r3, r2
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	220f      	movs	r2, #15
 8002e28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	60fa      	str	r2, [r7, #12]
  return result;
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	40d3      	lsrs	r3, r2
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	e007      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	623b      	str	r3, [r7, #32]
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e76:	623b      	str	r3, [r7, #32]
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	372c      	adds	r7, #44	; 0x2c
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	007a1200 	.word	0x007a1200
 8002e90:	0800462c 	.word	0x0800462c
 8002e94:	0800463c 	.word	0x0800463c

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	2000006c 	.word	0x2000006c

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eb6:	f7ff ffef 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ec8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	fa92 f2a2 	rbit	r2, r2
 8002ed0:	603a      	str	r2, [r7, #0]
  return result;
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	40d3      	lsrs	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08004624 	.word	0x08004624

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002efa:	f7ff ffcd 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002efe:	4601      	mov	r1, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	603a      	str	r2, [r7, #0]
  return result;
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	40d3      	lsrs	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08004624 	.word	0x08004624

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b092      	sub	sp, #72	; 0x48
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80d4 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5c:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b48      	ldr	r3, [pc, #288]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a41      	ldr	r2, [pc, #260]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd ffeb 	bl	8000f78 <HAL_GetTick>
 8002fa2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fd ffe7 	bl	8000f78 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1d6      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8084 	beq.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d07c      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	461a      	mov	r2, r3
 800300e:	2301      	movs	r3, #1
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04b      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fd ff97 	bl	8000f78 <HAL_GetTick>
 800304a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fd ff93 	bl	8000f78 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e180      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	61fb      	str	r3, [r7, #28]
  return result;
 800307c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d108      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003092:	4b01      	ldr	r3, [pc, #4]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	e00d      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	10908100 	.word	0x10908100
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	4b9a      	ldr	r3, [pc, #616]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2202      	movs	r2, #2
 80030b6:	613a      	str	r2, [r7, #16]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	60fa      	str	r2, [r7, #12]
  return result;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0b7      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030de:	4b8f      	ldr	r3, [pc, #572]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	498c      	ldr	r1, [pc, #560]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a87      	ldr	r2, [pc, #540]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003110:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f023 0203 	bic.w	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	497f      	ldr	r1, [pc, #508]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312e:	4b7b      	ldr	r3, [pc, #492]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4978      	ldr	r1, [pc, #480]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314c:	4b73      	ldr	r3, [pc, #460]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	4970      	ldr	r1, [pc, #448]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316a:	4b6c      	ldr	r3, [pc, #432]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f023 0210 	bic.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4969      	ldr	r1, [pc, #420]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	4961      	ldr	r1, [pc, #388]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a6:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f023 0220 	bic.w	r2, r3, #32
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	495a      	ldr	r1, [pc, #360]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	4952      	ldr	r1, [pc, #328]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e2:	4b4e      	ldr	r3, [pc, #312]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	494b      	ldr	r1, [pc, #300]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4943      	ldr	r1, [pc, #268]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	493c      	ldr	r1, [pc, #240]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800323c:	4b37      	ldr	r3, [pc, #220]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	4934      	ldr	r1, [pc, #208]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	491e      	ldr	r1, [pc, #120]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	490f      	ldr	r1, [pc, #60]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800330e:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	4913      	ldr	r1, [pc, #76]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003324:	4313      	orrs	r3, r2
 8003326:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	490b      	ldr	r1, [pc, #44]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003342:	4313      	orrs	r3, r2
 8003344:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003360:	4313      	orrs	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3748      	adds	r7, #72	; 0x48
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e040      	b.n	8003408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fc54 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fbbc 	bl	8003b30 <UART_SetConfig>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fd84 	bl	8003ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe0b 	bl	800401c <UART_CheckIdleState>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003424:	2b20      	cmp	r3, #32
 8003426:	d178      	bne.n	800351a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Transmit+0x24>
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e071      	b.n	800351c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2221      	movs	r2, #33	; 0x21
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003446:	f7fd fd97 	bl	8000f78 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d108      	bne.n	8003478 <HAL_UART_Transmit+0x68>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003480:	e030      	b.n	80034e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fe6d 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e03c      	b.n	800351c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	b292      	uxth	r2, r2
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3302      	adds	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e008      	b.n	80034d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b292      	uxth	r2, r2
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1c8      	bne.n	8003482 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fe36 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e005      	b.n	800351c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	; 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800354a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800354e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003552:	4013      	ands	r3, r2
 8003554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d115      	bne.n	800358c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00f      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 82ab 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      }
      return;
 800358a:	e2a5      	b.n	8003ad8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800358c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8117 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_UART_IRQHandler+0x298>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 810a 	beq.w	80037c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d011      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2202      	movs	r2, #2
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2204      	movs	r2, #4
 800362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2208      	movs	r2, #8
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8211 	beq.w	8003adc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04f      	beq.n	80037a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fd97 	bl	800423a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d141      	bne.n	800379e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1d9      	bne.n	800371a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_UART_IRQHandler+0x29c>)
 8003774:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fd76 	bl	800126c <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e00f      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9b4 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00b      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9b0 	bl	8003b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e007      	b.n	80037b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9ac 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80037b4:	e192      	b.n	8003adc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e190      	b.n	8003adc <HAL_UART_IRQHandler+0x5b8>
 80037ba:	bf00      	nop
 80037bc:	04000120 	.word	0x04000120
 80037c0:	08004303 	.word	0x08004303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 814b 	bne.w	8003a64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8144 	beq.w	8003a64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 813d 	beq.w	8003a64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	f040 80b5 	bne.w	800396c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8164 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800381e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003822:	429a      	cmp	r2, r3
 8003824:	f080 815c 	bcs.w	8003ae0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b20      	cmp	r3, #32
 800383a:	f000 8086 	beq.w	800394a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800386c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1da      	bne.n	800383e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e1      	bne.n	8003888 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3308      	adds	r3, #8
 80038e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e3      	bne.n	80038c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800392c:	65bb      	str	r3, [r7, #88]	; 0x58
 800392e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e4      	bne.n	800390a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fc58 	bl	80011fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800395c:	b29b      	uxth	r3, r3
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	b29b      	uxth	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8d7 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800396a:	e0b9      	b.n	8003ae0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003978:	b29b      	uxth	r3, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80ab 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800398e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80a6 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
 80039bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	623b      	str	r3, [r7, #32]
   return(result);
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f2:	633a      	str	r2, [r7, #48]	; 0x30
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e4      	bne.n	8003a1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f85b 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a62:	e03f      	b.n	8003ae4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <HAL_UART_IRQHandler+0x56a>
 8003a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fc7b 	bl	8004382 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a8c:	e02d      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01c      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
    }
    return;
 8003ab6:	e017      	b.n	8003ae8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <HAL_UART_IRQHandler+0x5c6>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fc2c 	bl	800432e <UART_EndTransmit_IT>
    return;
 8003ad6:	e008      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ad8:	bf00      	nop
 8003ada:	e006      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8003adc:	bf00      	nop
 8003ade:	e004      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ae8:	bf00      	nop
  }

}
 8003aea:	37e8      	adds	r7, #232	; 0xe8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b92      	ldr	r3, [pc, #584]	; (8003da4 <UART_SetConfig+0x274>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	6979      	ldr	r1, [r7, #20]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <UART_SetConfig+0x278>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d120      	bne.n	8003bee <UART_SetConfig+0xbe>
 8003bac:	4b7f      	ldr	r3, [pc, #508]	; (8003dac <UART_SetConfig+0x27c>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d817      	bhi.n	8003be8 <UART_SetConfig+0xb8>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0x90>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003bdd 	.word	0x08003bdd
 8003bc8:	08003be3 	.word	0x08003be3
 8003bcc:	08003bd7 	.word	0x08003bd7
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e0b5      	b.n	8003d42 <UART_SetConfig+0x212>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e0b2      	b.n	8003d42 <UART_SetConfig+0x212>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0af      	b.n	8003d42 <UART_SetConfig+0x212>
 8003be2:	2308      	movs	r3, #8
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0ac      	b.n	8003d42 <UART_SetConfig+0x212>
 8003be8:	2310      	movs	r3, #16
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0a9      	b.n	8003d42 <UART_SetConfig+0x212>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	; (8003db0 <UART_SetConfig+0x280>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d124      	bne.n	8003c42 <UART_SetConfig+0x112>
 8003bf8:	4b6c      	ldr	r3, [pc, #432]	; (8003dac <UART_SetConfig+0x27c>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c04:	d011      	beq.n	8003c2a <UART_SetConfig+0xfa>
 8003c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0a:	d817      	bhi.n	8003c3c <UART_SetConfig+0x10c>
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d011      	beq.n	8003c36 <UART_SetConfig+0x106>
 8003c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c16:	d811      	bhi.n	8003c3c <UART_SetConfig+0x10c>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <UART_SetConfig+0xf4>
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d006      	beq.n	8003c30 <UART_SetConfig+0x100>
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x10c>
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e08b      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e088      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c30:	2304      	movs	r3, #4
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e085      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c36:	2308      	movs	r3, #8
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e082      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e07f      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <UART_SetConfig+0x284>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d124      	bne.n	8003c96 <UART_SetConfig+0x166>
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <UART_SetConfig+0x27c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c58:	d011      	beq.n	8003c7e <UART_SetConfig+0x14e>
 8003c5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c5e:	d817      	bhi.n	8003c90 <UART_SetConfig+0x160>
 8003c60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c64:	d011      	beq.n	8003c8a <UART_SetConfig+0x15a>
 8003c66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c6a:	d811      	bhi.n	8003c90 <UART_SetConfig+0x160>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x148>
 8003c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c74:	d006      	beq.n	8003c84 <UART_SetConfig+0x154>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x160>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e061      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e05e      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e05b      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e058      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e055      	b.n	8003d42 <UART_SetConfig+0x212>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a47      	ldr	r2, [pc, #284]	; (8003db8 <UART_SetConfig+0x288>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d124      	bne.n	8003cea <UART_SetConfig+0x1ba>
 8003ca0:	4b42      	ldr	r3, [pc, #264]	; (8003dac <UART_SetConfig+0x27c>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ca8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cac:	d011      	beq.n	8003cd2 <UART_SetConfig+0x1a2>
 8003cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cb2:	d817      	bhi.n	8003ce4 <UART_SetConfig+0x1b4>
 8003cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb8:	d011      	beq.n	8003cde <UART_SetConfig+0x1ae>
 8003cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cbe:	d811      	bhi.n	8003ce4 <UART_SetConfig+0x1b4>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x19c>
 8003cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc8:	d006      	beq.n	8003cd8 <UART_SetConfig+0x1a8>
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x1b4>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e037      	b.n	8003d42 <UART_SetConfig+0x212>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e034      	b.n	8003d42 <UART_SetConfig+0x212>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e031      	b.n	8003d42 <UART_SetConfig+0x212>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e02e      	b.n	8003d42 <UART_SetConfig+0x212>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e02b      	b.n	8003d42 <UART_SetConfig+0x212>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a33      	ldr	r2, [pc, #204]	; (8003dbc <UART_SetConfig+0x28c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d124      	bne.n	8003d3e <UART_SetConfig+0x20e>
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <UART_SetConfig+0x27c>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d00:	d011      	beq.n	8003d26 <UART_SetConfig+0x1f6>
 8003d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d06:	d817      	bhi.n	8003d38 <UART_SetConfig+0x208>
 8003d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d0c:	d011      	beq.n	8003d32 <UART_SetConfig+0x202>
 8003d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d12:	d811      	bhi.n	8003d38 <UART_SetConfig+0x208>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <UART_SetConfig+0x1f0>
 8003d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1c:	d006      	beq.n	8003d2c <UART_SetConfig+0x1fc>
 8003d1e:	e00b      	b.n	8003d38 <UART_SetConfig+0x208>
 8003d20:	2300      	movs	r3, #0
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e00d      	b.n	8003d42 <UART_SetConfig+0x212>
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e00a      	b.n	8003d42 <UART_SetConfig+0x212>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e007      	b.n	8003d42 <UART_SetConfig+0x212>
 8003d32:	2308      	movs	r3, #8
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e004      	b.n	8003d42 <UART_SetConfig+0x212>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e001      	b.n	8003d42 <UART_SetConfig+0x212>
 8003d3e:	2310      	movs	r3, #16
 8003d40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4a:	d16b      	bne.n	8003e24 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d838      	bhi.n	8003dc4 <UART_SetConfig+0x294>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x228>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	08003d93 	.word	0x08003d93
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003d9b 	.word	0x08003d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d7c:	f7ff f898 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003d80:	61b8      	str	r0, [r7, #24]
        break;
 8003d82:	e024      	b.n	8003dce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d84:	f7ff f8b6 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003d88:	61b8      	str	r0, [r7, #24]
        break;
 8003d8a:	e020      	b.n	8003dce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <UART_SetConfig+0x290>)
 8003d8e:	61bb      	str	r3, [r7, #24]
        break;
 8003d90:	e01d      	b.n	8003dce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d92:	f7ff f817 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003d96:	61b8      	str	r0, [r7, #24]
        break;
 8003d98:	e019      	b.n	8003dce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9e:	61bb      	str	r3, [r7, #24]
        break;
 8003da0:	e015      	b.n	8003dce <UART_SetConfig+0x29e>
 8003da2:	bf00      	nop
 8003da4:	efff69f3 	.word	0xefff69f3
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40004400 	.word	0x40004400
 8003db4:	40004800 	.word	0x40004800
 8003db8:	40004c00 	.word	0x40004c00
 8003dbc:	40005000 	.word	0x40005000
 8003dc0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77bb      	strb	r3, [r7, #30]
        break;
 8003dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d073      	beq.n	8003ebc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	005a      	lsls	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d916      	bls.n	8003e1e <UART_SetConfig+0x2ee>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d212      	bcs.n	8003e1e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	89fa      	ldrh	r2, [r7, #14]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	e04e      	b.n	8003ebc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77bb      	strb	r3, [r7, #30]
 8003e22:	e04b      	b.n	8003ebc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e24:	7ffb      	ldrb	r3, [r7, #31]
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d827      	bhi.n	8003e7a <UART_SetConfig+0x34a>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0x300>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e6b 	.word	0x08003e6b
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e7b 	.word	0x08003e7b
 8003e4c:	08003e7b 	.word	0x08003e7b
 8003e50:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff f82c 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e013      	b.n	8003e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7ff f84a 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003e60:	61b8      	str	r0, [r7, #24]
        break;
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <UART_SetConfig+0x3a4>)
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e00c      	b.n	8003e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe ffab 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003e6e:	61b8      	str	r0, [r7, #24]
        break;
 8003e70:	e008      	b.n	8003e84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	61bb      	str	r3, [r7, #24]
        break;
 8003e78:	e004      	b.n	8003e84 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	77bb      	strb	r3, [r7, #30]
        break;
 8003e82:	bf00      	nop
    }

    if (pclk != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085a      	lsrs	r2, r3, #1
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	441a      	add	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	d909      	bls.n	8003eb8 <UART_SetConfig+0x388>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d205      	bcs.n	8003eb8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	e001      	b.n	8003ebc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	007a1200 	.word	0x007a1200

08003ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01a      	beq.n	8003fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d10a      	bne.n	8003fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b098      	sub	sp, #96	; 0x60
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800402c:	f7fc ffa4 	bl	8000f78 <HAL_GetTick>
 8004030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d12e      	bne.n	800409e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f88c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	653b      	str	r3, [r7, #80]	; 0x50
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
 800407a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e6      	bne.n	800405a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e062      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d149      	bne.n	8004140 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f856 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	623b      	str	r3, [r7, #32]
   return(result);
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
 80040e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	60fb      	str	r3, [r7, #12]
   return(result);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	617b      	str	r3, [r7, #20]
   return(result);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e011      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3758      	adds	r7, #88	; 0x58
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e049      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d045      	beq.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fc fef7 	bl	8000f78 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <UART_WaitOnFlagUntilTimeout+0x30>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e048      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d031      	beq.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d110      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f838 	bl	800423a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2208      	movs	r2, #8
 80041ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e029      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ec:	d111      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f81e 	bl	800423a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e00f      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	429a      	cmp	r2, r3
 800422e:	d0a6      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423a:	b480      	push	{r7}
 800423c:	b095      	sub	sp, #84	; 0x54
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	61fb      	str	r3, [r7, #28]
   return(result);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004294:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d118      	bne.n	80042e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6979      	ldr	r1, [r7, #20]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	613b      	str	r3, [r7, #16]
   return(result);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e6      	bne.n	80042b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042f6:	bf00      	nop
 80042f8:	3754      	adds	r7, #84	; 0x54
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff fbef 	bl	8003b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	60bb      	str	r3, [r7, #8]
   return(result);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	613b      	str	r3, [r7, #16]
   return(result);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e6      	bne.n	8004336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fbbb 	bl	8003af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437a:	bf00      	nop
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e016      	b.n	80043d6 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fc fccf 	bl	8000d4c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ba:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	ea42 0103 	orr.w	r1, r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_TIM_SetPrescaler>:
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_TIM_SetAutoReload>:
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_TIM_SetRepetitionCounter>:
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_TIM_GenerateEvent_UPDATE>:
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <LL_TIM_Init+0x110>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <LL_TIM_Init+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d00f      	beq.n	80044b4 <LL_TIM_Init+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <LL_TIM_Init+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <LL_TIM_Init+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3b      	ldr	r2, [pc, #236]	; (800458c <LL_TIM_Init+0x118>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <LL_TIM_Init+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <LL_TIM_Init+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <LL_TIM_Init+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a39      	ldr	r2, [pc, #228]	; (8004594 <LL_TIM_Init+0x120>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d106      	bne.n	80044c2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <LL_TIM_Init+0x110>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <LL_TIM_Init+0x96>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d01b      	beq.n	800450a <LL_TIM_Init+0x96>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <LL_TIM_Init+0x114>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d017      	beq.n	800450a <LL_TIM_Init+0x96>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	; (800458c <LL_TIM_Init+0x118>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <LL_TIM_Init+0x96>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <LL_TIM_Init+0x11c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00f      	beq.n	800450a <LL_TIM_Init+0x96>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <LL_TIM_Init+0x124>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <LL_TIM_Init+0x96>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <LL_TIM_Init+0x128>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <LL_TIM_Init+0x96>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <LL_TIM_Init+0x12c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <LL_TIM_Init+0x96>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	; (8004594 <LL_TIM_Init+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d106      	bne.n	8004518 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff78 	bl	800441a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff64 	bl	80043fe <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a12      	ldr	r2, [pc, #72]	; (8004584 <LL_TIM_Init+0x110>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <LL_TIM_Init+0xf2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <LL_TIM_Init+0x11c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00f      	beq.n	8004566 <LL_TIM_Init+0xf2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <LL_TIM_Init+0x124>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <LL_TIM_Init+0xf2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <LL_TIM_Init+0x128>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <LL_TIM_Init+0xf2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <LL_TIM_Init+0x12c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <LL_TIM_Init+0xf2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <LL_TIM_Init+0x120>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d105      	bne.n	8004572 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff62 	bl	8004436 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ff6d 	bl	8004452 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40013400 	.word	0x40013400
 8004594:	40015000 	.word	0x40015000
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <memset>:
 80045a4:	4402      	add	r2, r0
 80045a6:	4603      	mov	r3, r0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	f803 1b01 	strb.w	r1, [r3], #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4d0d      	ldr	r5, [pc, #52]	; (80045ec <__libc_init_array+0x38>)
 80045b8:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	2600      	movs	r6, #0
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	4d0b      	ldr	r5, [pc, #44]	; (80045f4 <__libc_init_array+0x40>)
 80045c6:	4c0c      	ldr	r4, [pc, #48]	; (80045f8 <__libc_init_array+0x44>)
 80045c8:	f000 f818 	bl	80045fc <_init>
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	2600      	movs	r6, #0
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	0800464c 	.word	0x0800464c
 80045f0:	0800464c 	.word	0x0800464c
 80045f4:	0800464c 	.word	0x0800464c
 80045f8:	08004650 	.word	0x08004650

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
