
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800451c  0800451c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800451c  0800451c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004524  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000001c0  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fcf2  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002270  00000000  00000000  0002fd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa6  00000000  00000000  00032d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e13  00000000  00000000  00033836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011a53  00000000  00000000  00054649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca545  00000000  00000000  0006609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000038e8  00000000  00000000  001305e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00133ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080044cc 	.word	0x080044cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080044cc 	.word	0x080044cc

080001d4 <bitmask_set>:
GPIO_PinState state;

/**
 * sets specific button pressed
 */
void bitmask_set(uint32_t bit_position){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	bit |= (1 << bit_position);
 80001dc:	2201      	movs	r2, #1
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	fa02 f303 	lsl.w	r3, r2, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <bitmask_set+0x28>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4313      	orrs	r3, r2
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <bitmask_set+0x28>)
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	200001c8 	.word	0x200001c8

08000200 <bitmask_clear>:

/**
 * clears specific button pressed
 */
void bitmask_clear(uint32_t bit_position){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	 bit &= ~(1 << bit_position);
 8000208:	2201      	movs	r2, #1
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	43db      	mvns	r3, r3
 8000212:	461a      	mov	r2, r3
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <bitmask_clear+0x2c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4013      	ands	r3, r2
 800021a:	4a04      	ldr	r2, [pc, #16]	; (800022c <bitmask_clear+0x2c>)
 800021c:	6013      	str	r3, [r2, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200001c8 	.word	0x200001c8

08000230 <bitmask_check>:

/**
 * checks if specific button is pressed
 */
uint8_t bitmask_check(uint32_t bit_position){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if(bit & (1 << bit_position)){
 8000238:	2201      	movs	r2, #1
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	fa02 f303 	lsl.w	r3, r2, r3
 8000240:	461a      	mov	r2, r3
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <bitmask_check+0x30>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4013      	ands	r3, r2
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <bitmask_check+0x20>
		return 1;
 800024c:	2301      	movs	r3, #1
 800024e:	e000      	b.n	8000252 <bitmask_check+0x22>
	}else{
		return 0;
 8000250:	2300      	movs	r3, #0
	}
}
 8000252:	4618      	mov	r0, r3
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	200001c8 	.word	0x200001c8

08000264 <crc_append>:

/**
 * appends 3 zeros to end of data to prepare for division
 */
uint64_t crc_append(uint64_t crc_data){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	e9c7 0100 	strd	r0, r1, [r7]
	return crc_data << 3;
 800026e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000272:	f04f 0200 	mov.w	r2, #0
 8000276:	f04f 0300 	mov.w	r3, #0
 800027a:	00cb      	lsls	r3, r1, #3
 800027c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000280:	00c2      	lsls	r2, r0, #3
}
 8000282:	4610      	mov	r0, r2
 8000284:	4619      	mov	r1, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <crc_xor>:

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 8000290:	b4b0      	push	{r4, r5, r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 800029a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800029e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 80002a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80002a6:	f000 0208 	and.w	r2, r0, #8
 80002aa:	2300      	movs	r3, #0
 80002ac:	4313      	orrs	r3, r2
 80002ae:	d00a      	beq.n	80002c6 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <crc_xor+0x48>)
 80002b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80002ba:	ea80 0402 	eor.w	r4, r0, r2
 80002be:	ea81 0503 	eor.w	r5, r1, r3
 80002c2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 80002c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80002ca:	4610      	mov	r0, r2
 80002cc:	4619      	mov	r1, r3
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bcb0      	pop	{r4, r5, r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000

080002dc <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	b08f      	sub	sp, #60	; 0x3c
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80002e8:	617a      	str	r2, [r7, #20]
 80002ea:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 80002f0:	693b      	ldr	r3, [r7, #16]
 80002f2:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 80002f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80002f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 80002fc:	f04f 0200 	mov.w	r2, #0
 8000300:	f04f 0300 	mov.w	r3, #0
 8000304:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000308:	e057      	b.n	80003ba <crc_division+0xde>
		bit_shift--;
 800030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800030c:	3b01      	subs	r3, #1
 800030e:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 8000310:	f04f 0200 	mov.w	r2, #0
 8000314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000318:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800031a:	f1c0 0120 	rsb	r1, r0, #32
 800031e:	f1b0 0420 	subs.w	r4, r0, #32
 8000322:	fa22 fa00 	lsr.w	sl, r2, r0
 8000326:	fa03 f101 	lsl.w	r1, r3, r1
 800032a:	ea4a 0a01 	orr.w	sl, sl, r1
 800032e:	d403      	bmi.n	8000338 <crc_division+0x5c>
 8000330:	fa43 f404 	asr.w	r4, r3, r4
 8000334:	ea4a 0a04 	orr.w	sl, sl, r4
 8000338:	fa43 fb00 	asr.w	fp, r3, r0
 800033c:	4650      	mov	r0, sl
 800033e:	4659      	mov	r1, fp
 8000340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000344:	ea02 0500 	and.w	r5, r2, r0
 8000348:	ea03 0601 	and.w	r6, r3, r1
 800034c:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 8000350:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000356:	f1c0 0420 	rsb	r4, r0, #32
 800035a:	f1a0 0120 	sub.w	r1, r0, #32
 800035e:	fa22 f800 	lsr.w	r8, r2, r0
 8000362:	fa03 f404 	lsl.w	r4, r3, r4
 8000366:	ea48 0804 	orr.w	r8, r8, r4
 800036a:	fa23 f101 	lsr.w	r1, r3, r1
 800036e:	ea48 0801 	orr.w	r8, r8, r1
 8000372:	fa23 f900 	lsr.w	r9, r3, r0
 8000376:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 800037a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800037e:	1891      	adds	r1, r2, r2
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	415b      	adcs	r3, r3
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800038a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 800038e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000396:	1884      	adds	r4, r0, r2
 8000398:	603c      	str	r4, [r7, #0]
 800039a:	eb41 0303 	adc.w	r3, r1, r3
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80003a4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 80003a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80003ac:	f7ff ff70 	bl	8000290 <crc_xor>
 80003b0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 80003b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003b6:	3301      	adds	r3, #1
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 80003ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003bc:	2b00      	cmp	r3, #0
 80003be:	dca4      	bgt.n	800030a <crc_division+0x2e>
	}
	return remain;
 80003c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 80003c4:	4610      	mov	r0, r2
 80003c6:	4619      	mov	r1, r3
 80003c8:	373c      	adds	r7, #60	; 0x3c
 80003ca:	46bd      	mov	sp, r7
 80003cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003d0 <crc_encode>:

/**
 * initializes values for division and carries out the encoding of each crc value
 */
void crc_encode(){
 80003d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003d4:	b08d      	sub	sp, #52	; 0x34
 80003d6:	af02      	add	r7, sp, #8
	int shift = 60;
 80003d8:	233c      	movs	r3, #60	; 0x3c
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
	int position = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
	uint64_t appended_data = crc_append(data);
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <crc_encode+0xa8>)
 80003e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e6:	4610      	mov	r0, r2
 80003e8:	4619      	mov	r1, r3
 80003ea:	f7ff ff3b 	bl	8000264 <crc_append>
 80003ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 80003f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80003f6:	f04f 0a00 	mov.w	sl, #0
 80003fa:	f003 4b70 	and.w	fp, r3, #4026531840	; 0xf0000000
 80003fe:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	dividend = dividend >> shift;
 8000402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000408:	f1c1 0620 	rsb	r6, r1, #32
 800040c:	f1a1 0020 	sub.w	r0, r1, #32
 8000410:	fa22 f401 	lsr.w	r4, r2, r1
 8000414:	fa03 f606 	lsl.w	r6, r3, r6
 8000418:	4334      	orrs	r4, r6
 800041a:	fa23 f000 	lsr.w	r0, r3, r0
 800041e:	4304      	orrs	r4, r0
 8000420:	fa23 f501 	lsr.w	r5, r3, r1
 8000424:	e9c7 4504 	strd	r4, r5, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 8000428:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800042c:	f7ff ff30 	bl	8000290 <crc_xor>
 8000430:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 8000434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000438:	e9cd 2300 	strd	r2, r3, [sp]
 800043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043e:	6a3a      	ldr	r2, [r7, #32]
 8000440:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000444:	f7ff ff4a 	bl	80002dc <crc_division>
 8000448:	e9c7 0100 	strd	r0, r1, [r7]
	TxData[0] = data;
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <crc_encode+0xa8>)
 800044e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000452:	490a      	ldr	r1, [pc, #40]	; (800047c <crc_encode+0xac>)
 8000454:	e9c1 2300 	strd	r2, r3, [r1]
	TxData[1] = appended_data + remain;
 8000458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800045c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000460:	eb10 0802 	adds.w	r8, r0, r2
 8000464:	eb41 0903 	adc.w	r9, r1, r3
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <crc_encode+0xac>)
 800046a:	e9c3 8902 	strd	r8, r9, [r3, #8]

}
 800046e:	bf00      	nop
 8000470:	372c      	adds	r7, #44	; 0x2c
 8000472:	46bd      	mov	sp, r7
 8000474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000478:	200001d0 	.word	0x200001d0
 800047c:	200001b0 	.word	0x200001b0

08000480 <sendData>:

/**
 * sends data with crc to receiver every 10ms
 */
void sendData(){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	crc_encode();
 8000484:	f7ff ffa4 	bl	80003d0 <crc_encode>

	HAL_Delay(10);
 8000488:	200a      	movs	r0, #10
 800048a:	f000 fca5 	bl	8000dd8 <HAL_Delay>
	refresh = 0;
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <sendData+0x2c>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	HAL_WWDG_Refresh(&hwwdg);		//transmitting timeout
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <sendData+0x30>)
 8000496:	f003 ffdc 	bl	8004452 <HAL_WWDG_Refresh>
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 800049a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049e:	2218      	movs	r2, #24
 80004a0:	4904      	ldr	r1, [pc, #16]	; (80004b4 <sendData+0x34>)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <sendData+0x38>)
 80004a4:	f002 ffee 	bl	8003484 <HAL_UART_Transmit>
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000008 	.word	0x20000008
 80004b0:	20000198 	.word	0x20000198
 80004b4:	200001b0 	.word	0x200001b0
 80004b8:	20000088 	.word	0x20000088

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fc24 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f874 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f970 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f91e 	bl	800070c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f8ec 	bl	80006ac <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80004d4:	f000 f8c4 	bl	8000660 <MX_TIM16_Init>
  MX_WWDG_Init();
 80004d8:	f000 f948 	bl	800076c <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  sendData();
 80004dc:	f7ff ffd0 	bl	8000480 <sendData>
	  	  if(bitmask_check(0)) //red
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff fea5 	bl	8000230 <bitmask_check>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d012      	beq.n	8000512 <main+0x56>
	  	  {
	  		  data = 1;
 80004ec:	492f      	ldr	r1, [pc, #188]	; (80005ac <main+0xf0>)
 80004ee:	f04f 0201 	mov.w	r2, #1
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c1 2300 	strd	r2, r3, [r1]
	  		  sendData();
 80004fa:	f7ff ffc1 	bl	8000480 <sendData>
	  		  data = 0;
 80004fe:	492b      	ldr	r1, [pc, #172]	; (80005ac <main+0xf0>)
 8000500:	f04f 0200 	mov.w	r2, #0
 8000504:	f04f 0300 	mov.w	r3, #0
 8000508:	e9c1 2300 	strd	r2, r3, [r1]
	  		  bitmask_clear(0);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fe77 	bl	8000200 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(1)) //green
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe8c 	bl	8000230 <bitmask_check>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d012      	beq.n	8000544 <main+0x88>
	  	  {
	  		  data = 2;
 800051e:	4923      	ldr	r1, [pc, #140]	; (80005ac <main+0xf0>)
 8000520:	f04f 0202 	mov.w	r2, #2
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e9c1 2300 	strd	r2, r3, [r1]
	  		  sendData();
 800052c:	f7ff ffa8 	bl	8000480 <sendData>
	  		  data = 0;
 8000530:	491e      	ldr	r1, [pc, #120]	; (80005ac <main+0xf0>)
 8000532:	f04f 0200 	mov.w	r2, #0
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	e9c1 2300 	strd	r2, r3, [r1]
	  		  bitmask_clear(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe5e 	bl	8000200 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(2)) //yellow
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff fe73 	bl	8000230 <bitmask_check>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d012      	beq.n	8000576 <main+0xba>
	  	  {
	  		  data = 3;
 8000550:	4916      	ldr	r1, [pc, #88]	; (80005ac <main+0xf0>)
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	f04f 0300 	mov.w	r3, #0
 800055a:	e9c1 2300 	strd	r2, r3, [r1]
	  		  sendData();
 800055e:	f7ff ff8f 	bl	8000480 <sendData>
	  		  data = 0;
 8000562:	4912      	ldr	r1, [pc, #72]	; (80005ac <main+0xf0>)
 8000564:	f04f 0200 	mov.w	r2, #0
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	e9c1 2300 	strd	r2, r3, [r1]
	  		  bitmask_clear(2);
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff fe45 	bl	8000200 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(3)) //blue
 8000576:	2003      	movs	r0, #3
 8000578:	f7ff fe5a 	bl	8000230 <bitmask_check>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0ac      	beq.n	80004dc <main+0x20>
	  	  {
			  data = 4;
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0xf0>)
 8000584:	f04f 0204 	mov.w	r2, #4
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	e9c1 2300 	strd	r2, r3, [r1]
			  sendData();
 8000590:	f7ff ff76 	bl	8000480 <sendData>
			  data = 0;
 8000594:	4905      	ldr	r1, [pc, #20]	; (80005ac <main+0xf0>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	e9c1 2300 	strd	r2, r3, [r1]
			  bitmask_clear(3);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f7ff fe2c 	bl	8000200 <bitmask_clear>
	  	  sendData();
 80005a8:	e798      	b.n	80004dc <main+0x20>
 80005aa:	bf00      	nop
 80005ac:	200001d0 	.word	0x200001d0

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0a6      	sub	sp, #152	; 0x98
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ba:	2228      	movs	r2, #40	; 0x28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ff57 	bl	8004472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2258      	movs	r2, #88	; 0x58
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 ff49 	bl	8004472 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 ff53 	bl	80014a4 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000604:	f000 f9f0 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ff92 	bl	800254c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800062e:	f000 f9db 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <SystemClock_Config+0xac>)
 8000634:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800063e:	2300      	movs	r3, #0
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f9b7 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000650:	f000 f9ca 	bl	80009e8 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3798      	adds	r7, #152	; 0x98
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	00800003 	.word	0x00800003

08000660 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <MX_TIM16_Init+0x48>)
 8000668:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 159;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_TIM16_Init+0x44>)
 800066c:	229f      	movs	r2, #159	; 0x9f
 800066e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800067c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_TIM16_Init+0x44>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_TIM16_Init+0x44>)
 8000692:	f002 fbaf 	bl	8002df4 <HAL_TIM_Base_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800069c:	f000 f9a4 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000003c 	.word	0x2000003c
 80006a8:	40014400 	.word	0x40014400

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART1_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x58>)
 80006f0:	f002 fe7a 	bl	80033e8 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f975 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000088 	.word	0x20000088
 8000708:	40013800 	.word	0x40013800

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART2_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000750:	f002 fe4a 	bl	80033e8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f945 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000110 	.word	0x20000110
 8000768:	40004400 	.word	0x40004400

0800076c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN WWDG_Init 1 */
	//counter = ((max_time * clk) / (4096 * prescalar)) + 64			= ((.015 * 8M) / (4096 * 4)) + 64 = 72
	//window = counter - ((min_time * clk) / (4096 * prescalar))		= 72 - ((0.005 * 8M) / (4096 * prescalar)) = 70
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_WWDG_Init+0x38>)
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MX_WWDG_Init+0x3c>)
 8000774:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_WWDG_Init+0x38>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_WWDG_Init+0x38>)
 8000780:	2246      	movs	r2, #70	; 0x46
 8000782:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_WWDG_Init+0x38>)
 8000786:	2248      	movs	r2, #72	; 0x48
 8000788:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_WWDG_Init+0x38>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_WWDG_Init+0x38>)
 8000792:	f003 fe3a 	bl	800440a <HAL_WWDG_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 800079c:	f000 f924 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000198 	.word	0x20000198
 80007a8:	40002c00 	.word	0x40002c00

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_GPIO_Init+0xcc>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_GPIO_Init+0xcc>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800080a:	230c      	movs	r3, #12
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f000 fc86 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000824:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0xd4>)
 800083c:	f000 fc78 	bl	8001130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2008      	movs	r0, #8
 8000846:	f000 fbc6 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800084a:	2008      	movs	r0, #8
 800084c:	f000 fbdf 	bl	800100e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2009      	movs	r0, #9
 8000856:	f000 fbbe 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800085a:	2009      	movs	r0, #9
 800085c:	f000 fbd7 	bl	800100e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f000 fbb6 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086a:	2028      	movs	r0, #40	; 0x28
 800086c:	f000 fbcf 	bl	800100e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800
 8000880:	48000400 	.word	0x48000400

08000884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);

  if (GPIO_Pin == GPIO_PIN_2){
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d10a      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x26>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000894:	2104      	movs	r1, #4
 8000896:	481f      	ldr	r0, [pc, #124]	; (8000914 <HAL_GPIO_EXTI_Callback+0x90>)
 8000898:	f000 fdd4 	bl	8001444 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008a2:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_1;	//red
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_3){
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	2b08      	cmp	r3, #8
 80008ae:	d10a      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0x42>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80008b0:	2108      	movs	r1, #8
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <HAL_GPIO_EXTI_Callback+0x90>)
 80008b4:	f000 fdc6 	bl	8001444 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008be:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_2;	//green
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_14){
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008cc:	d10b      	bne.n	80008e6 <HAL_GPIO_EXTI_Callback+0x62>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008d4:	f000 fdb6 	bl	8001444 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008de:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_3;	//yellow
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_15){
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008ec:	d10b      	bne.n	8000906 <HAL_GPIO_EXTI_Callback+0x82>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80008ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008f4:	f000 fda6 	bl	8001444 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008fe:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_4;	//blue
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 8000902:	2203      	movs	r2, #3
 8000904:	701a      	strb	r2, [r3, #0]
  }
  HAL_TIM_Base_Start_IT(&htim16);
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000908:	f002 facc 	bl	8002ea4 <HAL_TIM_Base_Start_IT>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	48000800 	.word	0x48000800
 8000918:	200001d8 	.word	0x200001d8
 800091c:	2000000c 	.word	0x2000000c
 8000920:	48000400 	.word	0x48000400
 8000924:	2000003c 	.word	0x2000003c

08000928 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	 UNUSED(htim);

	if(htim == &htim16){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d145      	bne.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == state && button == BUTTON_1){
 8000938:	2104      	movs	r1, #4
 800093a:	4827      	ldr	r0, [pc, #156]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800093c:	f000 fd82 	bl	8001444 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d106      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x32>
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x32>
			bitmask_set(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fc3d 	bl	80001d4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == state && button == BUTTON_2){
 800095a:	2108      	movs	r1, #8
 800095c:	481e      	ldr	r0, [pc, #120]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800095e:	f000 fd71 	bl	8001444 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d106      	bne.n	800097c <HAL_TIM_PeriodElapsedCallback+0x54>
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <HAL_TIM_PeriodElapsedCallback+0x54>
			bitmask_set(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fc2c 	bl	80001d4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == state && button == BUTTON_3){
 800097c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000982:	f000 fd5f 	bl	8001444 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d106      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d102      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x78>
			bitmask_set(2);
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff fc1a 	bl	80001d4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == state && button == BUTTON_4){
 80009a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80009a6:	f000 fd4d 	bl	8001444 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d106      	bne.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x9c>
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d102      	bne.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			bitmask_set(3);
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff fc08 	bl	80001d4 <bitmask_set>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009c6:	f002 fadd 	bl	8002f84 <HAL_TIM_Base_Stop_IT>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000003c 	.word	0x2000003c
 80009d8:	48000800 	.word	0x48000800
 80009dc:	200001d8 	.word	0x200001d8
 80009e0:	2000000c 	.word	0x2000000c
 80009e4:	48000400 	.word	0x48000400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_TIM_Base_MspInit+0x44>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d113      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2019      	movs	r0, #25
 8000a6c:	f000 fab3 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a70:	2019      	movs	r0, #25
 8000a72:	f000 facc 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40014400 	.word	0x40014400
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a36      	ldr	r2, [pc, #216]	; (8000b80 <HAL_UART_MspInit+0xf8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d130      	bne.n	8000b0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ada:	2330      	movs	r3, #48	; 0x30
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aea:	2307      	movs	r3, #7
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4824      	ldr	r0, [pc, #144]	; (8000b88 <HAL_UART_MspInit+0x100>)
 8000af6:	f000 fb1b 	bl	8001130 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2025      	movs	r0, #37	; 0x25
 8000b00:	f000 fa69 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b04:	2025      	movs	r0, #37	; 0x25
 8000b06:	f000 fa82 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0a:	e035      	b.n	8000b78 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_UART_MspInit+0x104>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d130      	bne.n	8000b78 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0xfc>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fae4 	bl	8001130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2026      	movs	r0, #38	; 0x26
 8000b6e:	f000 fa32 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b72:	2026      	movs	r0, #38	; 0x26
 8000b74:	f000 fa4b 	bl	800100e <HAL_NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000800 	.word	0x48000800
 8000b8c:	40004400 	.word	0x40004400

08000b90 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_WWDG_MspInit+0x38>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_WWDG_MspInit+0x3c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_WWDG_MspInit+0x3c>)
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_WWDG_MspInit+0x3c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40002c00 	.word	0x40002c00
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8bc 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f000 fc23 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c36:	2008      	movs	r0, #8
 8000c38:	f000 fc1c 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c46:	f002 f9cc 	bl	8002fe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000003c 	.word	0x2000003c

08000c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <USART1_IRQHandler+0x10>)
 8000c5a:	f002 fc9d 	bl	8003598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000088 	.word	0x20000088

08000c68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <USART2_IRQHandler+0x10>)
 8000c6e:	f002 fc93 	bl	8003598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000110 	.word	0x20000110

08000c7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c84:	f000 fbf6 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c8c:	f000 fbf2 	bl	8001474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 fbcd 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fbe7 	bl	80004bc <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cfc:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 8000d00:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d04:	200001e0 	.word	0x200001e0

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x28>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x28>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe64 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	20000018 	.word	0x20000018
 8000d94:	20000014 	.word	0x20000014

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000018 	.word	0x20000018
 8000dbc:	200001dc 	.word	0x200001dc

08000dc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200001dc 	.word	0x200001dc

08000dd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000018 	.word	0x20000018

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001050:	2b02      	cmp	r3, #2
 8001052:	d008      	beq.n	8001066 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e020      	b.n	80010a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 020e 	bic.w	r2, r2, #14
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d005      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2204      	movs	r2, #4
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e027      	b.n	8001126 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 020e 	bic.w	r2, r2, #14
 80010e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
    } 
  }
  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e160      	b.n	8001402 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8152 	beq.w	80013fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x40>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80ac 	beq.w	80013fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b5e      	ldr	r3, [pc, #376]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a5d      	ldr	r2, [pc, #372]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <HAL_GPIO_Init+0x2f0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012bc:	4a59      	ldr	r2, [pc, #356]	; (8001424 <HAL_GPIO_Init+0x2f4>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e6:	d025      	beq.n	8001334 <HAL_GPIO_Init+0x204>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_GPIO_Init+0x2f8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d01f      	beq.n	8001330 <HAL_GPIO_Init+0x200>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4e      	ldr	r2, [pc, #312]	; (800142c <HAL_GPIO_Init+0x2fc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d019      	beq.n	800132c <HAL_GPIO_Init+0x1fc>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4d      	ldr	r2, [pc, #308]	; (8001430 <HAL_GPIO_Init+0x300>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x1f8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4c      	ldr	r2, [pc, #304]	; (8001434 <HAL_GPIO_Init+0x304>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1f4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <HAL_GPIO_Init+0x308>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1f0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_GPIO_Init+0x30c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1ec>
 8001318:	2306      	movs	r3, #6
 800131a:	e00c      	b.n	8001336 <HAL_GPIO_Init+0x206>
 800131c:	2307      	movs	r3, #7
 800131e:	e00a      	b.n	8001336 <HAL_GPIO_Init+0x206>
 8001320:	2305      	movs	r3, #5
 8001322:	e008      	b.n	8001336 <HAL_GPIO_Init+0x206>
 8001324:	2304      	movs	r3, #4
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x206>
 8001328:	2303      	movs	r3, #3
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x206>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x206>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x206>
 8001334:	2300      	movs	r3, #0
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001346:	4937      	ldr	r1, [pc, #220]	; (8001424 <HAL_GPIO_Init+0x2f4>)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_GPIO_Init+0x310>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_GPIO_Init+0x310>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x310>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a2:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_GPIO_Init+0x310>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_GPIO_Init+0x310>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_GPIO_Init+0x310>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x310>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_GPIO_Init+0x310>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f47f ae97 	bne.w	8001140 <HAL_GPIO_Init+0x10>
  }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	48001000 	.word	0x48001000
 8001438:	48001400 	.word	0x48001400
 800143c:	48001800 	.word	0x48001800
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f9f6 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f001 b83a 	b.w	800253e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 816f 	beq.w	80017be <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014e0:	4bb5      	ldr	r3, [pc, #724]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d00c      	beq.n	8001506 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ec:	4bb2      	ldr	r3, [pc, #712]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d15c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x10e>
 80014f8:	4baf      	ldr	r3, [pc, #700]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d155      	bne.n	80015b2 <HAL_RCC_OscConfig+0x10e>
 8001506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800151a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	095b      	lsrs	r3, r3, #5
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d102      	bne.n	8001538 <HAL_RCC_OscConfig+0x94>
 8001532:	4ba1      	ldr	r3, [pc, #644]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	e015      	b.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001550:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001554:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001560:	4b95      	ldr	r3, [pc, #596]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001568:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800156c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001570:	fa92 f2a2 	rbit	r2, r2
 8001574:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001578:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800157c:	fab2 f282 	clz	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f042 0220 	orr.w	r2, r2, #32
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f002 021f 	and.w	r2, r2, #31
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8111 	beq.w	80017bc <HAL_RCC_OscConfig+0x318>
 800159a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 8108 	bne.w	80017bc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f000 bfc6 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12e>
 80015c4:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e036      	b.n	8001640 <HAL_RCC_OscConfig+0x19c>
 80015d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x158>
 80015e2:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a74      	ldr	r2, [pc, #464]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b72      	ldr	r3, [pc, #456]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a71      	ldr	r2, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e021      	b.n	8001640 <HAL_RCC_OscConfig+0x19c>
 80015fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001600:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x184>
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x19c>
 8001628:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a62      	ldr	r2, [pc, #392]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a5f      	ldr	r2, [pc, #380]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d059      	beq.n	8001704 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fbb6 	bl	8000dc0 <HAL_GetTick>
 8001654:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fbb1 	bl	8000dc0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d902      	bls.n	8001670 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	f000 bf67 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001674:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001684:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1fe>
 800169c:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x22a>
 80016a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80016d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80016da:	fa92 f2a2 	rbit	r2, r2
 80016de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80016e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016e6:	fab2 f282 	clz	r2, r2
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f002 021f 	and.w	r2, r2, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ab      	beq.n	800165a <HAL_RCC_OscConfig+0x1b6>
 8001702:	e05c      	b.n	80017be <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb5c 	bl	8000dc0 <HAL_GetTick>
 8001708:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170e:	f7ff fb57 	bl	8000dc0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d902      	bls.n	8001724 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	f000 bf0d 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001728:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001738:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d102      	bne.n	8001756 <HAL_RCC_OscConfig+0x2b2>
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x2de>
 8001756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800176a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800176e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001772:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001776:	fa93 f3a3 	rbit	r3, r3
 800177a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_RCC_OscConfig+0x314>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800178a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800178e:	fa92 f2a2 	rbit	r2, r2
 8001792:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001796:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800179a:	fab2 f282 	clz	r2, r2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f042 0220 	orr.w	r2, r2, #32
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	f002 021f 	and.w	r2, r2, #31
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ab      	bne.n	800170e <HAL_RCC_OscConfig+0x26a>
 80017b6:	e002      	b.n	80017be <HAL_RCC_OscConfig+0x31a>
 80017b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 817f 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017d4:	4ba7      	ldr	r3, [pc, #668]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00c      	beq.n	80017fa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017e0:	4ba4      	ldr	r3, [pc, #656]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d173      	bne.n	80018d4 <HAL_RCC_OscConfig+0x430>
 80017ec:	4ba1      	ldr	r3, [pc, #644]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017f8:	d16c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x430>
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800180c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <HAL_RCC_OscConfig+0x386>
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	e013      	b.n	8001852 <HAL_RCC_OscConfig+0x3ae>
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001842:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	2202      	movs	r2, #2
 8001854:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001858:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800185c:	fa92 f2a2 	rbit	r2, r2
 8001860:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001864:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <HAL_RCC_OscConfig+0x3f6>
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d002      	beq.n	800189a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f000 be52 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	21f8      	movs	r1, #248	; 0xf8
 80018b0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018b8:	fa91 f1a1 	rbit	r1, r1
 80018bc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80018c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018c4:	fab1 f181 	clz	r1, r1
 80018c8:	b2c9      	uxtb	r1, r1
 80018ca:	408b      	lsls	r3, r1
 80018cc:	4969      	ldr	r1, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	e0fe      	b.n	8001ad2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8088 	beq.w	80019f6 <HAL_RCC_OscConfig+0x552>
 80018e6:	2301      	movs	r3, #1
 80018e8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80018f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001906:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	461a      	mov	r2, r3
 800190e:	2301      	movs	r3, #1
 8001910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fa55 	bl	8000dc0 <HAL_GetTick>
 8001916:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	e00a      	b.n	8001932 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fa50 	bl	8000dc0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d902      	bls.n	8001932 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	f000 be06 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001944:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0x4be>
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0x4e6>
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800197a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2202      	movs	r2, #2
 800198c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001990:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001994:	fa92 f2a2 	rbit	r2, r2
 8001998:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800199c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019a0:	fab2 f282 	clz	r2, r2
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f042 0220 	orr.w	r2, r2, #32
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	f002 021f 	and.w	r2, r2, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0af      	beq.n	800191c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	21f8      	movs	r1, #248	; 0xf8
 80019d2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80019da:	fa91 f1a1 	rbit	r1, r1
 80019de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80019e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019e6:	fab1 f181 	clz	r1, r1
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	408b      	lsls	r3, r1
 80019ee:	4921      	ldr	r1, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e06d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x62e>
 80019f6:	2301      	movs	r3, #1
 80019f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f9cd 	bl	8000dc0 <HAL_GetTick>
 8001a26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f9c8 	bl	8000dc0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d902      	bls.n	8001a42 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f000 bd7e 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5d4>
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <HAL_RCC_OscConfig+0x5d0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e016      	b.n	8001aa0 <HAL_RCC_OscConfig+0x5fc>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a9c:	4bbf      	ldr	r3, [pc, #764]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001aa6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ab2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f042 0220 	orr.w	r2, r2, #32
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ac      	bne.n	8001a2c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8113 	beq.w	8001d0e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x74e>
 8001af8:	2301      	movs	r3, #1
 8001afa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <HAL_RCC_OscConfig+0x8fc>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f94d 	bl	8000dc0 <HAL_GetTick>
 8001b26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f948 	bl	8000dc0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d902      	bls.n	8001b42 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f000 bcfe 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bae:	2102      	movs	r1, #2
 8001bb0:	6019      	str	r1, [r3, #0]
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f1a3 	rbit	r1, r3
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bc8:	6019      	str	r1, [r3, #0]
  return result;
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d09d      	beq.n	8001b2c <HAL_RCC_OscConfig+0x688>
 8001bf0:	e08d      	b.n	8001d0e <HAL_RCC_OscConfig+0x86a>
 8001bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x8fc>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f8c4 	bl	8000dc0 <HAL_GetTick>
 8001c38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f8bf 	bl	8000dc0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d902      	bls.n	8001c54 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	f000 bc75 	b.w	800253e <HAL_RCC_OscConfig+0x109a>
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ccc:	2102      	movs	r1, #2
 8001cce:	6019      	str	r1, [r3, #0]
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f1a3 	rbit	r1, r3
 8001cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ce6:	6019      	str	r1, [r3, #0]
  return result;
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d197      	bne.n	8001c3e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 81a5 	beq.w	800206e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_RCC_OscConfig+0x8f8>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_RCC_OscConfig+0x900>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d121      	bne.n	8001db4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x900>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x900>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f820 	bl	8000dc0 <HAL_GetTick>
 8001d80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e010      	b.n	8001da8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7ff f81b 	bl	8000dc0 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e3d1      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <HAL_RCC_OscConfig+0xb3c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0e8      	beq.n	8001d86 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x92e>
 8001dc4:	4b87      	ldr	r3, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a86      	ldr	r2, [pc, #536]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e035      	b.n	8001e3e <HAL_RCC_OscConfig+0x99a>
 8001dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x958>
 8001de2:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e020      	b.n	8001e3e <HAL_RCC_OscConfig+0x99a>
 8001dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x982>
 8001e0c:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a74      	ldr	r2, [pc, #464]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x99a>
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8081 	beq.w	8001f52 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7fe ffb6 	bl	8000dc0 <HAL_GetTick>
 8001e54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ffb1 	bl	8000dc0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e365      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001eb8:	601a      	str	r2, [r3, #0]
  return result;
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ec2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_OscConfig+0xa3a>
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	e013      	b.n	8001f06 <HAL_RCC_OscConfig+0xa62>
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f0e:	2102      	movs	r1, #2
 8001f10:	6011      	str	r1, [r2, #0]
 8001f12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f16:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fa92 f1a2 	rbit	r1, r2
 8001f20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f24:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f28:	6011      	str	r1, [r2, #0]
  return result;
 8001f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f2e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d084      	beq.n	8001e5a <HAL_RCC_OscConfig+0x9b6>
 8001f50:	e083      	b.n	800205a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7fe ff35 	bl	8000dc0 <HAL_GetTick>
 8001f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff30 	bl	8000dc0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e2e4      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fba:	601a      	str	r2, [r3, #0]
  return result;
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fc4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xb44>
 8001fda:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_RCC_OscConfig+0xb40>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	e017      	b.n	8002010 <HAL_RCC_OscConfig+0xb6c>
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4bb3      	ldr	r3, [pc, #716]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002014:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002018:	2102      	movs	r1, #2
 800201a:	6011      	str	r1, [r2, #0]
 800201c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002020:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	fa92 f1a2 	rbit	r1, r2
 800202a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002032:	6011      	str	r1, [r2, #0]
  return result;
 8002034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002038:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f002 021f 	and.w	r2, r2, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d180      	bne.n	8001f5c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b9e      	ldr	r3, [pc, #632]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a9d      	ldr	r2, [pc, #628]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 825e 	beq.w	800253c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b96      	ldr	r3, [pc, #600]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	f000 821f 	beq.w	80024cc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b02      	cmp	r3, #2
 800209c:	f040 8170 	bne.w	8002380 <HAL_RCC_OscConfig+0xedc>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c4:	601a      	str	r2, [r3, #0]
  return result;
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020ce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2300      	movs	r3, #0
 80020e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe fe6b 	bl	8000dc0 <HAL_GetTick>
 80020ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	e009      	b.n	8002104 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fe66 	bl	8000dc0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e21c      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002116:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002124:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002128:	601a      	str	r2, [r3, #0]
  return result;
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002132:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0xcaa>
 8002148:	4b64      	ldr	r3, [pc, #400]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e027      	b.n	800219e <HAL_RCC_OscConfig+0xcfa>
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002160:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002178:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800217c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002194:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021aa:	6011      	str	r1, [r2, #0]
 80021ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fa92 f1a2 	rbit	r1, r2
 80021ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021be:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021c2:	6011      	str	r1, [r2, #0]
  return result;
 80021c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d182      	bne.n	80020f0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f023 020f 	bic.w	r2, r3, #15
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002200:	4313      	orrs	r3, r2
 8002202:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800220c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a19      	ldr	r1, [r3, #32]
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	430b      	orrs	r3, r1
 8002226:	492d      	ldr	r1, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002250:	601a      	str	r2, [r3, #0]
  return result;
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800225a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fda5 	bl	8000dc0 <HAL_GetTick>
 8002276:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227a:	e009      	b.n	8002290 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe fda0 	bl	8000dc0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e156      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 8002290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002294:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022b4:	601a      	str	r2, [r3, #0]
  return result;
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0xe3c>
 80022d4:	4b01      	ldr	r3, [pc, #4]	; (80022dc <HAL_RCC_OscConfig+0xe38>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e02a      	b.n	8002330 <HAL_RCC_OscConfig+0xe8c>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800230e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	4b86      	ldr	r3, [pc, #536]	; (8002548 <HAL_RCC_OscConfig+0x10a4>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002334:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002338:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002342:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fa92 f1a2 	rbit	r1, r2
 800234c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002350:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002354:	6011      	str	r1, [r2, #0]
  return result;
 8002356:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800235a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	f43f af7f 	beq.w	800227c <HAL_RCC_OscConfig+0xdd8>
 800237e:	e0dd      	b.n	800253c <HAL_RCC_OscConfig+0x1098>
 8002380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002384:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800238c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002392:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023a4:	601a      	str	r2, [r3, #0]
  return result;
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023ae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	461a      	mov	r2, r3
 80023c2:	2300      	movs	r3, #0
 80023c4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fcfb 	bl	8000dc0 <HAL_GetTick>
 80023ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	e009      	b.n	80023e4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fcf6 	bl	8000dc0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ac      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
 80023e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002408:	601a      	str	r2, [r3, #0]
  return result;
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002412:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_RCC_OscConfig+0xf8a>
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x10a4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e027      	b.n	800247e <HAL_RCC_OscConfig+0xfda>
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800245c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002466:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_OscConfig+0x10a4>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002482:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002486:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002490:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	fa92 f1a2 	rbit	r1, r2
 800249a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800249e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024a2:	6011      	str	r1, [r2, #0]
  return result;
 80024a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024a8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0220 	orr.w	r2, r2, #32
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d182      	bne.n	80023d0 <HAL_RCC_OscConfig+0xf2c>
 80024ca:	e037      	b.n	800253c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e02e      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_OscConfig+0x10a4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_RCC_OscConfig+0x10a4>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024f4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80024f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	d117      	bne.n	8002538 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002508:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800250c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800251c:	429a      	cmp	r2, r3
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b09e      	sub	sp, #120	; 0x78
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e162      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	498b      	ldr	r1, [pc, #556]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e14a      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b82      	ldr	r3, [pc, #520]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	497f      	ldr	r1, [pc, #508]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80dc 	beq.w	8002778 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d13c      	bne.n	8002642 <HAL_RCC_ClockConfig+0xf6>
 80025c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xa6>
 80025ec:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e00f      	b.n	8002612 <HAL_RCC_ClockConfig+0xc6>
 80025f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002604:	663b      	str	r3, [r7, #96]	; 0x60
 8002606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002616:	65ba      	str	r2, [r7, #88]	; 0x58
 8002618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002622:	fab2 f282 	clz	r2, r2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f042 0220 	orr.w	r2, r2, #32
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	f002 021f 	and.w	r2, r2, #31
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f202 	lsl.w	r2, r1, r2
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d17b      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0f3      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d13c      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x178>
 800264a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_ClockConfig+0x128>
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e00f      	b.n	8002694 <HAL_RCC_ClockConfig+0x148>
 8002674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
 8002688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002698:	63ba      	str	r2, [r7, #56]	; 0x38
 800269a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f002 021f 	and.w	r2, r2, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13a      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b2      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
 80026c4:	2302      	movs	r3, #2
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_ClockConfig+0x1a0>
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e00d      	b.n	8002708 <HAL_RCC_ClockConfig+0x1bc>
 80026ec:	2302      	movs	r3, #2
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	2302      	movs	r3, #2
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2202      	movs	r2, #2
 800270a:	61ba      	str	r2, [r7, #24]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	617a      	str	r2, [r7, #20]
  return result;
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f042 0220 	orr.w	r2, r2, #32
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f002 021f 	and.w	r2, r2, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e079      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	491a      	ldr	r1, [pc, #104]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002748:	f7fe fb3a 	bl	8000dc0 <HAL_GetTick>
 800274c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fb36 	bl	8000dc0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e061      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCC_ClockConfig+0x260>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d214      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4906      	ldr	r1, [pc, #24]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <HAL_RCC_ClockConfig+0x25c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e040      	b.n	800282a <HAL_RCC_ClockConfig+0x2de>
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_ClockConfig+0x2e8>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	491a      	ldr	r1, [pc, #104]	; (8002834 <HAL_RCC_ClockConfig+0x2e8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x2e8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4912      	ldr	r1, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x2e8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ee:	f000 f829 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80027f2:	4601      	mov	r1, r0
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_RCC_ClockConfig+0x2e8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fc:	22f0      	movs	r2, #240	; 0xf0
 80027fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	60fa      	str	r2, [r7, #12]
  return result;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	40d3      	lsrs	r3, r2
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x2ec>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	fa21 f303 	lsr.w	r3, r1, r3
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_RCC_ClockConfig+0x2f0>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_RCC_ClockConfig+0x2f4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fa88 	bl	8000d38 <HAL_InitTick>
  
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3778      	adds	r7, #120	; 0x78
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	080044e4 	.word	0x080044e4
 800283c:	20000010 	.word	0x20000010
 8002840:	20000014 	.word	0x20000014

08002844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b08b      	sub	sp, #44	; 0x2c
 8002848:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x30>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x36>
 8002872:	e03f      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	e03f      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002880:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002884:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	607a      	str	r2, [r7, #4]
  return result;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	40d3      	lsrs	r3, r2
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_RCC_GetSysClockFreq+0xcc>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	220f      	movs	r2, #15
 80028a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	60fa      	str	r2, [r7, #12]
  return result;
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	40d3      	lsrs	r3, r2
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
 80028dc:	e007      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	623b      	str	r3, [r7, #32]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	372c      	adds	r7, #44	; 0x2c
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	080044fc 	.word	0x080044fc
 8002914:	0800450c 	.word	0x0800450c

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000010 	.word	0x20000010

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002936:	f7ff ffef 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002944:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002948:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	603a      	str	r2, [r7, #0]
  return result;
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	40d3      	lsrs	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x40>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	080044f4 	.word	0x080044f4

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800297a:	f7ff ffcd 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800297e:	4601      	mov	r1, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002988:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800298c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fa92 f2a2 	rbit	r2, r2
 8002994:	603a      	str	r2, [r7, #0]
  return result;
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	40d3      	lsrs	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	080044f4 	.word	0x080044f4

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b092      	sub	sp, #72	; 0x48
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80d4 	beq.w	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029dc:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10e      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a4a      	ldr	r2, [pc, #296]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
 80029f4:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe f9cf 	bl	8000dc0 <HAL_GetTick>
 8002a22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe f9cb 	bl	8000dc0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1d6      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8084 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d07c      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2301      	movs	r3, #1
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d04b      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe f97b 	bl	8000dc0 <HAL_GetTick>
 8002aca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f977 	bl	8000dc0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e180      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	61fb      	str	r3, [r7, #28]
  return result;
 8002afc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d108      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b12:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	e00d      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	10908100 	.word	0x10908100
 8002b24:	2302      	movs	r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	4b9a      	ldr	r3, [pc, #616]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	613a      	str	r2, [r7, #16]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0b7      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	498c      	ldr	r1, [pc, #560]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a87      	ldr	r2, [pc, #540]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	f023 0203 	bic.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	497f      	ldr	r1, [pc, #508]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bae:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4978      	ldr	r1, [pc, #480]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bcc:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4970      	ldr	r1, [pc, #448]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f023 0210 	bic.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4969      	ldr	r1, [pc, #420]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c08:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	4961      	ldr	r1, [pc, #388]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f023 0220 	bic.w	r2, r3, #32
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	495a      	ldr	r1, [pc, #360]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c44:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	4952      	ldr	r1, [pc, #328]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c62:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	494b      	ldr	r1, [pc, #300]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4943      	ldr	r1, [pc, #268]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	493c      	ldr	r1, [pc, #240]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cbc:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	4934      	ldr	r1, [pc, #208]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	492d      	ldr	r1, [pc, #180]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4925      	ldr	r1, [pc, #148]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	491e      	ldr	r1, [pc, #120]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	490f      	ldr	r1, [pc, #60]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	e002      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da2:	4913      	ldr	r1, [pc, #76]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	490b      	ldr	r1, [pc, #44]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	4904      	ldr	r1, [pc, #16]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3748      	adds	r7, #72	; 0x48
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e049      	b.n	8002e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fe0e 	bl	8000a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fa1c 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e04f      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d018      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIM_Base_Start_IT+0x76>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d115      	bne.n	8002f46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d015      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d011      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	e008      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e000      	b.n	8002f5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40013400 	.word	0x40013400
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	40015000 	.word	0x40015000
 8002f80:	00010007 	.word	0x00010007

08002f84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10f      	bne.n	8002fcc <HAL_TIM_Base_Stop_IT+0x48>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	f240 4344 	movw	r3, #1092	; 0x444
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_Base_Stop_IT+0x48>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d122      	bne.n	800303e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d11b      	bne.n	800303e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0202 	mvn.w	r2, #2
 800300e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f905 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 800302a:	e005      	b.n	8003038 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8f7 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f908 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d122      	bne.n	8003092 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d11b      	bne.n	8003092 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0204 	mvn.w	r2, #4
 8003062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8db 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 800307e:	e005      	b.n	800308c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f8cd 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8de 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d122      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0208 	mvn.w	r2, #8
 80030b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2204      	movs	r2, #4
 80030bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8b1 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 80030d2:	e005      	b.n	80030e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8a3 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8b4 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d122      	bne.n	800313a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d11b      	bne.n	800313a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0210 	mvn.w	r2, #16
 800310a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2208      	movs	r2, #8
 8003110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f887 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 8003126:	e005      	b.n	8003134 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f879 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f88a 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10e      	bne.n	8003166 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0201 	mvn.w	r2, #1
 800315e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd fbe1 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d10e      	bne.n	8003192 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d107      	bne.n	8003192 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800318a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f917 	bl	80033c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f90a 	bl	80033d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f838 	bl	800325c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0220 	mvn.w	r2, #32
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8ca 	bl	80033ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a42      	ldr	r2, [pc, #264]	; (800338c <TIM_Base_SetConfig+0x11c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <TIM_Base_SetConfig+0x120>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3e      	ldr	r2, [pc, #248]	; (8003394 <TIM_Base_SetConfig+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3d      	ldr	r2, [pc, #244]	; (8003398 <TIM_Base_SetConfig+0x128>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3c      	ldr	r2, [pc, #240]	; (800339c <TIM_Base_SetConfig+0x12c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <TIM_Base_SetConfig+0x11c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2e      	ldr	r2, [pc, #184]	; (8003390 <TIM_Base_SetConfig+0x120>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2d      	ldr	r2, [pc, #180]	; (8003394 <TIM_Base_SetConfig+0x124>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <TIM_Base_SetConfig+0x128>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x130>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x138>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0x12c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <TIM_Base_SetConfig+0x11c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <TIM_Base_SetConfig+0x128>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <TIM_Base_SetConfig+0x130>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <TIM_Base_SetConfig+0x138>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <TIM_Base_SetConfig+0x12c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40013400 	.word	0x40013400
 800339c:	40015000 	.word	0x40015000
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800

080033ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fb3c 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fbbc 	bl	8003ba4 <UART_SetConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fd84 	bl	8003f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fe0b 	bl	8004090 <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	2b20      	cmp	r3, #32
 800349a:	d178      	bne.n	800358e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e071      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fc81 	bl	8000dc0 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x68>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f4:	e030      	b.n	8003558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fe6d 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03c      	b.n	8003590 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	b292      	uxth	r2, r2
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3302      	adds	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e008      	b.n	8003546 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b292      	uxth	r2, r2
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c8      	bne.n	80034f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fe36 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e005      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0ba      	sub	sp, #232	; 0xe8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80035c6:	4013      	ands	r3, r2
 80035c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d115      	bne.n	8003600 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00f      	beq.n	8003600 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 82ab 	beq.w	8003b4c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
      }
      return;
 80035fe:	e2a5      	b.n	8003b4c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8117 	beq.w	8003838 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800360a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800361a:	4b85      	ldr	r3, [pc, #532]	; (8003830 <HAL_UART_IRQHandler+0x298>)
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 810a 	beq.w	8003838 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_UART_IRQHandler+0xbc>
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <HAL_UART_IRQHandler+0xec>
 8003660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2202      	movs	r2, #2
 8003672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d011      	beq.n	80036b4 <HAL_UART_IRQHandler+0x11c>
 8003690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2204      	movs	r2, #4
 80036a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e6:	f043 0208 	orr.w	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <HAL_UART_IRQHandler+0x18a>
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8211 	beq.w	8003b50 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800376e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04f      	beq.n	800381a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fd97 	bl	80042ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d141      	bne.n	8003812 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1d9      	bne.n	800378e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d013      	beq.n	800380a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_UART_IRQHandler+0x29c>)
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fc60 	bl	80010b4 <HAL_DMA_Abort_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d017      	beq.n	800382a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003804:	4610      	mov	r0, r2
 8003806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00f      	b.n	800382a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9b4 	bl	8003b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e00b      	b.n	800382a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9b0 	bl	8003b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e007      	b.n	800382a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9ac 	bl	8003b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003828:	e192      	b.n	8003b50 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382a:	bf00      	nop
    return;
 800382c:	e190      	b.n	8003b50 <HAL_UART_IRQHandler+0x5b8>
 800382e:	bf00      	nop
 8003830:	04000120 	.word	0x04000120
 8003834:	08004377 	.word	0x08004377

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 814b 	bne.w	8003ad8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8144 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 813d 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	f040 80b5 	bne.w	80039e0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003882:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8164 	beq.w	8003b54 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003896:	429a      	cmp	r2, r3
 8003898:	f080 815c 	bcs.w	8003b54 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	f000 8086 	beq.w	80039be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1da      	bne.n	80038b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800390c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003920:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003924:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003928:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e1      	bne.n	80038fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800395c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800395e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003962:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800396a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e3      	bne.n	8003938 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	f023 0310 	bic.w	r3, r3, #16
 8003992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80039a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e4      	bne.n	800397e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fb42 	bl	8001042 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8d7 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039de:	e0b9      	b.n	8003b54 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80ab 	beq.w	8003b58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a6 	beq.w	8003b58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e4      	bne.n	8003a0c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	623b      	str	r3, [r7, #32]
   return(result);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a66:	633a      	str	r2, [r7, #48]	; 0x30
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e3      	bne.n	8003a42 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0310 	bic.w	r3, r3, #16
 8003aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	617b      	str	r3, [r7, #20]
   return(result);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e4      	bne.n	8003a8e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f85b 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ad6:	e03f      	b.n	8003b58 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <HAL_UART_IRQHandler+0x56a>
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fc7b 	bl	80043f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b00:	e02d      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01c      	beq.n	8003b5c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    }
    return;
 8003b2a:	e017      	b.n	8003b5c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fc2c 	bl	80043a2 <UART_EndTransmit_IT>
    return;
 8003b4a:	e008      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b4c:	bf00      	nop
 8003b4e:	e006      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b50:	bf00      	nop
 8003b52:	e004      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b5c:	bf00      	nop
  }

}
 8003b5e:	37e8      	adds	r7, #232	; 0xe8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <UART_SetConfig+0x274>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <UART_SetConfig+0x278>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d120      	bne.n	8003c62 <UART_SetConfig+0xbe>
 8003c20:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <UART_SetConfig+0x27c>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d817      	bhi.n	8003c5c <UART_SetConfig+0xb8>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x90>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c51 	.word	0x08003c51
 8003c3c:	08003c57 	.word	0x08003c57
 8003c40:	08003c4b 	.word	0x08003c4b
 8003c44:	2301      	movs	r3, #1
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e0b5      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e0b2      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c50:	2304      	movs	r3, #4
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0af      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c56:	2308      	movs	r3, #8
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e0ac      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e0a9      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6f      	ldr	r2, [pc, #444]	; (8003e24 <UART_SetConfig+0x280>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d124      	bne.n	8003cb6 <UART_SetConfig+0x112>
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <UART_SetConfig+0x27c>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c78:	d011      	beq.n	8003c9e <UART_SetConfig+0xfa>
 8003c7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c7e:	d817      	bhi.n	8003cb0 <UART_SetConfig+0x10c>
 8003c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c84:	d011      	beq.n	8003caa <UART_SetConfig+0x106>
 8003c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c8a:	d811      	bhi.n	8003cb0 <UART_SetConfig+0x10c>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <UART_SetConfig+0xf4>
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d006      	beq.n	8003ca4 <UART_SetConfig+0x100>
 8003c96:	e00b      	b.n	8003cb0 <UART_SetConfig+0x10c>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e08b      	b.n	8003db6 <UART_SetConfig+0x212>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e088      	b.n	8003db6 <UART_SetConfig+0x212>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e085      	b.n	8003db6 <UART_SetConfig+0x212>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e082      	b.n	8003db6 <UART_SetConfig+0x212>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e07f      	b.n	8003db6 <UART_SetConfig+0x212>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <UART_SetConfig+0x284>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d124      	bne.n	8003d0a <UART_SetConfig+0x166>
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <UART_SetConfig+0x27c>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ccc:	d011      	beq.n	8003cf2 <UART_SetConfig+0x14e>
 8003cce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cd2:	d817      	bhi.n	8003d04 <UART_SetConfig+0x160>
 8003cd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cd8:	d011      	beq.n	8003cfe <UART_SetConfig+0x15a>
 8003cda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cde:	d811      	bhi.n	8003d04 <UART_SetConfig+0x160>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <UART_SetConfig+0x148>
 8003ce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce8:	d006      	beq.n	8003cf8 <UART_SetConfig+0x154>
 8003cea:	e00b      	b.n	8003d04 <UART_SetConfig+0x160>
 8003cec:	2300      	movs	r3, #0
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e061      	b.n	8003db6 <UART_SetConfig+0x212>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e05e      	b.n	8003db6 <UART_SetConfig+0x212>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e05b      	b.n	8003db6 <UART_SetConfig+0x212>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e058      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d04:	2310      	movs	r3, #16
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e055      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <UART_SetConfig+0x288>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d124      	bne.n	8003d5e <UART_SetConfig+0x1ba>
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <UART_SetConfig+0x27c>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d20:	d011      	beq.n	8003d46 <UART_SetConfig+0x1a2>
 8003d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d26:	d817      	bhi.n	8003d58 <UART_SetConfig+0x1b4>
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d011      	beq.n	8003d52 <UART_SetConfig+0x1ae>
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d32:	d811      	bhi.n	8003d58 <UART_SetConfig+0x1b4>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <UART_SetConfig+0x19c>
 8003d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3c:	d006      	beq.n	8003d4c <UART_SetConfig+0x1a8>
 8003d3e:	e00b      	b.n	8003d58 <UART_SetConfig+0x1b4>
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e037      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e034      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e031      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e02e      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e02b      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <UART_SetConfig+0x28c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d124      	bne.n	8003db2 <UART_SetConfig+0x20e>
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <UART_SetConfig+0x27c>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d74:	d011      	beq.n	8003d9a <UART_SetConfig+0x1f6>
 8003d76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d7a:	d817      	bhi.n	8003dac <UART_SetConfig+0x208>
 8003d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d80:	d011      	beq.n	8003da6 <UART_SetConfig+0x202>
 8003d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d86:	d811      	bhi.n	8003dac <UART_SetConfig+0x208>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <UART_SetConfig+0x1f0>
 8003d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d90:	d006      	beq.n	8003da0 <UART_SetConfig+0x1fc>
 8003d92:	e00b      	b.n	8003dac <UART_SetConfig+0x208>
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e00d      	b.n	8003db6 <UART_SetConfig+0x212>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e00a      	b.n	8003db6 <UART_SetConfig+0x212>
 8003da0:	2304      	movs	r3, #4
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e007      	b.n	8003db6 <UART_SetConfig+0x212>
 8003da6:	2308      	movs	r3, #8
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e004      	b.n	8003db6 <UART_SetConfig+0x212>
 8003dac:	2310      	movs	r3, #16
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e001      	b.n	8003db6 <UART_SetConfig+0x212>
 8003db2:	2310      	movs	r3, #16
 8003db4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	d16b      	bne.n	8003e98 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d838      	bhi.n	8003e38 <UART_SetConfig+0x294>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x228>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e39 	.word	0x08003e39
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e39 	.word	0x08003e39
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe fd9e 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61b8      	str	r0, [r7, #24]
        break;
 8003df6:	e024      	b.n	8003e42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7fe fdbc 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	61b8      	str	r0, [r7, #24]
        break;
 8003dfe:	e020      	b.n	8003e42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <UART_SetConfig+0x290>)
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e01d      	b.n	8003e42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe fd1d 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003e0a:	61b8      	str	r0, [r7, #24]
        break;
 8003e0c:	e019      	b.n	8003e42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	61bb      	str	r3, [r7, #24]
        break;
 8003e14:	e015      	b.n	8003e42 <UART_SetConfig+0x29e>
 8003e16:	bf00      	nop
 8003e18:	efff69f3 	.word	0xefff69f3
 8003e1c:	40013800 	.word	0x40013800
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40004400 	.word	0x40004400
 8003e28:	40004800 	.word	0x40004800
 8003e2c:	40004c00 	.word	0x40004c00
 8003e30:	40005000 	.word	0x40005000
 8003e34:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77bb      	strb	r3, [r7, #30]
        break;
 8003e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d073      	beq.n	8003f30 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	005a      	lsls	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	441a      	add	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b0f      	cmp	r3, #15
 8003e62:	d916      	bls.n	8003e92 <UART_SetConfig+0x2ee>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d212      	bcs.n	8003e92 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f023 030f 	bic.w	r3, r3, #15
 8003e74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	89fa      	ldrh	r2, [r7, #14]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e04e      	b.n	8003f30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	77bb      	strb	r3, [r7, #30]
 8003e96:	e04b      	b.n	8003f30 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d827      	bhi.n	8003eee <UART_SetConfig+0x34a>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x300>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe fd32 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	61b8      	str	r0, [r7, #24]
        break;
 8003ece:	e013      	b.n	8003ef8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe fd50 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	61b8      	str	r0, [r7, #24]
        break;
 8003ed6:	e00f      	b.n	8003ef8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <UART_SetConfig+0x3a4>)
 8003eda:	61bb      	str	r3, [r7, #24]
        break;
 8003edc:	e00c      	b.n	8003ef8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe fcb1 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003ee2:	61b8      	str	r0, [r7, #24]
        break;
 8003ee4:	e008      	b.n	8003ef8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	61bb      	str	r3, [r7, #24]
        break;
 8003eec:	e004      	b.n	8003ef8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	085a      	lsrs	r2, r3, #1
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	441a      	add	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d909      	bls.n	8003f2c <UART_SetConfig+0x388>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d205      	bcs.n	8003f2c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	e001      	b.n	8003f30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404a:	d10a      	bne.n	8004062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b098      	sub	sp, #96	; 0x60
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a0:	f7fc fe8e 	bl	8000dc0 <HAL_GetTick>
 80040a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d12e      	bne.n	8004112 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f88c 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d021      	beq.n	8004112 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e2:	653b      	str	r3, [r7, #80]	; 0x50
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ec:	647b      	str	r3, [r7, #68]	; 0x44
 80040ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e062      	b.n	80041d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d149      	bne.n	80041b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f856 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d03c      	beq.n	80041b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	623b      	str	r3, [r7, #32]
   return(result);
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800415e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	60fb      	str	r3, [r7, #12]
   return(result);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	64bb      	str	r3, [r7, #72]	; 0x48
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e011      	b.n	80041d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3758      	adds	r7, #88	; 0x58
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	e049      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d045      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fc fde1 	bl	8000dc0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <UART_WaitOnFlagUntilTimeout+0x30>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e048      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d031      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d110      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2208      	movs	r2, #8
 8004236:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f838 	bl	80042ae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2208      	movs	r2, #8
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e029      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d111      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800426a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f81e 	bl	80042ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e00f      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d0a6      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b095      	sub	sp, #84	; 0x54
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40
 80042d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3308      	adds	r3, #8
 8004306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	2b01      	cmp	r3, #1
 8004322:	d118      	bne.n	8004356 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	60bb      	str	r3, [r7, #8]
   return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0310 	bic.w	r3, r3, #16
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	613b      	str	r3, [r7, #16]
   return(result);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e6      	bne.n	8004324 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	669a      	str	r2, [r3, #104]	; 0x68
}
 800436a:	bf00      	nop
 800436c:	3754      	adds	r7, #84	; 0x54
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fbef 	bl	8003b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b088      	sub	sp, #32
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	613b      	str	r3, [r7, #16]
   return(result);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e6      	bne.n	80043aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fbbb 	bl	8003b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e016      	b.n	800444a <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc fbb7 	bl	8000b90 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442e:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <memset>:
 8004472:	4402      	add	r2, r0
 8004474:	4603      	mov	r3, r0
 8004476:	4293      	cmp	r3, r2
 8004478:	d100      	bne.n	800447c <memset+0xa>
 800447a:	4770      	bx	lr
 800447c:	f803 1b01 	strb.w	r1, [r3], #1
 8004480:	e7f9      	b.n	8004476 <memset+0x4>
	...

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	; (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	; (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	; (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	; (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 f818 	bl	80044cc <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	0800451c 	.word	0x0800451c
 80044c0:	0800451c 	.word	0x0800451c
 80044c4:	0800451c 	.word	0x0800451c
 80044c8:	08004520 	.word	0x08004520

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
