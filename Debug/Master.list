
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000468c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004964  08004964  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004964  08004964  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000384  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000105e3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002489  00000000  00000000  000306be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df8  00000000  00000000  00032b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aee  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021119  00000000  00000000  0003442e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000127d6  00000000  00000000  00055547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cab79  00000000  00000000  00067d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c68  00000000  00000000  00132898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00136500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004808 	.word	0x08004808

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08004808 	.word	0x08004808

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <bitmask_set>:
char appended_data[40];
char result[5];
char send_data[40];
char tmp[10];

void bitmask_set(uint32_t bit_position){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	bit |= (1 << bit_position);
 80001ec:	2201      	movs	r2, #1
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	fa02 f303 	lsl.w	r3, r2, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <bitmask_set+0x28>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <bitmask_set+0x28>)
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	20000210 	.word	0x20000210

08000210 <bitmask_clear>:

void bitmask_clear(uint32_t bit_position){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	 bit &= ~(1 << bit_position);
 8000218:	2201      	movs	r2, #1
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	fa02 f303 	lsl.w	r3, r2, r3
 8000220:	43db      	mvns	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <bitmask_clear+0x2c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4013      	ands	r3, r2
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <bitmask_clear+0x2c>)
 800022c:	6013      	str	r3, [r2, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000210 	.word	0x20000210

08000240 <bitmask_check>:

uint8_t bitmask_check(uint32_t bit_position){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	if(bit & (1 << bit_position)){
 8000248:	2201      	movs	r2, #1
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	fa02 f303 	lsl.w	r3, r2, r3
 8000250:	461a      	mov	r2, r3
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <bitmask_check+0x30>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4013      	ands	r3, r2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <bitmask_check+0x20>
		return 1;
 800025c:	2301      	movs	r3, #1
 800025e:	e000      	b.n	8000262 <bitmask_check+0x22>
	}else{
		return 0;
 8000260:	2300      	movs	r3, #0
	}
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000210 	.word	0x20000210

08000274 <xor>:

void xor(char* str1, char* str2){
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 5; i++){
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e017      	b.n	80002b4 <xor+0x40>
		if(str1[i] == str2[i]){
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	6839      	ldr	r1, [r7, #0]
 8000290:	440b      	add	r3, r1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d105      	bne.n	80002a4 <xor+0x30>
			result[i] = '0';			//if bits are same, XOR is 0
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <xor+0x58>)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	4413      	add	r3, r2
 800029e:	2230      	movs	r2, #48	; 0x30
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e004      	b.n	80002ae <xor+0x3a>
		}else{
			result[i] = '1';			//if bits are different, XOR is 1
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <xor+0x58>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	4413      	add	r3, r2
 80002aa:	2231      	movs	r2, #49	; 0x31
 80002ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	3301      	adds	r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	dde4      	ble.n	8000284 <xor+0x10>
		}
	}
	result[4] = '\0';
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <xor+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	711a      	strb	r2, [r3, #4]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	20000274 	.word	0x20000274

080002d0 <toStr>:

void toStr(){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	uint32_t temp = data;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <toStr+0x54>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++){
 80002dc:	2300      	movs	r3, #0
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e015      	b.n	800030e <toStr+0x3e>
		if(temp & 1){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d005      	beq.n	80002f8 <toStr+0x28>
			data_str[i] = '1';
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <toStr+0x58>)
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	2231      	movs	r2, #49	; 0x31
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e004      	b.n	8000302 <toStr+0x32>
		}else{
			data_str[i] = '0';
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <toStr+0x58>)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	4413      	add	r3, r2
 80002fe:	2230      	movs	r2, #48	; 0x30
 8000300:	701a      	strb	r2, [r3, #0]
		}
		temp = temp >> 1;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	085b      	lsrs	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++){
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b1f      	cmp	r3, #31
 8000312:	dde6      	ble.n	80002e2 <toStr+0x12>
	}
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000214 	.word	0x20000214
 8000328:	2000021c 	.word	0x2000021c

0800032c <division>:

void division(){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	int dividend_len = strlen(appended_data);
 8000332:	482c      	ldr	r0, [pc, #176]	; (80003e4 <division+0xb8>)
 8000334:	f7ff ff4e 	bl	80001d4 <strlen>
 8000338:	4603      	mov	r3, r0
 800033a:	603b      	str	r3, [r7, #0]
	int xor_bits = 4;
 800033c:	2304      	movs	r3, #4
 800033e:	607b      	str	r3, [r7, #4]

	strncpy(tmp, appended_data, xor_bits);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	461a      	mov	r2, r3
 8000344:	4927      	ldr	r1, [pc, #156]	; (80003e4 <division+0xb8>)
 8000346:	4828      	ldr	r0, [pc, #160]	; (80003e8 <division+0xbc>)
 8000348:	f004 fa19 	bl	800477e <strncpy>

	while(xor_bits < dividend_len){
 800034c:	e029      	b.n	80003a2 <division+0x76>
		if(tmp[0] == '1'){		//if leftmost bit is 1, perform xor with key
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <division+0xbc>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b31      	cmp	r3, #49	; 0x31
 8000354:	d111      	bne.n	800037a <division+0x4e>
			xor(key, tmp);
 8000356:	4924      	ldr	r1, [pc, #144]	; (80003e8 <division+0xbc>)
 8000358:	4824      	ldr	r0, [pc, #144]	; (80003ec <division+0xc0>)
 800035a:	f7ff ff8b 	bl	8000274 <xor>
			strncpy(tmp, result+1, 4);
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <division+0xc4>)
 8000360:	2204      	movs	r2, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4820      	ldr	r0, [pc, #128]	; (80003e8 <division+0xbc>)
 8000366:	f004 fa0a 	bl	800477e <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <division+0xb8>)
 800036e:	4413      	add	r3, r2
 8000370:	4619      	mov	r1, r3
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <division+0xbc>)
 8000374:	f004 f9f4 	bl	8004760 <strcat>
 8000378:	e010      	b.n	800039c <division+0x70>
		}else{					//if leftmost bit is 0, perform xor with string of zeros
			xor("0000", tmp);
 800037a:	491b      	ldr	r1, [pc, #108]	; (80003e8 <division+0xbc>)
 800037c:	481d      	ldr	r0, [pc, #116]	; (80003f4 <division+0xc8>)
 800037e:	f7ff ff79 	bl	8000274 <xor>
			strncpy(tmp, result+1, 4);
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <division+0xc4>)
 8000384:	2204      	movs	r2, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4817      	ldr	r0, [pc, #92]	; (80003e8 <division+0xbc>)
 800038a:	f004 f9f8 	bl	800477e <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <division+0xb8>)
 8000392:	4413      	add	r3, r2
 8000394:	4619      	mov	r1, r3
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <division+0xbc>)
 8000398:	f004 f9e2 	bl	8004760 <strcat>
		}
		xor_bits++;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
	while(xor_bits < dividend_len){
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	dbd1      	blt.n	800034e <division+0x22>
	}

	if(tmp[0] == '1'){
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <division+0xbc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b31      	cmp	r3, #49	; 0x31
 80003b0:	d108      	bne.n	80003c4 <division+0x98>
		xor(key, tmp);
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <division+0xbc>)
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <division+0xc0>)
 80003b6:	f7ff ff5d 	bl	8000274 <xor>
		strcpy(tmp, result);
 80003ba:	490f      	ldr	r1, [pc, #60]	; (80003f8 <division+0xcc>)
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <division+0xbc>)
 80003be:	f004 fa1b 	bl	80047f8 <strcpy>
 80003c2:	e007      	b.n	80003d4 <division+0xa8>
	}else{
		xor("0000", tmp);
 80003c4:	4908      	ldr	r1, [pc, #32]	; (80003e8 <division+0xbc>)
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <division+0xc8>)
 80003c8:	f7ff ff54 	bl	8000274 <xor>
		strcpy(tmp, result);
 80003cc:	490a      	ldr	r1, [pc, #40]	; (80003f8 <division+0xcc>)
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <division+0xbc>)
 80003d0:	f004 fa12 	bl	80047f8 <strcpy>
	}
	strcpy(remain, tmp);
 80003d4:	4904      	ldr	r1, [pc, #16]	; (80003e8 <division+0xbc>)
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <division+0xd0>)
 80003d8:	f004 fa0e 	bl	80047f8 <strcpy>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000024c 	.word	0x2000024c
 80003e8:	200002a4 	.word	0x200002a4
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000275 	.word	0x20000275
 80003f4:	08004820 	.word	0x08004820
 80003f8:	20000274 	.word	0x20000274
 80003fc:	20000244 	.word	0x20000244

08000400 <str_rev>:

char* str_rev(char* str){
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff fee3 	bl	80001d4 <strlen>
 800040e:	4603      	mov	r3, r0
 8000410:	60fb      	str	r3, [r7, #12]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3b01      	subs	r3, #1
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	e017      	b.n	800044e <str_rev+0x4e>
		char c = str[i];
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	72fb      	strb	r3, [r7, #11]
		str[i] = str[j];
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	441a      	add	r2, r3
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	440b      	add	r3, r1
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	701a      	strb	r2, [r3, #0]
		str[j] = c;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	7afa      	ldrb	r2, [r7, #11]
 8000440:	701a      	strb	r2, [r3, #0]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3b01      	subs	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dde3      	ble.n	800041e <str_rev+0x1e>
	}
	return str;
 8000456:	687b      	ldr	r3, [r7, #4]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <encode_crc>:

void encode_crc(){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
	toStr();
 8000466:	f7ff ff33 	bl	80002d0 <toStr>

	//appends n-1 zeros to data
	strcpy(appended_data, "000");
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <encode_crc+0x84>)
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <encode_crc+0x88>)
 800046e:	601a      	str	r2, [r3, #0]
	strcat(appended_data, data_str);
 8000470:	491e      	ldr	r1, [pc, #120]	; (80004ec <encode_crc+0x8c>)
 8000472:	481c      	ldr	r0, [pc, #112]	; (80004e4 <encode_crc+0x84>)
 8000474:	f004 f974 	bl	8004760 <strcat>
	strcpy(appended_data, str_rev(appended_data));
 8000478:	481a      	ldr	r0, [pc, #104]	; (80004e4 <encode_crc+0x84>)
 800047a:	f7ff ffc1 	bl	8000400 <str_rev>
 800047e:	4603      	mov	r3, r0
 8000480:	4619      	mov	r1, r3
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <encode_crc+0x84>)
 8000484:	f004 f9b8 	bl	80047f8 <strcpy>

	division();
 8000488:	f7ff ff50 	bl	800032c <division>

	//appends data and remainder
	char temp[10];
	strcpy(send_data, str_rev(data_str));
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <encode_crc+0x8c>)
 800048e:	f7ff ffb7 	bl	8000400 <str_rev>
 8000492:	4603      	mov	r3, r0
 8000494:	4619      	mov	r1, r3
 8000496:	4816      	ldr	r0, [pc, #88]	; (80004f0 <encode_crc+0x90>)
 8000498:	f004 f9ae 	bl	80047f8 <strcpy>
	strncpy(temp, remain+1, 4);
 800049c:	4915      	ldr	r1, [pc, #84]	; (80004f4 <encode_crc+0x94>)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2204      	movs	r2, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f004 f96b 	bl	800477e <strncpy>
	strcat(send_data, temp);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <encode_crc+0x90>)
 80004ae:	f004 f957 	bl	8004760 <strcat>

	char *endptr;
	TxData[0] = strtol(data_str, &endptr, 2);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2202      	movs	r2, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <encode_crc+0x8c>)
 80004ba:	f004 f93f 	bl	800473c <strtol>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <encode_crc+0x98>)
 80004c4:	601a      	str	r2, [r3, #0]
	TxData[1] = strtol(send_data, &endptr, 2);
 80004c6:	463b      	mov	r3, r7
 80004c8:	2202      	movs	r2, #2
 80004ca:	4619      	mov	r1, r3
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <encode_crc+0x90>)
 80004ce:	f004 f935 	bl	800473c <strtol>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <encode_crc+0x98>)
 80004d8:	605a      	str	r2, [r3, #4]
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000024c 	.word	0x2000024c
 80004e8:	00303030 	.word	0x00303030
 80004ec:	2000021c 	.word	0x2000021c
 80004f0:	2000027c 	.word	0x2000027c
 80004f4:	20000245 	.word	0x20000245
 80004f8:	20000204 	.word	0x20000204

080004fc <sendData>:

void sendData(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	encode_crc();
 8000500:	f7ff ffae 	bl	8000460 <encode_crc>

	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fc89 	bl	8000e1c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	220c      	movs	r2, #12
 8000510:	4902      	ldr	r1, [pc, #8]	; (800051c <sendData+0x20>)
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <sendData+0x24>)
 8000514:	f003 f8cc 	bl	80036b0 <HAL_UART_Transmit>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000204 	.word	0x20000204
 8000520:	200000f4 	.word	0x200000f4

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc12 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f854 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f95e 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f92c 	bl	8000790 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f8fa 	bl	8000730 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800053c:	f000 f8d2 	bl	80006e4 <MX_TIM16_Init>
  MX_CRC_Init();
 8000540:	f000 f8a2 	bl	8000688 <MX_CRC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sendData();
 8000544:	f7ff ffda 	bl	80004fc <sendData>
	  	  if(bitmask_check(0)) //red
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fe79 	bl	8000240 <bitmask_check>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00a      	beq.n	800056a <main+0x46>
	  	  {
	  		  data = 1;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <main+0xb0>)
 8000556:	2201      	movs	r2, #1
 8000558:	601a      	str	r2, [r3, #0]
	  		  sendData();
 800055a:	f7ff ffcf 	bl	80004fc <sendData>
	  		  data = 0;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <main+0xb0>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(0);
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fe53 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(1)) //green
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff fe68 	bl	8000240 <bitmask_check>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <main+0x68>
	  	  {
	  		  data = 2;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <main+0xb0>)
 8000578:	2202      	movs	r2, #2
 800057a:	601a      	str	r2, [r3, #0]
	  		  sendData();
 800057c:	f7ff ffbe 	bl	80004fc <sendData>
	  		  data = 0;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0xb0>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f7ff fe42 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(2)) //yellow
 800058c:	2002      	movs	r0, #2
 800058e:	f7ff fe57 	bl	8000240 <bitmask_check>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00a      	beq.n	80005ae <main+0x8a>
	  	  {
	  		  data = 3;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <main+0xb0>)
 800059a:	2203      	movs	r2, #3
 800059c:	601a      	str	r2, [r3, #0]
	  		  sendData();
 800059e:	f7ff ffad 	bl	80004fc <sendData>
	  		  data = 0;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0xb0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(2);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f7ff fe31 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(3)) //blue
 80005ae:	2003      	movs	r0, #3
 80005b0:	f7ff fe46 	bl	8000240 <bitmask_check>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0c4      	beq.n	8000544 <main+0x20>
	  	  {
	  		  data = 4;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <main+0xb0>)
 80005bc:	2204      	movs	r2, #4
 80005be:	601a      	str	r2, [r3, #0]
	  		  sendData();
 80005c0:	f7ff ff9c 	bl	80004fc <sendData>
	  		  data = 0;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <main+0xb0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(3);
 80005ca:	2003      	movs	r0, #3
 80005cc:	f7ff fe20 	bl	8000210 <bitmask_clear>
	  sendData();
 80005d0:	e7b8      	b.n	8000544 <main+0x20>
 80005d2:	bf00      	nop
 80005d4:	20000214 	.word	0x20000214

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0a6      	sub	sp, #152	; 0x98
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e2:	2228      	movs	r2, #40	; 0x28
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f8b2 	bl	8004750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2258      	movs	r2, #88	; 0x58
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 f8a4 	bl	8004750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f855 	bl	80016d0 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800062c:	f000 f9fe 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f894 	bl	8002778 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000656:	f000 f9e9 	bl	8000a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <SystemClock_Config+0xac>)
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000666:	2300      	movs	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fab9 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000678:	f000 f9d8 	bl	8000a2c <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3798      	adds	r7, #152	; 0x98
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	00800003 	.word	0x00800003

08000688 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_CRC_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_CRC_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_CRC_Init+0x50>)
 8000694:	2201      	movs	r2, #1
 8000696:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_CRC_Init+0x50>)
 800069a:	2201      	movs	r2, #1
 800069c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 79764919;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_CRC_Init+0x50>)
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_CRC_Init+0x58>)
 80006a2:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_32B;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_CRC_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 4294967295;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_CRC_Init+0x50>)
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_CRC_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_CRC_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_CRC_Init+0x50>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_CRC_Init+0x50>)
 80006c6:	f000 fcdf 	bl	8001088 <HAL_CRC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f9ac 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000084 	.word	0x20000084
 80006dc:	40023000 	.word	0x40023000
 80006e0:	04c11db7 	.word	0x04c11db7

080006e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_TIM16_Init+0x44>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_TIM16_Init+0x48>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 159;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_TIM16_Init+0x44>)
 80006f0:	229f      	movs	r2, #159	; 0x9f
 80006f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_TIM16_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_TIM16_Init+0x44>)
 80006fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000700:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_TIM16_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_TIM16_Init+0x44>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_TIM16_Init+0x44>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_TIM16_Init+0x44>)
 8000716:	f002 fc83 	bl	8003020 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000720:	f000 f984 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000a8 	.word	0x200000a8
 800072c:	40014400 	.word	0x40014400

08000730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART1_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART1_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART1_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x58>)
 8000774:	f002 ff4e 	bl	8003614 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f955 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000f4 	.word	0x200000f4
 800078c:	40013800 	.word	0x40013800

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f002 ff1e 	bl	8003614 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f925 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000017c 	.word	0x2000017c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <MX_GPIO_Init+0xcc>)
 800080c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xcc>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <MX_GPIO_Init+0xcc>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_GPIO_Init+0xcc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800084e:	230c      	movs	r3, #12
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4817      	ldr	r0, [pc, #92]	; (80008c0 <MX_GPIO_Init+0xd0>)
 8000864:	f000 fd7a 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000868:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0xd4>)
 8000880:	f000 fd6c 	bl	800135c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2008      	movs	r0, #8
 800088a:	f000 fbc6 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800088e:	2008      	movs	r0, #8
 8000890:	f000 fbdf 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2009      	movs	r0, #9
 800089a:	f000 fbbe 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800089e:	2009      	movs	r0, #9
 80008a0:	f000 fbd7 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	f000 fbb6 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f000 fbcf 	bl	8001052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000400 	.word	0x48000400

080008c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);

  if (GPIO_Pin == GPIO_PIN_2){
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d10a      	bne.n	80008ee <HAL_GPIO_EXTI_Callback+0x26>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80008d8:	2104      	movs	r1, #4
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <HAL_GPIO_EXTI_Callback+0x90>)
 80008dc:	f000 fec8 	bl	8001670 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_GPIO_EXTI_Callback+0x94>)
 80008e6:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_1;	//red
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <HAL_GPIO_EXTI_Callback+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_3){
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d10a      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x42>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80008f4:	2108      	movs	r1, #8
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <HAL_GPIO_EXTI_Callback+0x90>)
 80008f8:	f000 feba 	bl	8001670 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <HAL_GPIO_EXTI_Callback+0x94>)
 8000902:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_2;	//green
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_GPIO_EXTI_Callback+0x98>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_14){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000910:	d10b      	bne.n	800092a <HAL_GPIO_EXTI_Callback+0x62>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	4813      	ldr	r0, [pc, #76]	; (8000964 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000918:	f000 feaa 	bl	8001670 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_GPIO_EXTI_Callback+0x94>)
 8000922:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_3;	//yellow
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_GPIO_EXTI_Callback+0x98>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_15){
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000930:	d10b      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x82>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000938:	f000 fe9a 	bl	8001670 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_GPIO_EXTI_Callback+0x94>)
 8000942:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_4;	//blue
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_GPIO_EXTI_Callback+0x98>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
  }
  HAL_TIM_Base_Start_IT(&htim16);
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <HAL_GPIO_EXTI_Callback+0xa0>)
 800094c:	f002 fbc0 	bl	80030d0 <HAL_TIM_Base_Start_IT>

}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	48000800 	.word	0x48000800
 800095c:	20000218 	.word	0x20000218
 8000960:	20000000 	.word	0x20000000
 8000964:	48000400 	.word	0x48000400
 8000968:	200000a8 	.word	0x200000a8

0800096c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	 UNUSED(htim);

	if(htim == &htim16){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d145      	bne.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == state && button == BUTTON_1){
 800097c:	2104      	movs	r1, #4
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000980:	f000 fe76 	bl	8001670 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d106      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x32>
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x32>
			bitmask_set(0);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fc23 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == state && button == BUTTON_2){
 800099e:	2108      	movs	r1, #8
 80009a0:	481e      	ldr	r0, [pc, #120]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009a2:	f000 fe65 	bl	8001670 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d106      	bne.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0x54>
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d102      	bne.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0x54>
			bitmask_set(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fc12 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == state && button == BUTTON_3){
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80009c6:	f000 fe53 	bl	8001670 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d106      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0x78>
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d102      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0x78>
			bitmask_set(2);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff fc00 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == state && button == BUTTON_4){
 80009e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80009ea:	f000 fe41 	bl	8001670 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d106      	bne.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x9c>
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d102      	bne.n	8000a08 <HAL_TIM_PeriodElapsedCallback+0x9c>
			bitmask_set(3);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f7ff fbee 	bl	80001e4 <bitmask_set>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a0a:	f002 fbd1 	bl	80031b0 <HAL_TIM_Base_Stop_IT>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000a8 	.word	0x200000a8
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	20000218 	.word	0x20000218
 8000a24:	20000000 	.word	0x20000000
 8000a28:	48000400 	.word	0x48000400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_CRC_MspInit+0x38>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10b      	bne.n	8000aaa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_CRC_MspInit+0x3c>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_CRC_MspInit+0x3c>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_CRC_MspInit+0x3c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023000 	.word	0x40023000
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x44>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d113      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 fa93 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000af4:	2019      	movs	r0, #25
 8000af6:	f000 faac 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40014400 	.word	0x40014400
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <HAL_UART_MspInit+0xf8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d130      	bne.n	8000b90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a35      	ldr	r2, [pc, #212]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5e:	2330      	movs	r3, #48	; 0x30
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <HAL_UART_MspInit+0x100>)
 8000b7a:	f000 fbef 	bl	800135c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2025      	movs	r0, #37	; 0x25
 8000b84:	f000 fa49 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b88:	2025      	movs	r0, #37	; 0x25
 8000b8a:	f000 fa62 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	e035      	b.n	8000bfc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_UART_MspInit+0x104>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d130      	bne.n	8000bfc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_UART_MspInit+0xfc>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fbb8 	bl	800135c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2026      	movs	r0, #38	; 0x26
 8000bf2:	f000 fa12 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf6:	2026      	movs	r0, #38	; 0x26
 8000bf8:	f000 fa2b 	bl	8001052 <HAL_NVIC_EnableIRQ>
}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013800 	.word	0x40013800
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	40004400 	.word	0x40004400

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f8bc 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f000 fd17 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c7a:	2008      	movs	r0, #8
 8000c7c:	f000 fd10 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c8a:	f002 fac0 	bl	800320e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000a8 	.word	0x200000a8

08000c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <USART1_IRQHandler+0x10>)
 8000c9e:	f002 fd91 	bl	80037c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000f4 	.word	0x200000f4

08000cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <USART2_IRQHandler+0x10>)
 8000cb2:	f002 fd87 	bl	80037c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000017c 	.word	0x2000017c

08000cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000cc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cc8:	f000 fcea 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ccc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cd0:	f000 fce6 	bl	80016a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f003 fd41 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fbf9 	bl	8000524 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d40:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8000d44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d48:	200003ec 	.word	0x200003ec

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f94f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe64 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f967 	bl	800106e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f92f 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	20000014 	.word	0x20000014
 8000dd8:	20000010 	.word	0x20000010

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000014 	.word	0x20000014
 8000e00:	200002b0 	.word	0x200002b0

08000e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200002b0 	.word	0x200002b0

08000e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000014 	.word	0x20000014

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e054      	b.n	8001144 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7f5b      	ldrb	r3, [r3, #29]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fce8 	bl	8000a80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	791b      	ldrb	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a22      	ldr	r2, [pc, #136]	; (800114c <HAL_CRC_Init+0xc4>)
 80010c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0218 	bic.w	r2, r2, #24
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	e00c      	b.n	80010f2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	461a      	mov	r2, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f834 	bl	8001150 <HAL_CRCEx_Polynomial_Set>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e028      	b.n	8001144 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	795b      	ldrb	r3, [r3, #5]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	e004      	b.n	8001110 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6912      	ldr	r2, [r2, #16]
 800110e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	04c11db7 	.word	0x04c11db7

08001150 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001160:	231f      	movs	r3, #31
 8001162:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
 8001172:	e063      	b.n	800123c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001174:	bf00      	nop
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	613a      	str	r2, [r7, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <HAL_CRCEx_Polynomial_Set+0x44>
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b18      	cmp	r3, #24
 8001198:	d846      	bhi.n	8001228 <HAL_CRCEx_Polynomial_Set+0xd8>
 800119a:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <HAL_CRCEx_Polynomial_Set+0x50>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	0800122f 	.word	0x0800122f
 80011a4:	08001229 	.word	0x08001229
 80011a8:	08001229 	.word	0x08001229
 80011ac:	08001229 	.word	0x08001229
 80011b0:	08001229 	.word	0x08001229
 80011b4:	08001229 	.word	0x08001229
 80011b8:	08001229 	.word	0x08001229
 80011bc:	08001229 	.word	0x08001229
 80011c0:	0800121d 	.word	0x0800121d
 80011c4:	08001229 	.word	0x08001229
 80011c8:	08001229 	.word	0x08001229
 80011cc:	08001229 	.word	0x08001229
 80011d0:	08001229 	.word	0x08001229
 80011d4:	08001229 	.word	0x08001229
 80011d8:	08001229 	.word	0x08001229
 80011dc:	08001229 	.word	0x08001229
 80011e0:	08001211 	.word	0x08001211
 80011e4:	08001229 	.word	0x08001229
 80011e8:	08001229 	.word	0x08001229
 80011ec:	08001229 	.word	0x08001229
 80011f0:	08001229 	.word	0x08001229
 80011f4:	08001229 	.word	0x08001229
 80011f8:	08001229 	.word	0x08001229
 80011fc:	08001229 	.word	0x08001229
 8001200:	08001205 	.word	0x08001205
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b06      	cmp	r3, #6
 8001208:	d913      	bls.n	8001232 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800120e:	e010      	b.n	8001232 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d90f      	bls.n	8001236 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800121a:	e00c      	b.n	8001236 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	d90b      	bls.n	800123a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001226:	e008      	b.n	800123a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
        break;
 800122c:	e006      	b.n	800123c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800123a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 0118 	bic.w	r1, r3, #24
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800127a:	2b02      	cmp	r3, #2
 800127c:	d008      	beq.n	8001290 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2204      	movs	r2, #4
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e020      	b.n	80012d2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 020e 	bic.w	r2, r2, #14
 800129e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f202 	lsl.w	r2, r1, r2
 80012be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d005      	beq.n	8001300 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2204      	movs	r2, #4
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e027      	b.n	8001350 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020e 	bic.w	r2, r2, #14
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
    } 
  }
  return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e160      	b.n	800162e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8152 	beq.w	8001628 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 0201 	and.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b03      	cmp	r3, #3
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0203 	and.w	r2, r3, #3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80ac 	beq.w	8001628 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	4b5e      	ldr	r3, [pc, #376]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_GPIO_Init+0x2f0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e8:	4a59      	ldr	r2, [pc, #356]	; (8001650 <HAL_GPIO_Init+0x2f4>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001512:	d025      	beq.n	8001560 <HAL_GPIO_Init+0x204>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x2f8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d01f      	beq.n	800155c <HAL_GPIO_Init+0x200>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a4e      	ldr	r2, [pc, #312]	; (8001658 <HAL_GPIO_Init+0x2fc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d019      	beq.n	8001558 <HAL_GPIO_Init+0x1fc>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4d      	ldr	r2, [pc, #308]	; (800165c <HAL_GPIO_Init+0x300>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d013      	beq.n	8001554 <HAL_GPIO_Init+0x1f8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00d      	beq.n	8001550 <HAL_GPIO_Init+0x1f4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <HAL_GPIO_Init+0x308>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d007      	beq.n	800154c <HAL_GPIO_Init+0x1f0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x30c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001544:	2306      	movs	r3, #6
 8001546:	e00c      	b.n	8001562 <HAL_GPIO_Init+0x206>
 8001548:	2307      	movs	r3, #7
 800154a:	e00a      	b.n	8001562 <HAL_GPIO_Init+0x206>
 800154c:	2305      	movs	r3, #5
 800154e:	e008      	b.n	8001562 <HAL_GPIO_Init+0x206>
 8001550:	2304      	movs	r3, #4
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x206>
 8001554:	2303      	movs	r3, #3
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x206>
 8001558:	2302      	movs	r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x206>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x206>
 8001560:	2300      	movs	r3, #0
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001572:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x2f4>)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_GPIO_Init+0x310>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a4:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_GPIO_Init+0x310>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_GPIO_Init+0x310>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_GPIO_Init+0x310>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x310>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_GPIO_Init+0x310>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x310>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_GPIO_Init+0x310>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	f47f ae97 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48001000 	.word	0x48001000
 8001664:	48001400 	.word	0x48001400
 8001668:	48001800 	.word	0x48001800
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f902 	bl	80008c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f001 b83a 	b.w	800276a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 816f 	beq.w	80019ea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800170c:	4bb5      	ldr	r3, [pc, #724]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4bb2      	ldr	r3, [pc, #712]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d15c      	bne.n	80017de <HAL_RCC_OscConfig+0x10e>
 8001724:	4baf      	ldr	r3, [pc, #700]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d155      	bne.n	80017de <HAL_RCC_OscConfig+0x10e>
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001746:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	095b      	lsrs	r3, r3, #5
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x94>
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	e015      	b.n	8001790 <HAL_RCC_OscConfig+0xc0>
 8001764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001768:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001780:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800178c:	4b95      	ldr	r3, [pc, #596]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001794:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001798:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800179c:	fa92 f2a2 	rbit	r2, r2
 80017a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80017a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017a8:	fab2 f282 	clz	r2, r2
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	f042 0220 	orr.w	r2, r2, #32
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f002 021f 	and.w	r2, r2, #31
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8111 	beq.w	80019e8 <HAL_RCC_OscConfig+0x318>
 80017c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8108 	bne.w	80019e8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	f000 bfc6 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x12e>
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a7b      	ldr	r2, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e036      	b.n	800186c <HAL_RCC_OscConfig+0x19c>
 80017fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001802:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x158>
 800180e:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a74      	ldr	r2, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a71      	ldr	r2, [pc, #452]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e021      	b.n	800186c <HAL_RCC_OscConfig+0x19c>
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x184>
 800183a:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x19c>
 8001854:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d059      	beq.n	8001930 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fac2 	bl	8000e04 <HAL_GetTick>
 8001880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001886:	f7ff fabd 	bl	8000e04 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d902      	bls.n	800189c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	f000 bf67 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 800189c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80018b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0x1fe>
 80018c8:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x22a>
 80018ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001902:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001906:	fa92 f2a2 	rbit	r2, r2
 800190a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800190e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f002 021f 	and.w	r2, r2, #31
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ab      	beq.n	8001886 <HAL_RCC_OscConfig+0x1b6>
 800192e:	e05c      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fa68 	bl	8000e04 <HAL_GetTick>
 8001934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193a:	f7ff fa63 	bl	8000e04 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d902      	bls.n	8001950 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	f000 bf0d 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 8001950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001954:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001964:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0x2b2>
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x2de>
 8001982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001986:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800199e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_RCC_OscConfig+0x314>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80019b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80019ba:	fa92 f2a2 	rbit	r2, r2
 80019be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80019c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f002 021f 	and.w	r2, r2, #31
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ab      	bne.n	800193a <HAL_RCC_OscConfig+0x26a>
 80019e2:	e002      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
 80019e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 817f 	beq.w	8001cfe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a00:	4ba7      	ldr	r3, [pc, #668]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d173      	bne.n	8001b00 <HAL_RCC_OscConfig+0x430>
 8001a18:	4ba1      	ldr	r3, [pc, #644]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a24:	d16c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x430>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a38:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x386>
 8001a50:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x3ae>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a6e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a84:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a88:	fa92 f2a2 	rbit	r2, r2
 8001a8c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a90:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f002 021f 	and.w	r2, r2, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00a      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3f6>
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d002      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f000 be52 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	21f8      	movs	r1, #248	; 0xf8
 8001adc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ae4:	fa91 f1a1 	rbit	r1, r1
 8001ae8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001aec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001af0:	fab1 f181 	clz	r1, r1
 8001af4:	b2c9      	uxtb	r1, r1
 8001af6:	408b      	lsls	r3, r1
 8001af8:	4969      	ldr	r1, [pc, #420]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e0fe      	b.n	8001cfe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8088 	beq.w	8001c22 <HAL_RCC_OscConfig+0x552>
 8001b12:	2301      	movs	r3, #1
 8001b14:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f961 	bl	8000e04 <HAL_GetTick>
 8001b42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff f95c 	bl	8000e04 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d902      	bls.n	8001b5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	f000 be06 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b70:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4be>
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	e013      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4e6>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ba6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001bbc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001bc0:	fa92 f2a2 	rbit	r2, r2
 8001bc4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001bc8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0af      	beq.n	8001b48 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	21f8      	movs	r1, #248	; 0xf8
 8001bfe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c06:	fa91 f1a1 	rbit	r1, r1
 8001c0a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c12:	fab1 f181 	clz	r1, r1
 8001c16:	b2c9      	uxtb	r1, r1
 8001c18:	408b      	lsls	r3, r1
 8001c1a:	4921      	ldr	r1, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e06d      	b.n	8001cfe <HAL_RCC_OscConfig+0x62e>
 8001c22:	2301      	movs	r3, #1
 8001c24:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f8d9 	bl	8000e04 <HAL_GetTick>
 8001c52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff f8d4 	bl	8000e04 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d902      	bls.n	8001c6e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f000 bd7e 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5d4>
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_RCC_OscConfig+0x5d0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	e016      	b.n	8001ccc <HAL_RCC_OscConfig+0x5fc>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cbc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cc8:	4bbf      	ldr	r3, [pc, #764]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001cd2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cd6:	fa92 f2a2 	rbit	r2, r2
 8001cda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001cde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f042 0220 	orr.w	r2, r2, #32
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ac      	bne.n	8001c58 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8113 	beq.w	8001f3a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d07c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x74e>
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x8fc>)
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f859 	bl	8000e04 <HAL_GetTick>
 8001d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff f854 	bl	8000e04 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bcfe 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dda:	2102      	movs	r1, #2
 8001ddc:	6019      	str	r1, [r3, #0]
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f1a3 	rbit	r1, r3
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001df4:	6019      	str	r1, [r3, #0]
  return result;
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d09d      	beq.n	8001d58 <HAL_RCC_OscConfig+0x688>
 8001e1c:	e08d      	b.n	8001f3a <HAL_RCC_OscConfig+0x86a>
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e40:	601a      	str	r2, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x8fc>)
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7fe ffd0 	bl	8000e04 <HAL_GetTick>
 8001e64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7fe ffcb 	bl	8000e04 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d902      	bls.n	8001e80 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	f000 bc75 	b.w	800276a <HAL_RCC_OscConfig+0x109a>
 8001e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eac:	2202      	movs	r2, #2
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001eea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ef8:	2102      	movs	r1, #2
 8001efa:	6019      	str	r1, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f1a3 	rbit	r1, r3
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f12:	6019      	str	r1, [r3, #0]
  return result;
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d197      	bne.n	8001e6a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 81a5 	beq.w	800229a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_RCC_OscConfig+0x8f8>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f88:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_OscConfig+0x900>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d121      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_OscConfig+0x900>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x900>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe ff2c 	bl	8000e04 <HAL_GetTick>
 8001fac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e010      	b.n	8001fd4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7fe ff27 	bl	8000e04 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d908      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e3d1      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	10908120 	.word	0x10908120
 8001fd0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b8d      	ldr	r3, [pc, #564]	; (800220c <HAL_RCC_OscConfig+0xb3c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0e8      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x92e>
 8001ff0:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a86      	ldr	r2, [pc, #536]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e035      	b.n	800206a <HAL_RCC_OscConfig+0x99a>
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x958>
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	e020      	b.n	800206a <HAL_RCC_OscConfig+0x99a>
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x982>
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a74      	ldr	r2, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	4b72      	ldr	r3, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a71      	ldr	r2, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x99a>
 8002052:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a6e      	ldr	r2, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8081 	beq.w	800217e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe fec2 	bl	8000e04 <HAL_GetTick>
 8002080:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	e00b      	b.n	800209e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe febd 	bl	8000e04 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e365      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 800209e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020a6:	2202      	movs	r2, #2
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020ca:	2202      	movs	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fa93 f2a3 	rbit	r2, r3
 80020dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020e4:	601a      	str	r2, [r3, #0]
  return result;
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d102      	bne.n	800210a <HAL_RCC_OscConfig+0xa3a>
 8002104:	4b42      	ldr	r3, [pc, #264]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	e013      	b.n	8002132 <HAL_RCC_OscConfig+0xa62>
 800210a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002136:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800213a:	2102      	movs	r1, #2
 800213c:	6011      	str	r1, [r2, #0]
 800213e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002142:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	fa92 f1a2 	rbit	r1, r2
 800214c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002150:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002154:	6011      	str	r1, [r2, #0]
  return result;
 8002156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f002 021f 	and.w	r2, r2, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d084      	beq.n	8002086 <HAL_RCC_OscConfig+0x9b6>
 800217c:	e083      	b.n	8002286 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fe41 	bl	8000e04 <HAL_GetTick>
 8002182:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe fe3c 	bl	8000e04 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e2e4      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	fa93 f2a3 	rbit	r2, r3
 80021de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021e6:	601a      	str	r2, [r3, #0]
  return result;
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0xb44>
 8002206:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_OscConfig+0xb40>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	e017      	b.n	800223c <HAL_RCC_OscConfig+0xb6c>
 800220c:	40007000 	.word	0x40007000
 8002210:	40021000 	.word	0x40021000
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002224:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4bb3      	ldr	r3, [pc, #716]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002240:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002244:	2102      	movs	r1, #2
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800224c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	fa92 f1a2 	rbit	r1, r2
 8002256:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800225a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800225e:	6011      	str	r1, [r2, #0]
  return result;
 8002260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002264:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	fab2 f282 	clz	r2, r2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f002 021f 	and.w	r2, r2, #31
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f202 	lsl.w	r2, r1, r2
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d180      	bne.n	8002188 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002286:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b9e      	ldr	r3, [pc, #632]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a9d      	ldr	r2, [pc, #628]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 825e 	beq.w	8002768 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4b96      	ldr	r3, [pc, #600]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	f000 821f 	beq.w	80026f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	f040 8170 	bne.w	80025ac <HAL_RCC_OscConfig+0xedc>
 80022cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022f0:	601a      	str	r2, [r3, #0]
  return result;
 80022f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002306:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	461a      	mov	r2, r3
 800230e:	2300      	movs	r3, #0
 8002310:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fd77 	bl	8000e04 <HAL_GetTick>
 8002316:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	e009      	b.n	8002330 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fd72 	bl	8000e04 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e21c      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002350:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002354:	601a      	str	r2, [r3, #0]
  return result;
 8002356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800235e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0xcaa>
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	e027      	b.n	80023ca <HAL_RCC_OscConfig+0xcfa>
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023d6:	6011      	str	r1, [r2, #0]
 80023d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	fa92 f1a2 	rbit	r1, r2
 80023e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023ea:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023ee:	6011      	str	r1, [r2, #0]
  return result;
 80023f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023f4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 021f 	and.w	r2, r2, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d182      	bne.n	800231c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002416:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 800242c:	4313      	orrs	r3, r2
 800242e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002430:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a19      	ldr	r1, [r3, #32]
 8002444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	430b      	orrs	r3, r1
 8002452:	492d      	ldr	r1, [pc, #180]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002478:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800247c:	601a      	str	r2, [r3, #0]
  return result;
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002486:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	461a      	mov	r2, r3
 800249a:	2301      	movs	r3, #1
 800249c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fcb1 	bl	8000e04 <HAL_GetTick>
 80024a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a6:	e009      	b.n	80024bc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fcac 	bl	8000e04 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e156      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 80024bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0xe3c>
 8002500:	4b01      	ldr	r3, [pc, #4]	; (8002508 <HAL_RCC_OscConfig+0xe38>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e02a      	b.n	800255c <HAL_RCC_OscConfig+0xe8c>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002510:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002536:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800253a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002552:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b86      	ldr	r3, [pc, #536]	; (8002774 <HAL_RCC_OscConfig+0x10a4>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002560:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002564:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800256e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fa92 f1a2 	rbit	r1, r2
 8002578:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800257c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002580:	6011      	str	r1, [r2, #0]
  return result;
 8002582:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002586:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f43f af7f 	beq.w	80024a8 <HAL_RCC_OscConfig+0xdd8>
 80025aa:	e0dd      	b.n	8002768 <HAL_RCC_OscConfig+0x1098>
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fa93 f2a3 	rbit	r2, r3
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025d0:	601a      	str	r2, [r3, #0]
  return result;
 80025d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025da:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	2300      	movs	r3, #0
 80025f0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fc07 	bl	8000e04 <HAL_GetTick>
 80025f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	e009      	b.n	8002610 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fc02 	bl	8000e04 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0ac      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
 8002610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002614:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800263e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_RCC_OscConfig+0xf8a>
 8002654:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_OscConfig+0x10a4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e027      	b.n	80026aa <HAL_RCC_OscConfig+0xfda>
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002684:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x10a4>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b6:	6011      	str	r1, [r2, #0]
 80026b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fa92 f1a2 	rbit	r1, r2
 80026c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026ca:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026ce:	6011      	str	r1, [r2, #0]
  return result;
 80026d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026d4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d182      	bne.n	80025fc <HAL_RCC_OscConfig+0xf2c>
 80026f6:	e037      	b.n	8002768 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e02e      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_OscConfig+0x10a4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_OscConfig+0x10a4>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800271c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002720:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d117      	bne.n	8002764 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002734:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002738:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800273c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002740:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002748:	429a      	cmp	r2, r3
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800274c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002750:	f003 020f 	and.w	r2, r3, #15
 8002754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002758:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b09e      	sub	sp, #120	; 0x78
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e162      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	498b      	ldr	r1, [pc, #556]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e14a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	497f      	ldr	r1, [pc, #508]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80dc 	beq.w	80029a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d13c      	bne.n	800286e <HAL_RCC_ClockConfig+0xf6>
 80027f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_RCC_ClockConfig+0xa6>
 8002818:	4b6f      	ldr	r3, [pc, #444]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e00f      	b.n	800283e <HAL_RCC_ClockConfig+0xc6>
 800281e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
 8002832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283a:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002842:	65ba      	str	r2, [r7, #88]	; 0x58
 8002844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800284c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0220 	orr.w	r2, r2, #32
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d17b      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0f3      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d13c      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x178>
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x128>
 800289a:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_ClockConfig+0x148>
 80028a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
 80028ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b2:	643b      	str	r3, [r7, #64]	; 0x40
 80028b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028bc:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b2      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80028f0:	2302      	movs	r3, #2
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1a0>
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e00d      	b.n	8002934 <HAL_RCC_ClockConfig+0x1bc>
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2202      	movs	r2, #2
 8002936:	61ba      	str	r2, [r7, #24]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	617a      	str	r2, [r7, #20]
  return result;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e079      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	491a      	ldr	r1, [pc, #104]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe fa46 	bl	8000e04 <HAL_GetTick>
 8002978:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fa42 	bl	8000e04 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e061      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d214      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4906      	ldr	r1, [pc, #24]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e040      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	491a      	ldr	r1, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4912      	ldr	r1, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a1a:	f000 f829 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	22f0      	movs	r2, #240	; 0xf0
 8002a2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	60fa      	str	r2, [r7, #12]
  return result;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	40d3      	lsrs	r3, r2
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x2ec>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	fa21 f303 	lsr.w	r3, r1, r3
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCC_ClockConfig+0x2f0>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_RCC_ClockConfig+0x2f4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f994 	bl	8000d7c <HAL_InitTick>
  
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3778      	adds	r7, #120	; 0x78
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004828 	.word	0x08004828
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	20000010 	.word	0x20000010

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8002a9e:	e03f      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aa2:	623b      	str	r3, [r7, #32]
      break;
 8002aa4:	e03f      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002aac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ab0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	607a      	str	r2, [r7, #4]
  return result;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	40d3      	lsrs	r3, r2
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	e007      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	623b      	str	r3, [r7, #32]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b22:	623b      	str	r3, [r7, #32]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	372c      	adds	r7, #44	; 0x2c
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	08004840 	.word	0x08004840
 8002b40:	08004850 	.word	0x08004850

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b62:	f7ff ffef 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b70:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	603a      	str	r2, [r7, #0]
  return result;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004838 	.word	0x08004838

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ba6:	f7ff ffcd 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bb4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	603a      	str	r2, [r7, #0]
  return result;
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	40d3      	lsrs	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004838 	.word	0x08004838

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b092      	sub	sp, #72	; 0x48
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d4 	beq.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f8db 	bl	8000e04 <HAL_GetTick>
 8002c4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe f8d7 	bl	8000e04 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1d6      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8084 	beq.w	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d07c      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f887 	bl	8000e04 <HAL_GetTick>
 8002cf6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f883 	bl	8000e04 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e180      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
  return result;
 8002d28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d3e:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	e00d      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	10908100 	.word	0x10908100
 8002d50:	2302      	movs	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	4b9a      	ldr	r3, [pc, #616]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2202      	movs	r2, #2
 8002d62:	613a      	str	r2, [r7, #16]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0b7      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	498c      	ldr	r1, [pc, #560]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a87      	ldr	r2, [pc, #540]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dbc:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f023 0203 	bic.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	497f      	ldr	r1, [pc, #508]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4978      	ldr	r1, [pc, #480]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df8:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	4970      	ldr	r1, [pc, #448]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4969      	ldr	r1, [pc, #420]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e34:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	4961      	ldr	r1, [pc, #388]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f023 0220 	bic.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	495a      	ldr	r1, [pc, #360]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e70:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	4952      	ldr	r1, [pc, #328]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	494b      	ldr	r1, [pc, #300]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eac:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4943      	ldr	r1, [pc, #268]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	493c      	ldr	r1, [pc, #240]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	4934      	ldr	r1, [pc, #208]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	492d      	ldr	r1, [pc, #180]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	491e      	ldr	r1, [pc, #120]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	490f      	ldr	r1, [pc, #60]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fba:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	e002      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fce:	4913      	ldr	r1, [pc, #76]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	490b      	ldr	r1, [pc, #44]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	4904      	ldr	r1, [pc, #16]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300c:	4313      	orrs	r3, r2
 800300e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3748      	adds	r7, #72	; 0x48
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000

08003020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e049      	b.n	80030c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fd3a 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 fa1c 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04f      	b.n	8003188 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <HAL_TIM_Base_Start_IT+0xc4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d018      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_TIM_Base_Start_IT+0xc8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_TIM_Base_Start_IT+0xcc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d115      	bne.n	8003172 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_TIM_Base_Start_IT+0xdc>)
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d015      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d011      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e008      	b.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e000      	b.n	8003186 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40015000 	.word	0x40015000
 80031ac:	00010007 	.word	0x00010007

080031b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_TIM_Base_Stop_IT+0x48>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a1a      	ldr	r2, [r3, #32]
 80031de:	f240 4344 	movw	r3, #1092	; 0x444
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_Base_Stop_IT+0x48>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d122      	bne.n	800326a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d11b      	bne.n	800326a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0202 	mvn.w	r2, #2
 800323a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f905 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003256:	e005      	b.n	8003264 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8f7 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f908 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d122      	bne.n	80032be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d11b      	bne.n	80032be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0204 	mvn.w	r2, #4
 800328e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8db 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80032aa:	e005      	b.n	80032b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f8cd 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8de 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d122      	bne.n	8003312 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11b      	bne.n	8003312 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0208 	mvn.w	r2, #8
 80032e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2204      	movs	r2, #4
 80032e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8b1 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80032fe:	e005      	b.n	800330c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8a3 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8b4 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d122      	bne.n	8003366 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b10      	cmp	r3, #16
 800332c:	d11b      	bne.n	8003366 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f06f 0210 	mvn.w	r2, #16
 8003336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2208      	movs	r2, #8
 800333c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f887 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003352:	e005      	b.n	8003360 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f879 	bl	800344c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f88a 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10e      	bne.n	8003392 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0201 	mvn.w	r2, #1
 800338a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd faed 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d10e      	bne.n	80033be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f917 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f90a 	bl	8003600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d107      	bne.n	8003418 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f838 	bl	8003488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d10e      	bne.n	8003444 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d107      	bne.n	8003444 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8ca 	bl	80035d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a42      	ldr	r2, [pc, #264]	; (80035b8 <TIM_Base_SetConfig+0x11c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d00f      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <TIM_Base_SetConfig+0x120>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3e      	ldr	r2, [pc, #248]	; (80035c0 <TIM_Base_SetConfig+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3d      	ldr	r2, [pc, #244]	; (80035c4 <TIM_Base_SetConfig+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <TIM_Base_SetConfig+0x12c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a31      	ldr	r2, [pc, #196]	; (80035b8 <TIM_Base_SetConfig+0x11c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01f      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d01b      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <TIM_Base_SetConfig+0x120>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d017      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <TIM_Base_SetConfig+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <TIM_Base_SetConfig+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00f      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <TIM_Base_SetConfig+0x130>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00b      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <TIM_Base_SetConfig+0x134>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <TIM_Base_SetConfig+0x138>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x12c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <TIM_Base_SetConfig+0x11c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <TIM_Base_SetConfig+0x100>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <TIM_Base_SetConfig+0x128>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0x100>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <TIM_Base_SetConfig+0x130>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0x100>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <TIM_Base_SetConfig+0x134>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0x100>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <TIM_Base_SetConfig+0x138>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0x100>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <TIM_Base_SetConfig+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40015000 	.word	0x40015000
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800

080035d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e040      	b.n	80036a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fa68 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fbbc 	bl	8003dd0 <UART_SetConfig>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fd84 	bl	8004178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800367e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fe0b 	bl	80042bc <UART_CheckIdleState>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d178      	bne.n	80037ba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_UART_Transmit+0x24>
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e071      	b.n	80037bc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2221      	movs	r2, #33	; 0x21
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e6:	f7fd fb8d 	bl	8000e04 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x68>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003720:	e030      	b.n	8003784 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fe6d 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e03c      	b.n	80037bc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003754:	b292      	uxth	r2, r2
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	3302      	adds	r3, #2
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e008      	b.n	8003772 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b292      	uxth	r2, r2
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1c8      	bne.n	8003722 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fe36 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e005      	b.n	80037bc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0ba      	sub	sp, #232	; 0xe8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80037ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80037f2:	4013      	ands	r3, r2
 80037f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80037f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00f      	beq.n	800382c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 82ab 	beq.w	8003d78 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
      }
      return;
 800382a:	e2a5      	b.n	8003d78 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800382c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8117 	beq.w	8003a64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003842:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003846:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <HAL_UART_IRQHandler+0x298>)
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 810a 	beq.w	8003a64 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d011      	beq.n	8003880 <HAL_UART_IRQHandler+0xbc>
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d011      	beq.n	80038b0 <HAL_UART_IRQHandler+0xec>
 800388c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2202      	movs	r2, #2
 800389e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d011      	beq.n	80038e0 <HAL_UART_IRQHandler+0x11c>
 80038bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2204      	movs	r2, #4
 80038ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d017      	beq.n	800391c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	f043 0208 	orr.w	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_UART_IRQHandler+0x18a>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800393c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8211 	beq.w	8003d7c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800399a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800399e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04f      	beq.n	8003a46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd97 	bl	80044da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d141      	bne.n	8003a3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1d9      	bne.n	80039ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <HAL_UART_IRQHandler+0x29c>)
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fc5f 	bl	80012de <HAL_DMA_Abort_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a30:	4610      	mov	r0, r2
 8003a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e00f      	b.n	8003a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9b4 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	e00b      	b.n	8003a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9b0 	bl	8003da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e007      	b.n	8003a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9ac 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003a54:	e192      	b.n	8003d7c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a56:	bf00      	nop
    return;
 8003a58:	e190      	b.n	8003d7c <HAL_UART_IRQHandler+0x5b8>
 8003a5a:	bf00      	nop
 8003a5c:	04000120 	.word	0x04000120
 8003a60:	080045a3 	.word	0x080045a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f040 814b 	bne.w	8003d04 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8144 	beq.w	8003d04 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 813d 	beq.w	8003d04 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	f040 80b5 	bne.w	8003c0c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8164 	beq.w	8003d80 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	f080 815c 	bcs.w	8003d80 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f000 8086 	beq.w	8003bea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1da      	bne.n	8003ade <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e1      	bne.n	8003b28 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e4      	bne.n	8003baa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fb41 	bl	800126c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f8d7 	bl	8003db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c0a:	e0b9      	b.n	8003d80 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80ab 	beq.w	8003d84 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80a6 	beq.w	8003d84 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e4      	bne.n	8003c38 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3308      	adds	r3, #8
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c92:	633a      	str	r2, [r7, #48]	; 0x30
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e3      	bne.n	8003c6e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0310 	bic.w	r3, r3, #16
 8003cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e4      	bne.n	8003cba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f85b 	bl	8003db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d02:	e03f      	b.n	8003d84 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_UART_IRQHandler+0x56a>
 8003d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fc7b 	bl	8004622 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d2c:	e02d      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01c      	beq.n	8003d88 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
    }
    return;
 8003d56:	e017      	b.n	8003d88 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fc2c 	bl	80045ce <UART_EndTransmit_IT>
    return;
 8003d76:	e008      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d78:	bf00      	nop
 8003d7a:	e006      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d7c:	bf00      	nop
 8003d7e:	e004      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d88:	bf00      	nop
  }

}
 8003d8a:	37e8      	adds	r7, #232	; 0xe8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b92      	ldr	r3, [pc, #584]	; (8004044 <UART_SetConfig+0x274>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6979      	ldr	r1, [r7, #20]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a80      	ldr	r2, [pc, #512]	; (8004048 <UART_SetConfig+0x278>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d120      	bne.n	8003e8e <UART_SetConfig+0xbe>
 8003e4c:	4b7f      	ldr	r3, [pc, #508]	; (800404c <UART_SetConfig+0x27c>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d817      	bhi.n	8003e88 <UART_SetConfig+0xb8>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x90>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e7d 	.word	0x08003e7d
 8003e68:	08003e83 	.word	0x08003e83
 8003e6c:	08003e77 	.word	0x08003e77
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e0b5      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003e76:	2302      	movs	r3, #2
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e0b2      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e0af      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003e82:	2308      	movs	r3, #8
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e0ac      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e0a9      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6f      	ldr	r2, [pc, #444]	; (8004050 <UART_SetConfig+0x280>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d124      	bne.n	8003ee2 <UART_SetConfig+0x112>
 8003e98:	4b6c      	ldr	r3, [pc, #432]	; (800404c <UART_SetConfig+0x27c>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea4:	d011      	beq.n	8003eca <UART_SetConfig+0xfa>
 8003ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eaa:	d817      	bhi.n	8003edc <UART_SetConfig+0x10c>
 8003eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb0:	d011      	beq.n	8003ed6 <UART_SetConfig+0x106>
 8003eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb6:	d811      	bhi.n	8003edc <UART_SetConfig+0x10c>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <UART_SetConfig+0xf4>
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d006      	beq.n	8003ed0 <UART_SetConfig+0x100>
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x10c>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e08b      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e088      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e085      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e082      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003edc:	2310      	movs	r3, #16
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e07f      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <UART_SetConfig+0x284>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d124      	bne.n	8003f36 <UART_SetConfig+0x166>
 8003eec:	4b57      	ldr	r3, [pc, #348]	; (800404c <UART_SetConfig+0x27c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ef4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef8:	d011      	beq.n	8003f1e <UART_SetConfig+0x14e>
 8003efa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0x160>
 8003f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f04:	d011      	beq.n	8003f2a <UART_SetConfig+0x15a>
 8003f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f0a:	d811      	bhi.n	8003f30 <UART_SetConfig+0x160>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <UART_SetConfig+0x148>
 8003f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x154>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x160>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e061      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e05e      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e05b      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e058      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e055      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a47      	ldr	r2, [pc, #284]	; (8004058 <UART_SetConfig+0x288>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <UART_SetConfig+0x1ba>
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <UART_SetConfig+0x27c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4c:	d011      	beq.n	8003f72 <UART_SetConfig+0x1a2>
 8003f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0x1b4>
 8003f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f58:	d011      	beq.n	8003f7e <UART_SetConfig+0x1ae>
 8003f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5e:	d811      	bhi.n	8003f84 <UART_SetConfig+0x1b4>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x19c>
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x1a8>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x1b4>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e037      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e034      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e031      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e02e      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e02b      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a33      	ldr	r2, [pc, #204]	; (800405c <UART_SetConfig+0x28c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d124      	bne.n	8003fde <UART_SetConfig+0x20e>
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <UART_SetConfig+0x27c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0x1f6>
 8003fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa6:	d817      	bhi.n	8003fd8 <UART_SetConfig+0x208>
 8003fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x202>
 8003fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb2:	d811      	bhi.n	8003fd8 <UART_SetConfig+0x208>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0x1f0>
 8003fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x1fc>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x208>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e00d      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e00a      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e007      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e004      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e001      	b.n	8003fe2 <UART_SetConfig+0x212>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d16b      	bne.n	80040c4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d838      	bhi.n	8004064 <UART_SetConfig+0x294>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x228>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004065 	.word	0x08004065
 8004008:	08004033 	.word	0x08004033
 800400c:	08004065 	.word	0x08004065
 8004010:	08004065 	.word	0x08004065
 8004014:	08004065 	.word	0x08004065
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe fd9e 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e024      	b.n	800406e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fdbc 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e020      	b.n	800406e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <UART_SetConfig+0x290>)
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e01d      	b.n	800406e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fd1d 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8004036:	61b8      	str	r0, [r7, #24]
        break;
 8004038:	e019      	b.n	800406e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e015      	b.n	800406e <UART_SetConfig+0x29e>
 8004042:	bf00      	nop
 8004044:	efff69f3 	.word	0xefff69f3
 8004048:	40013800 	.word	0x40013800
 800404c:	40021000 	.word	0x40021000
 8004050:	40004400 	.word	0x40004400
 8004054:	40004800 	.word	0x40004800
 8004058:	40004c00 	.word	0x40004c00
 800405c:	40005000 	.word	0x40005000
 8004060:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77bb      	strb	r3, [r7, #30]
        break;
 800406c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d073      	beq.n	800415c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	005a      	lsls	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d916      	bls.n	80040be <UART_SetConfig+0x2ee>
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004096:	d212      	bcs.n	80040be <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f023 030f 	bic.w	r3, r3, #15
 80040a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	89fb      	ldrh	r3, [r7, #14]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	89fa      	ldrh	r2, [r7, #14]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	e04e      	b.n	800415c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	77bb      	strb	r3, [r7, #30]
 80040c2:	e04b      	b.n	800415c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d827      	bhi.n	800411a <UART_SetConfig+0x34a>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x300>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800411b 	.word	0x0800411b
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	08004113 	.word	0x08004113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7fe fd32 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80040f8:	61b8      	str	r0, [r7, #24]
        break;
 80040fa:	e013      	b.n	8004124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040fc:	f7fe fd50 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004100:	61b8      	str	r0, [r7, #24]
        break;
 8004102:	e00f      	b.n	8004124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <UART_SetConfig+0x3a4>)
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e00c      	b.n	8004124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7fe fcb1 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 800410e:	61b8      	str	r0, [r7, #24]
        break;
 8004110:	e008      	b.n	8004124 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	61bb      	str	r3, [r7, #24]
        break;
 8004118:	e004      	b.n	8004124 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	77bb      	strb	r3, [r7, #30]
        break;
 8004122:	bf00      	nop
    }

    if (pclk != 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085a      	lsrs	r2, r3, #1
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d909      	bls.n	8004158 <UART_SetConfig+0x388>
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414a:	d205      	bcs.n	8004158 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e001      	b.n	800415c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004168:	7fbb      	ldrb	r3, [r7, #30]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	007a1200 	.word	0x007a1200

08004178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01a      	beq.n	800428e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004276:	d10a      	bne.n	800428e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b098      	sub	sp, #96	; 0x60
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042cc:	f7fc fd9a 	bl	8000e04 <HAL_GetTick>
 80042d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d12e      	bne.n	800433e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e8:	2200      	movs	r2, #0
 80042ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f88c 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d021      	beq.n	800433e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
 800431a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800431e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e6      	bne.n	80042fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e062      	b.n	8004404 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d149      	bne.n	80043e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	2200      	movs	r2, #0
 8004356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f856 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03c      	beq.n	80043e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	623b      	str	r3, [r7, #32]
   return(result);
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
 8004386:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	617b      	str	r3, [r7, #20]
   return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e011      	b.n	8004404 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3758      	adds	r7, #88	; 0x58
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	e049      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d045      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fc fced 	bl	8000e04 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <UART_WaitOnFlagUntilTimeout+0x30>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e048      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d031      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d110      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f838 	bl	80044da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2208      	movs	r2, #8
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e029      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d111      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f81e 	bl	80044da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e00f      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d0a6      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044da:	b480      	push	{r7}
 80044dc:	b095      	sub	sp, #84	; 0x54
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
 8004502:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	61fb      	str	r3, [r7, #28]
   return(result);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	64bb      	str	r3, [r7, #72]	; 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004534:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	2b01      	cmp	r3, #1
 800454e:	d118      	bne.n	8004582 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	60bb      	str	r3, [r7, #8]
   return(result);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0310 	bic.w	r3, r3, #16
 8004564:	647b      	str	r3, [r7, #68]	; 0x44
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6979      	ldr	r1, [r7, #20]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	613b      	str	r3, [r7, #16]
   return(result);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e6      	bne.n	8004550 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004596:	bf00      	nop
 8004598:	3754      	adds	r7, #84	; 0x54
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff fbef 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e6      	bne.n	80045d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fbbb 	bl	8003d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461a:	bf00      	nop
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <_strtol_l.constprop.0>:
 8004638:	2b01      	cmp	r3, #1
 800463a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463e:	d001      	beq.n	8004644 <_strtol_l.constprop.0+0xc>
 8004640:	2b24      	cmp	r3, #36	; 0x24
 8004642:	d906      	bls.n	8004652 <_strtol_l.constprop.0+0x1a>
 8004644:	f000 f8ae 	bl	80047a4 <__errno>
 8004648:	2316      	movs	r3, #22
 800464a:	6003      	str	r3, [r0, #0]
 800464c:	2000      	movs	r0, #0
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004738 <_strtol_l.constprop.0+0x100>
 8004656:	460d      	mov	r5, r1
 8004658:	462e      	mov	r6, r5
 800465a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800465e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004662:	f017 0708 	ands.w	r7, r7, #8
 8004666:	d1f7      	bne.n	8004658 <_strtol_l.constprop.0+0x20>
 8004668:	2c2d      	cmp	r4, #45	; 0x2d
 800466a:	d132      	bne.n	80046d2 <_strtol_l.constprop.0+0x9a>
 800466c:	782c      	ldrb	r4, [r5, #0]
 800466e:	2701      	movs	r7, #1
 8004670:	1cb5      	adds	r5, r6, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d05b      	beq.n	800472e <_strtol_l.constprop.0+0xf6>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d109      	bne.n	800468e <_strtol_l.constprop.0+0x56>
 800467a:	2c30      	cmp	r4, #48	; 0x30
 800467c:	d107      	bne.n	800468e <_strtol_l.constprop.0+0x56>
 800467e:	782c      	ldrb	r4, [r5, #0]
 8004680:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004684:	2c58      	cmp	r4, #88	; 0x58
 8004686:	d14d      	bne.n	8004724 <_strtol_l.constprop.0+0xec>
 8004688:	786c      	ldrb	r4, [r5, #1]
 800468a:	2310      	movs	r3, #16
 800468c:	3502      	adds	r5, #2
 800468e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004692:	f108 38ff 	add.w	r8, r8, #4294967295
 8004696:	f04f 0e00 	mov.w	lr, #0
 800469a:	fbb8 f9f3 	udiv	r9, r8, r3
 800469e:	4676      	mov	r6, lr
 80046a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80046a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046a8:	f1bc 0f09 	cmp.w	ip, #9
 80046ac:	d816      	bhi.n	80046dc <_strtol_l.constprop.0+0xa4>
 80046ae:	4664      	mov	r4, ip
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	dd24      	ble.n	80046fe <_strtol_l.constprop.0+0xc6>
 80046b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80046b8:	d008      	beq.n	80046cc <_strtol_l.constprop.0+0x94>
 80046ba:	45b1      	cmp	r9, r6
 80046bc:	d31c      	bcc.n	80046f8 <_strtol_l.constprop.0+0xc0>
 80046be:	d101      	bne.n	80046c4 <_strtol_l.constprop.0+0x8c>
 80046c0:	45a2      	cmp	sl, r4
 80046c2:	db19      	blt.n	80046f8 <_strtol_l.constprop.0+0xc0>
 80046c4:	fb06 4603 	mla	r6, r6, r3, r4
 80046c8:	f04f 0e01 	mov.w	lr, #1
 80046cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046d0:	e7e8      	b.n	80046a4 <_strtol_l.constprop.0+0x6c>
 80046d2:	2c2b      	cmp	r4, #43	; 0x2b
 80046d4:	bf04      	itt	eq
 80046d6:	782c      	ldrbeq	r4, [r5, #0]
 80046d8:	1cb5      	addeq	r5, r6, #2
 80046da:	e7ca      	b.n	8004672 <_strtol_l.constprop.0+0x3a>
 80046dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80046e0:	f1bc 0f19 	cmp.w	ip, #25
 80046e4:	d801      	bhi.n	80046ea <_strtol_l.constprop.0+0xb2>
 80046e6:	3c37      	subs	r4, #55	; 0x37
 80046e8:	e7e2      	b.n	80046b0 <_strtol_l.constprop.0+0x78>
 80046ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80046ee:	f1bc 0f19 	cmp.w	ip, #25
 80046f2:	d804      	bhi.n	80046fe <_strtol_l.constprop.0+0xc6>
 80046f4:	3c57      	subs	r4, #87	; 0x57
 80046f6:	e7db      	b.n	80046b0 <_strtol_l.constprop.0+0x78>
 80046f8:	f04f 3eff 	mov.w	lr, #4294967295
 80046fc:	e7e6      	b.n	80046cc <_strtol_l.constprop.0+0x94>
 80046fe:	f1be 3fff 	cmp.w	lr, #4294967295
 8004702:	d105      	bne.n	8004710 <_strtol_l.constprop.0+0xd8>
 8004704:	2322      	movs	r3, #34	; 0x22
 8004706:	6003      	str	r3, [r0, #0]
 8004708:	4646      	mov	r6, r8
 800470a:	b942      	cbnz	r2, 800471e <_strtol_l.constprop.0+0xe6>
 800470c:	4630      	mov	r0, r6
 800470e:	e79e      	b.n	800464e <_strtol_l.constprop.0+0x16>
 8004710:	b107      	cbz	r7, 8004714 <_strtol_l.constprop.0+0xdc>
 8004712:	4276      	negs	r6, r6
 8004714:	2a00      	cmp	r2, #0
 8004716:	d0f9      	beq.n	800470c <_strtol_l.constprop.0+0xd4>
 8004718:	f1be 0f00 	cmp.w	lr, #0
 800471c:	d000      	beq.n	8004720 <_strtol_l.constprop.0+0xe8>
 800471e:	1e69      	subs	r1, r5, #1
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	e7f3      	b.n	800470c <_strtol_l.constprop.0+0xd4>
 8004724:	2430      	movs	r4, #48	; 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1b1      	bne.n	800468e <_strtol_l.constprop.0+0x56>
 800472a:	2308      	movs	r3, #8
 800472c:	e7af      	b.n	800468e <_strtol_l.constprop.0+0x56>
 800472e:	2c30      	cmp	r4, #48	; 0x30
 8004730:	d0a5      	beq.n	800467e <_strtol_l.constprop.0+0x46>
 8004732:	230a      	movs	r3, #10
 8004734:	e7ab      	b.n	800468e <_strtol_l.constprop.0+0x56>
 8004736:	bf00      	nop
 8004738:	08004861 	.word	0x08004861

0800473c <strtol>:
 800473c:	4613      	mov	r3, r2
 800473e:	460a      	mov	r2, r1
 8004740:	4601      	mov	r1, r0
 8004742:	4802      	ldr	r0, [pc, #8]	; (800474c <strtol+0x10>)
 8004744:	6800      	ldr	r0, [r0, #0]
 8004746:	f7ff bf77 	b.w	8004638 <_strtol_l.constprop.0>
 800474a:	bf00      	nop
 800474c:	20000064 	.word	0x20000064

08004750 <memset>:
 8004750:	4402      	add	r2, r0
 8004752:	4603      	mov	r3, r0
 8004754:	4293      	cmp	r3, r2
 8004756:	d100      	bne.n	800475a <memset+0xa>
 8004758:	4770      	bx	lr
 800475a:	f803 1b01 	strb.w	r1, [r3], #1
 800475e:	e7f9      	b.n	8004754 <memset+0x4>

08004760 <strcat>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4602      	mov	r2, r0
 8004764:	7814      	ldrb	r4, [r2, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	3201      	adds	r2, #1
 800476a:	2c00      	cmp	r4, #0
 800476c:	d1fa      	bne.n	8004764 <strcat+0x4>
 800476e:	3b01      	subs	r3, #1
 8004770:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004774:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004778:	2a00      	cmp	r2, #0
 800477a:	d1f9      	bne.n	8004770 <strcat+0x10>
 800477c:	bd10      	pop	{r4, pc}

0800477e <strncpy>:
 800477e:	b510      	push	{r4, lr}
 8004780:	3901      	subs	r1, #1
 8004782:	4603      	mov	r3, r0
 8004784:	b132      	cbz	r2, 8004794 <strncpy+0x16>
 8004786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800478a:	f803 4b01 	strb.w	r4, [r3], #1
 800478e:	3a01      	subs	r2, #1
 8004790:	2c00      	cmp	r4, #0
 8004792:	d1f7      	bne.n	8004784 <strncpy+0x6>
 8004794:	441a      	add	r2, r3
 8004796:	2100      	movs	r1, #0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <strncpy+0x20>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <strncpy+0x1a>

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000064 	.word	0x20000064

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4d0d      	ldr	r5, [pc, #52]	; (80047e8 <__libc_init_array+0x38>)
 80047b4:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b6:	1b64      	subs	r4, r4, r5
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	2600      	movs	r6, #0
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	4d0b      	ldr	r5, [pc, #44]	; (80047f0 <__libc_init_array+0x40>)
 80047c2:	4c0c      	ldr	r4, [pc, #48]	; (80047f4 <__libc_init_array+0x44>)
 80047c4:	f000 f820 	bl	8004808 <_init>
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	2600      	movs	r6, #0
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08004964 	.word	0x08004964
 80047ec:	08004964 	.word	0x08004964
 80047f0:	08004964 	.word	0x08004964
 80047f4:	08004968 	.word	0x08004968

080047f8 <strcpy>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047fe:	f803 2b01 	strb.w	r2, [r3], #1
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1f9      	bne.n	80047fa <strcpy+0x2>
 8004806:	4770      	bx	lr

08004808 <_init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr

08004814 <_fini>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr
