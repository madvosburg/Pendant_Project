
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003850  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ab20  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001af0  00000000  00000000  0002ab9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000790  00000000  00000000  0002c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ca  00000000  00000000  0002ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fac5  00000000  00000000  0002d3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b224  00000000  00000000  0004ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfcdc  00000000  00000000  000580d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d60  00000000  00000000  00117db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00119b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039cc 	.word	0x080039cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080039cc 	.word	0x080039cc

080001d4 <sendData>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
int i = 0;

void sendData (uint8_t *data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, data, 1, 1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	2201      	movs	r2, #1
 80001e2:	6879      	ldr	r1, [r7, #4]
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <sendData+0x20>)
 80001e6:	f002 fc01 	bl	80029ec <HAL_UART_Transmit>
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fb1a 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f824 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f8d6 	bl	80003b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000208:	f000 f8a4 	bl	8000354 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800020c:	f000 f872 	bl	80002f4 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(i=5; i<100; i++){
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0x4c>)
 8000212:	2205      	movs	r2, #5
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	e010      	b.n	800023a <main+0x42>
		  TxData[0] = i;
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0x4c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <main+0x50>)
 8000220:	701a      	strb	r2, [r3, #0]
		  sendData(TxData);
 8000222:	4809      	ldr	r0, [pc, #36]	; (8000248 <main+0x50>)
 8000224:	f7ff ffd6 	bl	80001d4 <sendData>
		  HAL_Delay(900);
 8000228:	f44f 7061 	mov.w	r0, #900	; 0x384
 800022c:	f000 fb68 	bl	8000900 <HAL_Delay>
	  for(i=5; i<100; i++){
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x4c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a03      	ldr	r2, [pc, #12]	; (8000244 <main+0x4c>)
 8000238:	6013      	str	r3, [r2, #0]
 800023a:	4b02      	ldr	r3, [pc, #8]	; (8000244 <main+0x4c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b63      	cmp	r3, #99	; 0x63
 8000240:	ddea      	ble.n	8000218 <main+0x20>
 8000242:	e7e5      	b.n	8000210 <main+0x18>
 8000244:	20000144 	.word	0x20000144
 8000248:	20000138 	.word	0x20000138

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0a6      	sub	sp, #152	; 0x98
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fb89 	bl	8003972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2258      	movs	r2, #88	; 0x58
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fb7b 	bl	8003972 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000294:	4618      	mov	r0, r3
 8000296:	f000 feb3 	bl	8001000 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 f986 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a8:	2300      	movs	r3, #0
 80002aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fef2 	bl	80020a8 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f971 	bl	80005b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80002ce:	2303      	movs	r3, #3
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 f919 	bl	8002514 <HAL_RCCEx_PeriphCLKConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002e8:	f000 f962 	bl	80005b0 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3798      	adds	r7, #152	; 0x98
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART1_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART1_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART1_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART1_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART1_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART1_UART_Init+0x58>)
 8000338:	f002 fb0a 	bl	8002950 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f935 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40013800 	.word	0x40013800

08000354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_USART2_UART_Init+0x58>)
 800035a:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <MX_USART2_UART_Init+0x5c>)
 800035c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_USART2_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_USART2_UART_Init+0x58>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_USART2_UART_Init+0x58>)
 8000398:	f002 fada 	bl	8002950 <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003a2:	f000 f905 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000b0 	.word	0x200000b0
 80003b0:	40004400 	.word	0x40004400

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ca:	4b39      	ldr	r3, [pc, #228]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a38      	ldr	r2, [pc, #224]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b33      	ldr	r3, [pc, #204]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <MX_GPIO_Init+0xfc>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <MX_GPIO_Init+0xfc>)
 8000400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <MX_GPIO_Init+0xfc>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f000 fda6 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000420:	230c      	movs	r3, #12
 8000422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000424:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	4619      	mov	r1, r3
 8000434:	481f      	ldr	r0, [pc, #124]	; (80004b4 <MX_GPIO_Init+0x100>)
 8000436:	f000 fc0f 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800043a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800043e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000440:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	4819      	ldr	r0, [pc, #100]	; (80004b8 <MX_GPIO_Init+0x104>)
 8000452:	f000 fc01 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fbf1 	bl	8000c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	2008      	movs	r0, #8
 800047c:	f000 fb3f 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000480:	2008      	movs	r0, #8
 8000482:	f000 fb58 	bl	8000b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2009      	movs	r0, #9
 800048c:	f000 fb37 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000490:	2009      	movs	r0, #9
 8000492:	f000 fb50 	bl	8000b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2028      	movs	r0, #40	; 0x28
 800049c:	f000 fb2f 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004a0:	2028      	movs	r0, #40	; 0x28
 80004a2:	f000 fb48 	bl	8000b36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000800 	.word	0x48000800
 80004b8:	48000400 	.word	0x48000400

080004bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 80004c6:	f000 fa0f 	bl	80008e8 <HAL_GetTick>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4a35      	ldr	r2, [pc, #212]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80004ce:	6013      	str	r3, [r2, #0]
  if (GPIO_Pin == GPIO_PIN_2 && (currentMillis - previousMillis > 70))
 80004d0:	88fb      	ldrh	r3, [r7, #6]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d115      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x46>
 80004d6:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	2b46      	cmp	r3, #70	; 0x46
 80004e2:	d90e      	bls.n	8000502 <HAL_GPIO_EXTI_Callback+0x46>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80004e4:	2102      	movs	r1, #2
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f000 fd57 	bl	8000f9c <HAL_GPIO_TogglePin>
    TxData[0] = 1;
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
    sendData(TxData);
 80004f4:	482d      	ldr	r0, [pc, #180]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 80004f6:	f7ff fe6d 	bl	80001d4 <sendData>
    previousMillis = currentMillis;
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a2a      	ldr	r2, [pc, #168]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000500:	6013      	str	r3, [r2, #0]
   // TxData[0] = 0;
  }
  if (GPIO_Pin == GPIO_PIN_3 && (currentMillis - previousMillis > 70))
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b08      	cmp	r3, #8
 8000506:	d115      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x78>
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	2b46      	cmp	r3, #70	; 0x46
 8000514:	d90e      	bls.n	8000534 <HAL_GPIO_EXTI_Callback+0x78>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000516:	2102      	movs	r1, #2
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f000 fd3e 	bl	8000f9c <HAL_GPIO_TogglePin>
    TxData[0] = 2;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 8000522:	2202      	movs	r2, #2
 8000524:	701a      	strb	r2, [r3, #0]
    sendData(TxData);
 8000526:	4821      	ldr	r0, [pc, #132]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 8000528:	f7ff fe54 	bl	80001d4 <sendData>
    previousMillis = currentMillis;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000532:	6013      	str	r3, [r2, #0]
  //  TxData[0] = 0;
  }
  if (GPIO_Pin == GPIO_PIN_14 && (currentMillis - previousMillis > 70))
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053a:	d115      	bne.n	8000568 <HAL_GPIO_EXTI_Callback+0xac>
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	2b46      	cmp	r3, #70	; 0x46
 8000548:	d90e      	bls.n	8000568 <HAL_GPIO_EXTI_Callback+0xac>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800054a:	2102      	movs	r1, #2
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f000 fd24 	bl	8000f9c <HAL_GPIO_TogglePin>
    TxData[0] = 3;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 8000556:	2203      	movs	r2, #3
 8000558:	701a      	strb	r2, [r3, #0]
    sendData(TxData);
 800055a:	4814      	ldr	r0, [pc, #80]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 800055c:	f7ff fe3a 	bl	80001d4 <sendData>
    previousMillis = currentMillis;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000566:	6013      	str	r3, [r2, #0]
   // TxData[0] = 0;
  }
  if (GPIO_Pin == GPIO_PIN_15 && (currentMillis - previousMillis > 70))
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800056e:	d115      	bne.n	800059c <HAL_GPIO_EXTI_Callback+0xe0>
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	2b46      	cmp	r3, #70	; 0x46
 800057c:	d90e      	bls.n	800059c <HAL_GPIO_EXTI_Callback+0xe0>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800057e:	2102      	movs	r1, #2
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fd0a 	bl	8000f9c <HAL_GPIO_TogglePin>
    TxData[0] = 4;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 800058a:	2204      	movs	r2, #4
 800058c:	701a      	strb	r2, [r3, #0]
    sendData(TxData);
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <HAL_GPIO_EXTI_Callback+0xf0>)
 8000590:	f7ff fe20 	bl	80001d4 <sendData>
    previousMillis = currentMillis;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xec>)
 800059a:	6013      	str	r3, [r2, #0]
  //  TxData[0] = 0;
  }
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000140 	.word	0x20000140
 80005a8:	2000013c 	.word	0x2000013c
 80005ac:	20000138 	.word	0x20000138

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <Error_Handler+0x8>
	...

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_MspInit+0x44>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_MspInit+0x44>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_MspInit+0x44>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_MspInit+0x44>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a36      	ldr	r2, [pc, #216]	; (80006fc <HAL_UART_MspInit+0xf8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d130      	bne.n	8000688 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a35      	ldr	r2, [pc, #212]	; (8000700 <HAL_UART_MspInit+0xfc>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <HAL_UART_MspInit+0xfc>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000656:	2330      	movs	r3, #48	; 0x30
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000666:	2307      	movs	r3, #7
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <HAL_UART_MspInit+0x100>)
 8000672:	f000 faf1 	bl	8000c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2025      	movs	r0, #37	; 0x25
 800067c:	f000 fa3f 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000680:	2025      	movs	r0, #37	; 0x25
 8000682:	f000 fa58 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000686:	e035      	b.n	80006f4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_UART_MspInit+0x104>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d130      	bne.n	80006f4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <HAL_UART_MspInit+0xfc>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_UART_MspInit+0xfc>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_UART_MspInit+0xfc>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <HAL_UART_MspInit+0xfc>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_UART_MspInit+0xfc>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006c2:	230c      	movs	r3, #12
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d2:	2307      	movs	r3, #7
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 faba 	bl	8000c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2026      	movs	r0, #38	; 0x26
 80006ea:	f000 fa08 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ee:	2026      	movs	r0, #38	; 0x26
 80006f0:	f000 fa21 	bl	8000b36 <HAL_NVIC_EnableIRQ>
}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40013800 	.word	0x40013800
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800
 8000708:	40004400 	.word	0x40004400

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8b2 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000764:	2004      	movs	r0, #4
 8000766:	f000 fc33 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000772:	2008      	movs	r0, #8
 8000774:	f000 fc2c 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <USART1_IRQHandler+0x10>)
 8000782:	f002 f9bd 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028

08000790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USART2_IRQHandler+0x10>)
 8000796:	f002 f9b3 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000b0 	.word	0x200000b0

080007a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80007a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007ac:	f000 fc10 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80007b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007b4:	f000 fc0c 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff ffea 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f003 f8b9 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000812:	f7ff fcf1 	bl	80001f8 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000818:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	2000014c 	.word	0x2000014c

08000830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_2_IRQHandler>
	...

08000834 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_Init+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_Init+0x28>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f94f 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f808 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff feb4 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x54>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x58>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000876:	fbb3 f3f1 	udiv	r3, r3, r1
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f967 	bl	8000b52 <HAL_SYSTICK_Config>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e00e      	b.n	80008ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d80a      	bhi.n	80008aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f000 f92f 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <HAL_InitTick+0x5c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000148 	.word	0x20000148

080008e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000148 	.word	0x20000148

08000900 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d008      	beq.n	8000b8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2204      	movs	r2, #4
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e020      	b.n	8000bd0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 020e 	bic.w	r2, r2, #14
 8000b9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d005      	beq.n	8000bfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e027      	b.n	8000c4e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 020e 	bic.w	r2, r2, #14
 8000c0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	4798      	blx	r3
    } 
  }
  return status;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e160      	b.n	8000f2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8152 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x40>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d017      	beq.n	8000d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0203 	and.w	r2, r3, #3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80ac 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b5e      	ldr	r3, [pc, #376]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a5d      	ldr	r2, [pc, #372]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de4:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e0e:	d025      	beq.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4f      	ldr	r2, [pc, #316]	; (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d01f      	beq.n	8000e58 <HAL_GPIO_Init+0x200>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d019      	beq.n	8000e54 <HAL_GPIO_Init+0x1fc>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4d      	ldr	r2, [pc, #308]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d013      	beq.n	8000e50 <HAL_GPIO_Init+0x1f8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d00d      	beq.n	8000e4c <HAL_GPIO_Init+0x1f4>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <HAL_GPIO_Init+0x308>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d007      	beq.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_GPIO_Init+0x30c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <HAL_GPIO_Init+0x1ec>
 8000e40:	2306      	movs	r3, #6
 8000e42:	e00c      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e44:	2307      	movs	r3, #7
 8000e46:	e00a      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e48:	2305      	movs	r3, #5
 8000e4a:	e008      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e50:	2303      	movs	r3, #3
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_Init+0x206>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e6e:	4937      	ldr	r1, [pc, #220]	; (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ea0:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eca:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3301      	adds	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f47f ae97 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000c00 	.word	0x48000c00
 8000f5c:	48001000 	.word	0x48001000
 8000f60:	48001400 	.word	0x48001400
 8000f64:	48001800 	.word	0x48001800
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43d9      	mvns	r1, r3
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa64 	bl	80004bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001006:	af00      	add	r7, sp, #0
 8001008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800100c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	f001 b83a 	b.w	800209a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 816f 	beq.w	800131a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800103c:	4bb5      	ldr	r3, [pc, #724]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00c      	beq.n	8001062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4bb2      	ldr	r3, [pc, #712]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d15c      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001054:	4baf      	ldr	r3, [pc, #700]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d155      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x94>
 800108e:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e015      	b.n	80010c0 <HAL_RCC_OscConfig+0xc0>
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010bc:	4b95      	ldr	r3, [pc, #596]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010cc:	fa92 f2a2 	rbit	r2, r2
 80010d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8111 	beq.w	8001318 <HAL_RCC_OscConfig+0x318>
 80010f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8108 	bne.w	8001318 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	f000 bfc6 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x12e>
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a7b      	ldr	r2, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e036      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 800112e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x158>
 800113e:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a74      	ldr	r2, [pc, #464]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e021      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800115c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x184>
 800116a:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a69      	ldr	r2, [pc, #420]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a66      	ldr	r2, [pc, #408]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a62      	ldr	r2, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d059      	beq.n	8001260 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb9c 	bl	80008e8 <HAL_GetTick>
 80011b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb97 	bl	80008e8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d902      	bls.n	80011cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f000 bf67 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 80011cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_OscConfig+0x1fe>
 80011f8:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x22a>
 80011fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001202:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001216:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800121a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800122e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001232:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001236:	fa92 f2a2 	rbit	r2, r2
 800123a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800123e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001242:	fab2 f282 	clz	r2, r2
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ab      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1b6>
 800125e:	e05c      	b.n	800131a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fb42 	bl	80008e8 <HAL_GetTick>
 8001264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126a:	f7ff fb3d 	bl	80008e8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d902      	bls.n	8001280 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	f000 bf0d 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001294:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d102      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2b2>
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x2de>
 80012b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_RCC_OscConfig+0x314>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012ea:	fa92 f2a2 	rbit	r2, r2
 80012ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f002 021f 	and.w	r2, r2, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ab      	bne.n	800126a <HAL_RCC_OscConfig+0x26a>
 8001312:	e002      	b.n	800131a <HAL_RCC_OscConfig+0x31a>
 8001314:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 817f 	beq.w	800162e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001330:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133c:	4ba4      	ldr	r3, [pc, #656]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d173      	bne.n	8001430 <HAL_RCC_OscConfig+0x430>
 8001348:	4ba1      	ldr	r3, [pc, #644]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001354:	d16c      	bne.n	8001430 <HAL_RCC_OscConfig+0x430>
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001368:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x386>
 8001380:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	e013      	b.n	80013ae <HAL_RCC_OscConfig+0x3ae>
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800139e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2202      	movs	r2, #2
 80013b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013b8:	fa92 f2a2 	rbit	r2, r2
 80013bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013c4:	fab2 f282 	clz	r2, r2
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	f042 0220 	orr.w	r2, r2, #32
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f002 021f 	and.w	r2, r2, #31
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3f6>
 80013e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d002      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f000 be52 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001402:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	21f8      	movs	r1, #248	; 0xf8
 800140c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001414:	fa91 f1a1 	rbit	r1, r1
 8001418:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800141c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001420:	fab1 f181 	clz	r1, r1
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	408b      	lsls	r3, r1
 8001428:	4969      	ldr	r1, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e0fe      	b.n	800162e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8088 	beq.w	8001552 <HAL_RCC_OscConfig+0x552>
 8001442:	2301      	movs	r3, #1
 8001444:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001454:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	2301      	movs	r3, #1
 800146c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa3b 	bl	80008e8 <HAL_GetTick>
 8001472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fa36 	bl	80008e8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	f000 be06 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d102      	bne.n	80014be <HAL_RCC_OscConfig+0x4be>
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	e013      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e6>
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014d0:	2302      	movs	r3, #2
 80014d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	2202      	movs	r2, #2
 80014e8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014fc:	fab2 f282 	clz	r2, r2
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f002 021f 	and.w	r2, r2, #31
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0af      	beq.n	8001478 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	21f8      	movs	r1, #248	; 0xf8
 800152e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001536:	fa91 f1a1 	rbit	r1, r1
 800153a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800153e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001542:	fab1 f181 	clz	r1, r1
 8001546:	b2c9      	uxtb	r1, r1
 8001548:	408b      	lsls	r3, r1
 800154a:	4921      	ldr	r1, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e06d      	b.n	800162e <HAL_RCC_OscConfig+0x62e>
 8001552:	2301      	movs	r3, #1
 8001554:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001572:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	461a      	mov	r2, r3
 800157a:	2300      	movs	r3, #0
 800157c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff f9b3 	bl	80008e8 <HAL_GetTick>
 8001582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff f9ae 	bl	80008e8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d902      	bls.n	800159e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	f000 bd7e 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5d4>
 80015c8:	4b01      	ldr	r3, [pc, #4]	; (80015d0 <HAL_RCC_OscConfig+0x5d0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	e016      	b.n	80015fc <HAL_RCC_OscConfig+0x5fc>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015f8:	4bbf      	ldr	r3, [pc, #764]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2202      	movs	r2, #2
 80015fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001602:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001606:	fa92 f2a2 	rbit	r2, r2
 800160a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800160e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ac      	bne.n	8001588 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8113 	beq.w	800186a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d07c      	beq.n	800174e <HAL_RCC_OscConfig+0x74e>
 8001654:	2301      	movs	r3, #1
 8001656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x8fc>)
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	461a      	mov	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff f933 	bl	80008e8 <HAL_GetTick>
 8001682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f92e 	bl	80008e8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d902      	bls.n	800169e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	f000 bcfe 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e2:	2202      	movs	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b7e      	ldr	r3, [pc, #504]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 8001700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800170a:	2102      	movs	r1, #2
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f1a3 	rbit	r1, r3
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001724:	6019      	str	r1, [r3, #0]
  return result;
 8001726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d09d      	beq.n	8001688 <HAL_RCC_OscConfig+0x688>
 800174c:	e08d      	b.n	800186a <HAL_RCC_OscConfig+0x86a>
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001770:	601a      	str	r2, [r3, #0]
  return result;
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800177a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x8fc>)
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff f8aa 	bl	80008e8 <HAL_GetTick>
 8001794:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff f8a5 	bl	80008e8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d902      	bls.n	80017b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f000 bc75 	b.w	800209a <HAL_RCC_OscConfig+0x109a>
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fa93 f2a3 	rbit	r2, r3
 80017ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001816:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800181a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 800181e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001824:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001828:	2102      	movs	r1, #2
 800182a:	6019      	str	r1, [r3, #0]
 800182c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	fa93 f1a3 	rbit	r1, r3
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001842:	6019      	str	r1, [r3, #0]
  return result;
 8001844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001848:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d197      	bne.n	800179a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 81a5 	beq.w	8001bca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_RCC_OscConfig+0x8f8>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_OscConfig+0x900>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x900>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x900>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d8:	f7ff f806 	bl	80008e8 <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e010      	b.n	8001904 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff f801 	bl	80008e8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d908      	bls.n	8001904 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e3d1      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	10908120 	.word	0x10908120
 8001900:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b8d      	ldr	r3, [pc, #564]	; (8001b3c <HAL_RCC_OscConfig+0xb3c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0e8      	beq.n	80018e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x92e>
 8001920:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a86      	ldr	r2, [pc, #536]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e035      	b.n	800199a <HAL_RCC_OscConfig+0x99a>
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x958>
 800193e:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b7d      	ldr	r3, [pc, #500]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a7c      	ldr	r2, [pc, #496]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e020      	b.n	800199a <HAL_RCC_OscConfig+0x99a>
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x982>
 8001968:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a74      	ldr	r2, [pc, #464]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a71      	ldr	r2, [pc, #452]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x99a>
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a6b      	ldr	r2, [pc, #428]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8081 	beq.w	8001aae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7fe ff9c 	bl	80008e8 <HAL_GetTick>
 80019b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7fe ff97 	bl	80008e8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e365      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019d6:	2202      	movs	r2, #2
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019fa:	2202      	movs	r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a14:	601a      	str	r2, [r3, #0]
  return result;
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_OscConfig+0xa3a>
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	e013      	b.n	8001a62 <HAL_RCC_OscConfig+0xa62>
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	6011      	str	r1, [r2, #0]
 8001a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	fa92 f1a2 	rbit	r1, r2
 8001a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a80:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a84:	6011      	str	r1, [r2, #0]
  return result;
 8001a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a8a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	fab2 f282 	clz	r2, r2
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f002 021f 	and.w	r2, r2, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d084      	beq.n	80019b6 <HAL_RCC_OscConfig+0x9b6>
 8001aac:	e083      	b.n	8001bb6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7fe ff1b 	bl	80008e8 <HAL_GetTick>
 8001ab2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7fe ff16 	bl	80008e8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e2e4      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ad8:	2202      	movs	r2, #2
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0xb44>
 8001b36:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_OscConfig+0xb40>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	e017      	b.n	8001b6c <HAL_RCC_OscConfig+0xb6c>
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	4bb3      	ldr	r3, [pc, #716]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b74:	2102      	movs	r1, #2
 8001b76:	6011      	str	r1, [r2, #0]
 8001b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	fa92 f1a2 	rbit	r1, r2
 8001b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b8a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b8e:	6011      	str	r1, [r2, #0]
  return result;
 8001b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b94:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f002 021f 	and.w	r2, r2, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d180      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b9e      	ldr	r3, [pc, #632]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a9d      	ldr	r2, [pc, #628]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 825e 	beq.w	8002098 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b96      	ldr	r3, [pc, #600]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	f000 821f 	beq.w	8002028 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	f040 8170 	bne.w	8001edc <HAL_RCC_OscConfig+0xedc>
 8001bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c20:	601a      	str	r2, [r3, #0]
  return result;
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe fe51 	bl	80008e8 <HAL_GetTick>
 8001c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	e009      	b.n	8001c60 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe fe4c 	bl	80008e8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e21c      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c84:	601a      	str	r2, [r3, #0]
  return result;
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_OscConfig+0xcaa>
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e027      	b.n	8001cfa <HAL_RCC_OscConfig+0xcfa>
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d06:	6011      	str	r1, [r2, #0]
 8001d08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	fa92 f1a2 	rbit	r1, r2
 8001d16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d1e:	6011      	str	r1, [r2, #0]
  return result;
 8001d20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d24:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f042 0220 	orr.w	r2, r2, #32
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f002 021f 	and.w	r2, r2, #31
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d182      	bne.n	8001c4c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f023 020f 	bic.w	r2, r3, #15
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	4937      	ldr	r1, [pc, #220]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a19      	ldr	r1, [r3, #32]
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	492d      	ldr	r1, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dac:	601a      	str	r2, [r3, #0]
  return result;
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001db6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2301      	movs	r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe fd8b 	bl	80008e8 <HAL_GetTick>
 8001dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fd86 	bl	80008e8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e156      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e10:	601a      	str	r2, [r3, #0]
  return result;
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0xe3c>
 8001e30:	4b01      	ldr	r3, [pc, #4]	; (8001e38 <HAL_RCC_OscConfig+0xe38>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e02a      	b.n	8001e8c <HAL_RCC_OscConfig+0xe8c>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	4b86      	ldr	r3, [pc, #536]	; (80020a4 <HAL_RCC_OscConfig+0x10a4>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	fa92 f1a2 	rbit	r1, r2
 8001ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eb0:	6011      	str	r1, [r2, #0]
  return result;
 8001eb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f43f af7f 	beq.w	8001dd8 <HAL_RCC_OscConfig+0xdd8>
 8001eda:	e0dd      	b.n	8002098 <HAL_RCC_OscConfig+0x1098>
 8001edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f00:	601a      	str	r2, [r3, #0]
  return result;
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f0a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2300      	movs	r3, #0
 8001f20:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe fce1 	bl	80008e8 <HAL_GetTick>
 8001f26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fcdc 	bl	80008e8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0ac      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f64:	601a      	str	r2, [r3, #0]
  return result;
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0xf8a>
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x10a4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e027      	b.n	8001fda <HAL_RCC_OscConfig+0xfda>
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001faa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_RCC_OscConfig+0x10a4>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fe2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe6:	6011      	str	r1, [r2, #0]
 8001fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	fa92 f1a2 	rbit	r1, r2
 8001ff6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ffe:	6011      	str	r1, [r2, #0]
  return result;
 8002000:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002004:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d182      	bne.n	8001f2c <HAL_RCC_OscConfig+0xf2c>
 8002026:	e037      	b.n	8002098 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e02e      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_OscConfig+0x10a4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_RCC_OscConfig+0x10a4>)
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800204c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002050:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d117      	bne.n	8002094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002064:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002068:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800206c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002078:	429a      	cmp	r2, r3
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09e      	sub	sp, #120	; 0x78
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e162      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b90      	ldr	r3, [pc, #576]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	498b      	ldr	r1, [pc, #556]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e14a      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	497f      	ldr	r1, [pc, #508]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80dc 	beq.w	80022d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d13c      	bne.n	800219e <HAL_RCC_ClockConfig+0xf6>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_ClockConfig+0xa6>
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e00f      	b.n	800216e <HAL_RCC_ClockConfig+0xc6>
 800214e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	667b      	str	r3, [r7, #100]	; 0x64
 800215c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002172:	65ba      	str	r2, [r7, #88]	; 0x58
 8002174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800217c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f042 0220 	orr.w	r2, r2, #32
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f002 021f 	and.w	r2, r2, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d17b      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0f3      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d13c      	bne.n	8002220 <HAL_RCC_ClockConfig+0x178>
 80021a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x128>
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_ClockConfig+0x148>
 80021d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
 80021de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80021f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13a      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b2      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
 8002220:	2302      	movs	r3, #2
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_ClockConfig+0x1a0>
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e00d      	b.n	8002264 <HAL_RCC_ClockConfig+0x1bc>
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	61ba      	str	r2, [r7, #24]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	617a      	str	r2, [r7, #20]
  return result;
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	fab2 f282 	clz	r2, r2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f042 0220 	orr.w	r2, r2, #32
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e079      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fb20 	bl	80008e8 <HAL_GetTick>
 80022a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fb1c 	bl	80008e8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e061      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d214      	bcs.n	800230c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4906      	ldr	r1, [pc, #24]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e040      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	491a      	ldr	r1, [pc, #104]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4912      	ldr	r1, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800234a:	f000 f829 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	22f0      	movs	r2, #240	; 0xf0
 800235a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	60fa      	str	r2, [r7, #12]
  return result;
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	40d3      	lsrs	r3, r2
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x2ec>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	fa21 f303 	lsr.w	r3, r1, r3
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_ClockConfig+0x2f0>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_ClockConfig+0x2f4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fa6e 	bl	8000860 <HAL_InitTick>
  
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3778      	adds	r7, #120	; 0x78
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	080039e4 	.word	0x080039e4
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ce:	e03f      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023d2:	623b      	str	r3, [r7, #32]
      break;
 80023d4:	e03f      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	607a      	str	r2, [r7, #4]
  return result;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	40d3      	lsrs	r3, r2
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_RCC_GetSysClockFreq+0xcc>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	220f      	movs	r2, #15
 8002404:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	60fa      	str	r2, [r7, #12]
  return result;
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	40d3      	lsrs	r3, r2
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <HAL_RCC_GetSysClockFreq+0xd0>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e007      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	623b      	str	r3, [r7, #32]
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002452:	623b      	str	r3, [r7, #32]
      break;
 8002454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002456:	6a3b      	ldr	r3, [r7, #32]
}
 8002458:	4618      	mov	r0, r3
 800245a:	372c      	adds	r7, #44	; 0x2c
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	007a1200 	.word	0x007a1200
 800246c:	080039fc 	.word	0x080039fc
 8002470:	08003a0c 	.word	0x08003a0c

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002492:	f7ff ffef 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	603a      	str	r2, [r7, #0]
  return result;
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080039f4 	.word	0x080039f4

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024d6:	f7ff ffcd 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 80024da:	4601      	mov	r1, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	fa92 f2a2 	rbit	r2, r2
 80024f0:	603a      	str	r2, [r7, #0]
  return result;
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	40d3      	lsrs	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	080039f4 	.word	0x080039f4

08002514 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	; 0x48
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80d4 	beq.w	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10e      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b45      	ldr	r3, [pc, #276]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a41      	ldr	r2, [pc, #260]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe f9b5 	bl	80008e8 <HAL_GetTick>
 800257e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe f9b1 	bl	80008e8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1d6      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8084 	beq.w	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d07c      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04b      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe f961 	bl	80008e8 <HAL_GetTick>
 8002626:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe f95d 	bl	80008e8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e180      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002640:	2302      	movs	r3, #2
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	61fb      	str	r3, [r7, #28]
  return result;
 8002658:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d108      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800266e:	4b01      	ldr	r3, [pc, #4]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	e00d      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
 800267c:	10908100 	.word	0x10908100
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	4b9a      	ldr	r3, [pc, #616]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	613a      	str	r2, [r7, #16]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	60fa      	str	r2, [r7, #12]
  return result;
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0b7      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026ba:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	498c      	ldr	r1, [pc, #560]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b88      	ldr	r3, [pc, #544]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a87      	ldr	r2, [pc, #540]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ec:	4b82      	ldr	r3, [pc, #520]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f023 0203 	bic.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	497f      	ldr	r1, [pc, #508]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270a:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4978      	ldr	r1, [pc, #480]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002728:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	4970      	ldr	r1, [pc, #448]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4969      	ldr	r1, [pc, #420]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002764:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	4961      	ldr	r1, [pc, #388]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f023 0220 	bic.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	495a      	ldr	r1, [pc, #360]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	4952      	ldr	r1, [pc, #328]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027be:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	494b      	ldr	r1, [pc, #300]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4943      	ldr	r1, [pc, #268]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	493c      	ldr	r1, [pc, #240]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002818:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	4934      	ldr	r1, [pc, #208]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	492d      	ldr	r1, [pc, #180]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	4925      	ldr	r1, [pc, #148]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	491e      	ldr	r1, [pc, #120]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	4916      	ldr	r1, [pc, #88]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028ea:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	e002      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	4913      	ldr	r1, [pc, #76]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	490b      	ldr	r1, [pc, #44]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	4904      	ldr	r1, [pc, #16]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800293c:	4313      	orrs	r3, r2
 800293e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3748      	adds	r7, #72	; 0x48
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e040      	b.n	80029e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd fe46 	bl	8000604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fbbc 	bl	800310c <UART_SetConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e022      	b.n	80029e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fd84 	bl	80034b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fe0b 	bl	80035f8 <UART_CheckIdleState>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d178      	bne.n	8002af6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_UART_Transmit+0x24>
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e071      	b.n	8002af8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2221      	movs	r2, #33	; 0x21
 8002a20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a22:	f7fd ff61 	bl	80008e8 <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a40:	d108      	bne.n	8002a54 <HAL_UART_Transmit+0x68>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	e003      	b.n	8002a5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a5c:	e030      	b.n	8002ac0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fe6d 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e03c      	b.n	8002af8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a90:	b292      	uxth	r2, r2
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	3302      	adds	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e008      	b.n	8002aae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1c8      	bne.n	8002a5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fe36 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e005      	b.n	8002af8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0ba      	sub	sp, #232	; 0xe8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b2e:	4013      	ands	r3, r2
 8002b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d115      	bne.n	8002b68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00f      	beq.n	8002b68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 82ab 	beq.w	80030b4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
      }
      return;
 8002b66:	e2a5      	b.n	80030b4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8117 	beq.w	8002da0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b82:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <HAL_UART_IRQHandler+0x298>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 810a 	beq.w	8002da0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d011      	beq.n	8002bbc <HAL_UART_IRQHandler+0xbc>
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d011      	beq.n	8002bec <HAL_UART_IRQHandler+0xec>
 8002bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d011      	beq.n	8002c1c <HAL_UART_IRQHandler+0x11c>
 8002bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2208      	movs	r2, #8
 8002c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d012      	beq.n	8002c8a <HAL_UART_IRQHandler+0x18a>
 8002c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8211 	beq.w	80030b8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04f      	beq.n	8002d82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fd97 	bl	8003816 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d141      	bne.n	8002d7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1d9      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d013      	beq.n	8002d72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_UART_IRQHandler+0x29c>)
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd ff40 	bl	8000bdc <HAL_DMA_Abort_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e00f      	b.n	8002d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9b4 	bl	80030e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e00b      	b.n	8002d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9b0 	bl	80030e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	e007      	b.n	8002d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f9ac 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d90:	e192      	b.n	80030b8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d92:	bf00      	nop
    return;
 8002d94:	e190      	b.n	80030b8 <HAL_UART_IRQHandler+0x5b8>
 8002d96:	bf00      	nop
 8002d98:	04000120 	.word	0x04000120
 8002d9c:	080038df 	.word	0x080038df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 814b 	bne.w	8003040 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8144 	beq.w	8003040 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 813d 	beq.w	8003040 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	f040 80b5 	bne.w	8002f48 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8164 	beq.w	80030bc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	f080 815c 	bcs.w	80030bc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1da      	bne.n	8002e1a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3308      	adds	r3, #8
 8002e84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e1      	bne.n	8002e64 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ec4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ec6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002eca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e3      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef6:	f023 0310 	bic.w	r3, r3, #16
 8002efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e4      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fe22 	bl	8000b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8d7 	bl	80030f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f46:	e0b9      	b.n	80030bc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80ab 	beq.w	80030c0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80a6 	beq.w	80030c0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
 8002f98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e4      	bne.n	8002f74 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fce:	633a      	str	r2, [r7, #48]	; 0x30
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e3      	bne.n	8002faa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	60fb      	str	r3, [r7, #12]
   return(result);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	617b      	str	r3, [r7, #20]
   return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e4      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f85b 	bl	80030f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800303e:	e03f      	b.n	80030c0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <HAL_UART_IRQHandler+0x56a>
 800304c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fc7b 	bl	800395e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003068:	e02d      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01c      	beq.n	80030c4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
    }
    return;
 8003092:	e017      	b.n	80030c4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d012      	beq.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fc2c 	bl	800390a <UART_EndTransmit_IT>
    return;
 80030b2:	e008      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80030b4:	bf00      	nop
 80030b6:	e006      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80030b8:	bf00      	nop
 80030ba:	e004      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80030c4:	bf00      	nop
  }

}
 80030c6:	37e8      	adds	r7, #232	; 0xe8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b92      	ldr	r3, [pc, #584]	; (8003380 <UART_SetConfig+0x274>)
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	6979      	ldr	r1, [r7, #20]
 8003140:	430b      	orrs	r3, r1
 8003142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <UART_SetConfig+0x278>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d120      	bne.n	80031ca <UART_SetConfig+0xbe>
 8003188:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <UART_SetConfig+0x27c>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d817      	bhi.n	80031c4 <UART_SetConfig+0xb8>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <UART_SetConfig+0x90>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031b9 	.word	0x080031b9
 80031a4:	080031bf 	.word	0x080031bf
 80031a8:	080031b3 	.word	0x080031b3
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e0b5      	b.n	800331e <UART_SetConfig+0x212>
 80031b2:	2302      	movs	r3, #2
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e0b2      	b.n	800331e <UART_SetConfig+0x212>
 80031b8:	2304      	movs	r3, #4
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e0af      	b.n	800331e <UART_SetConfig+0x212>
 80031be:	2308      	movs	r3, #8
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e0ac      	b.n	800331e <UART_SetConfig+0x212>
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0a9      	b.n	800331e <UART_SetConfig+0x212>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6f      	ldr	r2, [pc, #444]	; (800338c <UART_SetConfig+0x280>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d124      	bne.n	800321e <UART_SetConfig+0x112>
 80031d4:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <UART_SetConfig+0x27c>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e0:	d011      	beq.n	8003206 <UART_SetConfig+0xfa>
 80031e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e6:	d817      	bhi.n	8003218 <UART_SetConfig+0x10c>
 80031e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ec:	d011      	beq.n	8003212 <UART_SetConfig+0x106>
 80031ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f2:	d811      	bhi.n	8003218 <UART_SetConfig+0x10c>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <UART_SetConfig+0xf4>
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d006      	beq.n	800320c <UART_SetConfig+0x100>
 80031fe:	e00b      	b.n	8003218 <UART_SetConfig+0x10c>
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e08b      	b.n	800331e <UART_SetConfig+0x212>
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e088      	b.n	800331e <UART_SetConfig+0x212>
 800320c:	2304      	movs	r3, #4
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e085      	b.n	800331e <UART_SetConfig+0x212>
 8003212:	2308      	movs	r3, #8
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e082      	b.n	800331e <UART_SetConfig+0x212>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e07f      	b.n	800331e <UART_SetConfig+0x212>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <UART_SetConfig+0x284>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d124      	bne.n	8003272 <UART_SetConfig+0x166>
 8003228:	4b57      	ldr	r3, [pc, #348]	; (8003388 <UART_SetConfig+0x27c>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003230:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003234:	d011      	beq.n	800325a <UART_SetConfig+0x14e>
 8003236:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800323a:	d817      	bhi.n	800326c <UART_SetConfig+0x160>
 800323c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003240:	d011      	beq.n	8003266 <UART_SetConfig+0x15a>
 8003242:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003246:	d811      	bhi.n	800326c <UART_SetConfig+0x160>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <UART_SetConfig+0x148>
 800324c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003250:	d006      	beq.n	8003260 <UART_SetConfig+0x154>
 8003252:	e00b      	b.n	800326c <UART_SetConfig+0x160>
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e061      	b.n	800331e <UART_SetConfig+0x212>
 800325a:	2302      	movs	r3, #2
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e05e      	b.n	800331e <UART_SetConfig+0x212>
 8003260:	2304      	movs	r3, #4
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e05b      	b.n	800331e <UART_SetConfig+0x212>
 8003266:	2308      	movs	r3, #8
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e058      	b.n	800331e <UART_SetConfig+0x212>
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e055      	b.n	800331e <UART_SetConfig+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a47      	ldr	r2, [pc, #284]	; (8003394 <UART_SetConfig+0x288>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d124      	bne.n	80032c6 <UART_SetConfig+0x1ba>
 800327c:	4b42      	ldr	r3, [pc, #264]	; (8003388 <UART_SetConfig+0x27c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003288:	d011      	beq.n	80032ae <UART_SetConfig+0x1a2>
 800328a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328e:	d817      	bhi.n	80032c0 <UART_SetConfig+0x1b4>
 8003290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003294:	d011      	beq.n	80032ba <UART_SetConfig+0x1ae>
 8003296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329a:	d811      	bhi.n	80032c0 <UART_SetConfig+0x1b4>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <UART_SetConfig+0x19c>
 80032a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a4:	d006      	beq.n	80032b4 <UART_SetConfig+0x1a8>
 80032a6:	e00b      	b.n	80032c0 <UART_SetConfig+0x1b4>
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e037      	b.n	800331e <UART_SetConfig+0x212>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e034      	b.n	800331e <UART_SetConfig+0x212>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e031      	b.n	800331e <UART_SetConfig+0x212>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e02e      	b.n	800331e <UART_SetConfig+0x212>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e02b      	b.n	800331e <UART_SetConfig+0x212>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a33      	ldr	r2, [pc, #204]	; (8003398 <UART_SetConfig+0x28c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d124      	bne.n	800331a <UART_SetConfig+0x20e>
 80032d0:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <UART_SetConfig+0x27c>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80032d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032dc:	d011      	beq.n	8003302 <UART_SetConfig+0x1f6>
 80032de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e2:	d817      	bhi.n	8003314 <UART_SetConfig+0x208>
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d011      	beq.n	800330e <UART_SetConfig+0x202>
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d811      	bhi.n	8003314 <UART_SetConfig+0x208>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <UART_SetConfig+0x1f0>
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d006      	beq.n	8003308 <UART_SetConfig+0x1fc>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x208>
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e00d      	b.n	800331e <UART_SetConfig+0x212>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e00a      	b.n	800331e <UART_SetConfig+0x212>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e007      	b.n	800331e <UART_SetConfig+0x212>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e004      	b.n	800331e <UART_SetConfig+0x212>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e001      	b.n	800331e <UART_SetConfig+0x212>
 800331a:	2310      	movs	r3, #16
 800331c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003326:	d16b      	bne.n	8003400 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	2b08      	cmp	r3, #8
 800332c:	d838      	bhi.n	80033a0 <UART_SetConfig+0x294>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <UART_SetConfig+0x228>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003359 	.word	0x08003359
 8003338:	08003361 	.word	0x08003361
 800333c:	08003369 	.word	0x08003369
 8003340:	080033a1 	.word	0x080033a1
 8003344:	0800336f 	.word	0x0800336f
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033a1 	.word	0x080033a1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	08003377 	.word	0x08003377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003358:	f7ff f898 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 800335c:	61b8      	str	r0, [r7, #24]
        break;
 800335e:	e024      	b.n	80033aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003360:	f7ff f8b6 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003364:	61b8      	str	r0, [r7, #24]
        break;
 8003366:	e020      	b.n	80033aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <UART_SetConfig+0x290>)
 800336a:	61bb      	str	r3, [r7, #24]
        break;
 800336c:	e01d      	b.n	80033aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336e:	f7ff f817 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003372:	61b8      	str	r0, [r7, #24]
        break;
 8003374:	e019      	b.n	80033aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337a:	61bb      	str	r3, [r7, #24]
        break;
 800337c:	e015      	b.n	80033aa <UART_SetConfig+0x29e>
 800337e:	bf00      	nop
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800
 8003394:	40004c00 	.word	0x40004c00
 8003398:	40005000 	.word	0x40005000
 800339c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77bb      	strb	r3, [r7, #30]
        break;
 80033a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d073      	beq.n	8003498 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d916      	bls.n	80033fa <UART_SetConfig+0x2ee>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d212      	bcs.n	80033fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f023 030f 	bic.w	r3, r3, #15
 80033dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	89fa      	ldrh	r2, [r7, #14]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e04e      	b.n	8003498 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77bb      	strb	r3, [r7, #30]
 80033fe:	e04b      	b.n	8003498 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003400:	7ffb      	ldrb	r3, [r7, #31]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d827      	bhi.n	8003456 <UART_SetConfig+0x34a>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0x300>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003431 	.word	0x08003431
 8003410:	08003439 	.word	0x08003439
 8003414:	08003441 	.word	0x08003441
 8003418:	08003457 	.word	0x08003457
 800341c:	08003447 	.word	0x08003447
 8003420:	08003457 	.word	0x08003457
 8003424:	08003457 	.word	0x08003457
 8003428:	08003457 	.word	0x08003457
 800342c:	0800344f 	.word	0x0800344f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff f82c 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8003434:	61b8      	str	r0, [r7, #24]
        break;
 8003436:	e013      	b.n	8003460 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003438:	f7ff f84a 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 800343c:	61b8      	str	r0, [r7, #24]
        break;
 800343e:	e00f      	b.n	8003460 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <UART_SetConfig+0x3a4>)
 8003442:	61bb      	str	r3, [r7, #24]
        break;
 8003444:	e00c      	b.n	8003460 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003446:	f7fe ffab 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800344a:	61b8      	str	r0, [r7, #24]
        break;
 800344c:	e008      	b.n	8003460 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	61bb      	str	r3, [r7, #24]
        break;
 8003454:	e004      	b.n	8003460 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77bb      	strb	r3, [r7, #30]
        break;
 800345e:	bf00      	nop
    }

    if (pclk != 0U)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d018      	beq.n	8003498 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	085a      	lsrs	r2, r3, #1
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	441a      	add	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d909      	bls.n	8003494 <UART_SetConfig+0x388>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003486:	d205      	bcs.n	8003494 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e001      	b.n	8003498 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b2:	d10a      	bne.n	80035ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b098      	sub	sp, #96	; 0x60
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003608:	f7fd f96e 	bl	80008e8 <HAL_GetTick>
 800360c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b08      	cmp	r3, #8
 800361a:	d12e      	bne.n	800367a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	2200      	movs	r2, #0
 8003626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f88c 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d021      	beq.n	800367a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	653b      	str	r3, [r7, #80]	; 0x50
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
 8003656:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800365a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e062      	b.n	8003740 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d149      	bne.n	800371c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f856 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d03c      	beq.n	800371c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	623b      	str	r3, [r7, #32]
   return(result);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
 80036c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e6      	bne.n	80036a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	617b      	str	r3, [r7, #20]
   return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e011      	b.n	8003740 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3758      	adds	r7, #88	; 0x58
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	e049      	b.n	80037ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d045      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003762:	f7fd f8c1 	bl	80008e8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <UART_WaitOnFlagUntilTimeout+0x30>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e048      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d031      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d110      	bne.n	80037ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2208      	movs	r2, #8
 800379e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f838 	bl	8003816 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2208      	movs	r2, #8
 80037aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e029      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c8:	d111      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f81e 	bl	8003816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e00f      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d0a6      	beq.n	800375a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003816:	b480      	push	{r7}
 8003818:	b095      	sub	sp, #84	; 0x54
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
 800383e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e6      	bne.n	800381e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e5      	bne.n	8003850 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	2b01      	cmp	r3, #1
 800388a:	d118      	bne.n	80038be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	60bb      	str	r3, [r7, #8]
   return(result);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f023 0310 	bic.w	r3, r3, #16
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6979      	ldr	r1, [r7, #20]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	613b      	str	r3, [r7, #16]
   return(result);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e6      	bne.n	800388c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038d2:	bf00      	nop
 80038d4:	3754      	adds	r7, #84	; 0x54
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff fbef 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b088      	sub	sp, #32
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6979      	ldr	r1, [r7, #20]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	613b      	str	r3, [r7, #16]
   return(result);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e6      	bne.n	8003912 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fbbb 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <memset>:
 8003972:	4402      	add	r2, r0
 8003974:	4603      	mov	r3, r0
 8003976:	4293      	cmp	r3, r2
 8003978:	d100      	bne.n	800397c <memset+0xa>
 800397a:	4770      	bx	lr
 800397c:	f803 1b01 	strb.w	r1, [r3], #1
 8003980:	e7f9      	b.n	8003976 <memset+0x4>
	...

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	; (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	; (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	; (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 f818 	bl	80039cc <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08003a1c 	.word	0x08003a1c
 80039c0:	08003a1c 	.word	0x08003a1c
 80039c4:	08003a1c 	.word	0x08003a1c
 80039c8:	08003a20 	.word	0x08003a20

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
