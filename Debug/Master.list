
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb4  08003eb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb4  08003eb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb4  08003eb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000138  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a88e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ab9  00000000  00000000  0002a90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000778  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b8  00000000  00000000  0002cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fac5  00000000  00000000  0002d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b16f  00000000  00000000  0004cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfc84  00000000  00000000  00057d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d0c  00000000  00000000  001179b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001196bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e64 	.word	0x08003e64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e64 	.word	0x08003e64

080001d4 <sendData>:
uint8_t TxData[2];
uint8_t RxData[2];
//int indx = 0;

void sendData (uint8_t *data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	//HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
	HAL_UART_Transmit(&huart1, data, 1, 1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	2201      	movs	r2, #1
 80001e2:	6879      	ldr	r1, [r7, #4]
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <sendData+0x20>)
 80001e6:	f002 fb8d 	bl	8002904 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	//HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 2);
 8000204:	2202      	movs	r2, #2
 8000206:	4904      	ldr	r1, [pc, #16]	; (8000218 <HAL_UARTEx_RxEventCallback+0x20>)
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <HAL_UARTEx_RxEventCallback+0x24>)
 800020a:	f003 fdab 	bl	8003d64 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000013c 	.word	0x2000013c
 800021c:	20000028 	.word	0x20000028

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faac 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f864 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f916 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8e4 	bl	80003fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f8b2 	bl	800039c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 2);
 8000238:	2202      	movs	r2, #2
 800023a:	4929      	ldr	r1, [pc, #164]	; (80002e0 <main+0xc0>)
 800023c:	4829      	ldr	r0, [pc, #164]	; (80002e4 <main+0xc4>)
 800023e:	f003 fd91 	bl	8003d64 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET){	//Check for red button press
 8000242:	2104      	movs	r1, #4
 8000244:	4828      	ldr	r0, [pc, #160]	; (80002e8 <main+0xc8>)
 8000246:	f000 fe37 	bl	8000eb8 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d10a      	bne.n	8000266 <main+0x46>
	 					 // sprintf(TxData, "R");
	 					  TxData[0] = 1;
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <main+0xcc>)
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
	 					  sendData(TxData);
 8000256:	4825      	ldr	r0, [pc, #148]	; (80002ec <main+0xcc>)
 8000258:	f7ff ffbc 	bl	80001d4 <sendData>
	 					  HAL_Delay(500);
 800025c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000260:	f000 faf4 	bl	800084c <HAL_Delay>
 8000264:	e7ed      	b.n	8000242 <main+0x22>
	 				  }
	 				  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3) == GPIO_PIN_RESET){ 	//Check for green button press
 8000266:	2108      	movs	r1, #8
 8000268:	481f      	ldr	r0, [pc, #124]	; (80002e8 <main+0xc8>)
 800026a:	f000 fe25 	bl	8000eb8 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10a      	bne.n	800028a <main+0x6a>
	 					 // sprintf(TxData, "G");
	 					  TxData[0] = 2;
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <main+0xcc>)
 8000276:	2202      	movs	r2, #2
 8000278:	701a      	strb	r2, [r3, #0]
	 					  sendData(TxData);
 800027a:	481c      	ldr	r0, [pc, #112]	; (80002ec <main+0xcc>)
 800027c:	f7ff ffaa 	bl	80001d4 <sendData>
	 					  HAL_Delay(500);
 8000280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000284:	f000 fae2 	bl	800084c <HAL_Delay>
 8000288:	e7db      	b.n	8000242 <main+0x22>
	 				  }
	 				  else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14) == GPIO_PIN_RESET){ 	//Check for yellow button press
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4818      	ldr	r0, [pc, #96]	; (80002f0 <main+0xd0>)
 8000290:	f000 fe12 	bl	8000eb8 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10a      	bne.n	80002b0 <main+0x90>
	 					 // sprintf(TxData, "Y");
	 					  TxData[0] = 3;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <main+0xcc>)
 800029c:	2203      	movs	r2, #3
 800029e:	701a      	strb	r2, [r3, #0]
	 					  sendData(TxData);
 80002a0:	4812      	ldr	r0, [pc, #72]	; (80002ec <main+0xcc>)
 80002a2:	f7ff ff97 	bl	80001d4 <sendData>
	 					  HAL_Delay(500);
 80002a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002aa:	f000 facf 	bl	800084c <HAL_Delay>
 80002ae:	e7c8      	b.n	8000242 <main+0x22>
	 				  }
	 				  else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15) == GPIO_PIN_RESET){ 	//Check for blue button press
 80002b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b4:	480e      	ldr	r0, [pc, #56]	; (80002f0 <main+0xd0>)
 80002b6:	f000 fdff 	bl	8000eb8 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d10a      	bne.n	80002d6 <main+0xb6>
	 					 // sprintf(TxData, "B");
	 					  TxData[0] = 4;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0xcc>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	701a      	strb	r2, [r3, #0]
	 					  sendData(TxData);
 80002c6:	4809      	ldr	r0, [pc, #36]	; (80002ec <main+0xcc>)
 80002c8:	f7ff ff84 	bl	80001d4 <sendData>
	 					  HAL_Delay(500);
 80002cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d0:	f000 fabc 	bl	800084c <HAL_Delay>
 80002d4:	e7b5      	b.n	8000242 <main+0x22>
	 				  }else{
	 					  TxData[0] = 0;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0xcc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET){	//Check for red button press
 80002dc:	e7b1      	b.n	8000242 <main+0x22>
 80002de:	bf00      	nop
 80002e0:	2000013c 	.word	0x2000013c
 80002e4:	20000028 	.word	0x20000028
 80002e8:	48000800 	.word	0x48000800
 80002ec:	20000138 	.word	0x20000138
 80002f0:	48000400 	.word	0x48000400

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b0a6      	sub	sp, #152	; 0x98
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fd82 	bl	8003e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2258      	movs	r2, #88	; 0x58
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fd74 	bl	8003e0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000332:	2300      	movs	r3, #0
 8000334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fdeb 	bl	8000f18 <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000348:	f000 f8f2 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	2300      	movs	r3, #0
 8000352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fe2a 	bl	8001fc0 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000372:	f000 f8dd 	bl	8000530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000376:	2303      	movs	r3, #3
 8000378:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f002 f851 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000390:	f000 f8ce 	bl	8000530 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3798      	adds	r7, #152	; 0x98
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003a2:	4a15      	ldr	r2, [pc, #84]	; (80003f8 <MX_USART1_UART_Init+0x5c>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x58>)
 80003e0:	f002 fa42 	bl	8002868 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ea:	f000 f8a1 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <MX_USART2_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800040c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_USART2_UART_Init+0x58>)
 8000440:	f002 fa12 	bl	8002868 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f871 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000b0 	.word	0x200000b0
 8000458:	40004400 	.word	0x40004400

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a2b      	ldr	r2, [pc, #172]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b29      	ldr	r3, [pc, #164]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <MX_GPIO_Init+0xc8>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a25      	ldr	r2, [pc, #148]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a1f      	ldr	r2, [pc, #124]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 fd10 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c8:	230c      	movs	r3, #12
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <MX_GPIO_Init+0xcc>)
 80004dc:	f000 fb62 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4619      	mov	r1, r3
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_GPIO_Init+0xd0>)
 80004f6:	f000 fb55 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	4619      	mov	r1, r3
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f000 fb45 	bl	8000ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800
 800052c:	48000400 	.word	0x48000400

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a36      	ldr	r2, [pc, #216]	; (800067c <HAL_UART_MspInit+0xf8>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d130      	bne.n	8000608 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a35      	ldr	r2, [pc, #212]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b30      	ldr	r3, [pc, #192]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_UART_MspInit+0xfc>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005d6:	2330      	movs	r3, #48	; 0x30
 80005d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005e6:	2307      	movs	r3, #7
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4824      	ldr	r0, [pc, #144]	; (8000684 <HAL_UART_MspInit+0x100>)
 80005f2:	f000 fad7 	bl	8000ba4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2025      	movs	r0, #37	; 0x25
 80005fc:	f000 fa25 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000600:	2025      	movs	r0, #37	; 0x25
 8000602:	f000 fa3e 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000606:	e035      	b.n	8000674 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <HAL_UART_MspInit+0x104>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d130      	bne.n	8000674 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <HAL_UART_MspInit+0xfc>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <HAL_UART_MspInit+0xfc>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <HAL_UART_MspInit+0xfc>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_UART_MspInit+0xfc>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <HAL_UART_MspInit+0xfc>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_UART_MspInit+0xfc>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000642:	230c      	movs	r3, #12
 8000644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000652:	2307      	movs	r3, #7
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f000 faa0 	bl	8000ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2026      	movs	r0, #38	; 0x26
 800066a:	f000 f9ee 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800066e:	2026      	movs	r0, #38	; 0x26
 8000670:	f000 fa07 	bl	8000a82 <HAL_NVIC_EnableIRQ>
}
 8000674:	bf00      	nop
 8000676:	3730      	adds	r7, #48	; 0x30
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013800 	.word	0x40013800
 8000680:	40021000 	.word	0x40021000
 8000684:	48000800 	.word	0x48000800
 8000688:	40004400 	.word	0x40004400

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f898 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <USART1_IRQHandler+0x10>)
 80006e6:	f002 f997 	bl	8002a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028

080006f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <USART2_IRQHandler+0x10>)
 80006fa:	f002 f98d 	bl	8002a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000b0 	.word	0x200000b0

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SystemInit+0x20>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <SystemInit+0x20>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff ffea 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f003 fb5f 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd5f 	bl	8000220 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	08003ebc 	.word	0x08003ebc
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	20000144 	.word	0x20000144

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f94f 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fece 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f967 	bl	8000a9e <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f92f 	bl	8000a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000140 	.word	0x20000140

08000834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;  
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000140 	.word	0x20000140

0800084c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffde 	bl	8000834 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <__NVIC_EnableIRQ+0x38>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f7ff ff8e 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff29 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff3e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff8e 	bl	8000988 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d008      	beq.n	8000ada <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2204      	movs	r2, #4
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e020      	b.n	8000b1c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 020e 	bic.w	r2, r2, #14
 8000ae8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b02:	2101      	movs	r1, #1
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d005      	beq.n	8000b4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2204      	movs	r2, #4
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e027      	b.n	8000b9a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 020e 	bic.w	r2, r2, #14
 8000b58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4798      	blx	r3
    } 
  }
  return status;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	e160      	b.n	8000e76 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8152 	beq.w	8000e70 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d005      	beq.n	8000be4 <HAL_GPIO_Init+0x40>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d017      	beq.n	8000c82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d123      	bne.n	8000cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	6939      	ldr	r1, [r7, #16]
 8000cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0203 	and.w	r2, r3, #3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80ac 	beq.w	8000e70 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d18:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a5d      	ldr	r2, [pc, #372]	; (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b5b      	ldr	r3, [pc, #364]	; (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d30:	4a59      	ldr	r2, [pc, #356]	; (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d5a:	d025      	beq.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4f      	ldr	r2, [pc, #316]	; (8000e9c <HAL_GPIO_Init+0x2f8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d01f      	beq.n	8000da4 <HAL_GPIO_Init+0x200>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4e      	ldr	r2, [pc, #312]	; (8000ea0 <HAL_GPIO_Init+0x2fc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d019      	beq.n	8000da0 <HAL_GPIO_Init+0x1fc>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4d      	ldr	r2, [pc, #308]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1f8>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1f4>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_GPIO_Init+0x308>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1f0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <HAL_GPIO_Init+0x30c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1ec>
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	e00c      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d90:	2307      	movs	r3, #7
 8000d92:	e00a      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d94:	2305      	movs	r3, #5
 8000d96:	e008      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da8:	2300      	movs	r3, #0
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dba:	4937      	ldr	r1, [pc, #220]	; (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dec:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f ae97 	bne.w	8000bb4 <HAL_GPIO_Init+0x10>
  }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	48001000 	.word	0x48001000
 8000eac:	48001400 	.word	0x48001400
 8000eb0:	48001800 	.word	0x48001800
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f001 b83a 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 816f 	beq.w	8001232 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f54:	4bb5      	ldr	r3, [pc, #724]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d00c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f60:	4bb2      	ldr	r3, [pc, #712]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d15c      	bne.n	8001026 <HAL_RCC_OscConfig+0x10e>
 8000f6c:	4baf      	ldr	r3, [pc, #700]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d155      	bne.n	8001026 <HAL_RCC_OscConfig+0x10e>
 8000f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	095b      	lsrs	r3, r3, #5
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <HAL_RCC_OscConfig+0x94>
 8000fa6:	4ba1      	ldr	r3, [pc, #644]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	e015      	b.n	8000fd8 <HAL_RCC_OscConfig+0xc0>
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fc8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fd4:	4b95      	ldr	r3, [pc, #596]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fdc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fe0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fe4:	fa92 f2a2 	rbit	r2, r2
 8000fe8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ff0:	fab2 f282 	clz	r2, r2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f002 021f 	and.w	r2, r2, #31
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8111 	beq.w	8001230 <HAL_RCC_OscConfig+0x318>
 800100e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001012:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8108 	bne.w	8001230 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	f000 bfc6 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x12e>
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x314>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a7b      	ldr	r2, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x314>)
 800103e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e036      	b.n	80010b4 <HAL_RCC_OscConfig+0x19c>
 8001046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x158>
 8001056:	4b75      	ldr	r3, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a74      	ldr	r2, [pc, #464]	; (800122c <HAL_RCC_OscConfig+0x314>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b72      	ldr	r3, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a71      	ldr	r2, [pc, #452]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e021      	b.n	80010b4 <HAL_RCC_OscConfig+0x19c>
 8001070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x184>
 8001082:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0x19c>
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_RCC_OscConfig+0x314>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a62      	ldr	r2, [pc, #392]	; (800122c <HAL_RCC_OscConfig+0x314>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <HAL_RCC_OscConfig+0x314>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a5f      	ldr	r2, [pc, #380]	; (800122c <HAL_RCC_OscConfig+0x314>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d059      	beq.n	8001178 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fbb6 	bl	8000834 <HAL_GetTick>
 80010c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fbb1 	bl	8000834 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d902      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	f000 bf67 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d102      	bne.n	8001116 <HAL_RCC_OscConfig+0x1fe>
 8001110:	4b46      	ldr	r3, [pc, #280]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0x22a>
 8001116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800112a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001132:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x314>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001146:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800114a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800114e:	fa92 f2a2 	rbit	r2, r2
 8001152:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001156:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	f002 021f 	and.w	r2, r2, #31
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0ab      	beq.n	80010ce <HAL_RCC_OscConfig+0x1b6>
 8001176:	e05c      	b.n	8001232 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb5c 	bl	8000834 <HAL_GetTick>
 800117c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fb57 	bl	8000834 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d902      	bls.n	8001198 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	f000 bf0d 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 8001198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d102      	bne.n	80011ca <HAL_RCC_OscConfig+0x2b2>
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_RCC_OscConfig+0x314>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x2de>
 80011ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_RCC_OscConfig+0x314>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001202:	fa92 f2a2 	rbit	r2, r2
 8001206:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800120a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800120e:	fab2 f282 	clz	r2, r2
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f042 0220 	orr.w	r2, r2, #32
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	f002 021f 	and.w	r2, r2, #31
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ab      	bne.n	8001182 <HAL_RCC_OscConfig+0x26a>
 800122a:	e002      	b.n	8001232 <HAL_RCC_OscConfig+0x31a>
 800122c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001236:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 817f 	beq.w	8001546 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001248:	4ba7      	ldr	r3, [pc, #668]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001254:	4ba4      	ldr	r3, [pc, #656]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d173      	bne.n	8001348 <HAL_RCC_OscConfig+0x430>
 8001260:	4ba1      	ldr	r3, [pc, #644]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800126c:	d16c      	bne.n	8001348 <HAL_RCC_OscConfig+0x430>
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001280:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x386>
 8001298:	4b93      	ldr	r3, [pc, #588]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	e013      	b.n	80012c6 <HAL_RCC_OscConfig+0x3ae>
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012c2:	4b89      	ldr	r3, [pc, #548]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2202      	movs	r2, #2
 80012c8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012d0:	fa92 f2a2 	rbit	r2, r2
 80012d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012dc:	fab2 f282 	clz	r2, r2
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f002 021f 	and.w	r2, r2, #31
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <HAL_RCC_OscConfig+0x3f6>
 80012f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d002      	beq.n	800130e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f000 be52 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	21f8      	movs	r1, #248	; 0xf8
 8001324:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800132c:	fa91 f1a1 	rbit	r1, r1
 8001330:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001334:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001338:	fab1 f181 	clz	r1, r1
 800133c:	b2c9      	uxtb	r1, r1
 800133e:	408b      	lsls	r3, r1
 8001340:	4969      	ldr	r1, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e0fe      	b.n	8001546 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800134c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8088 	beq.w	800146a <HAL_RCC_OscConfig+0x552>
 800135a:	2301      	movs	r3, #1
 800135c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800136c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	2301      	movs	r3, #1
 8001384:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fa55 	bl	8000834 <HAL_GetTick>
 800138a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fa50 	bl	8000834 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d902      	bls.n	80013a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f000 be06 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x4be>
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	e013      	b.n	80013fe <HAL_RCC_OscConfig+0x4e6>
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	2202      	movs	r2, #2
 8001400:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001404:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001408:	fa92 f2a2 	rbit	r2, r2
 800140c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001410:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001414:	fab2 f282 	clz	r2, r2
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f042 0220 	orr.w	r2, r2, #32
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f002 021f 	and.w	r2, r2, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0af      	beq.n	8001390 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	21f8      	movs	r1, #248	; 0xf8
 8001446:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800144e:	fa91 f1a1 	rbit	r1, r1
 8001452:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001456:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800145a:	fab1 f181 	clz	r1, r1
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	4921      	ldr	r1, [pc, #132]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e06d      	b.n	8001546 <HAL_RCC_OscConfig+0x62e>
 800146a:	2301      	movs	r3, #1
 800146c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800147c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800148a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	461a      	mov	r2, r3
 8001492:	2300      	movs	r3, #0
 8001494:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff f9cd 	bl	8000834 <HAL_GetTick>
 800149a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff f9c8 	bl	8000834 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d902      	bls.n	80014b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f000 bd7e 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x5d4>
 80014e0:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <HAL_RCC_OscConfig+0x5d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e016      	b.n	8001514 <HAL_RCC_OscConfig+0x5fc>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001504:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001510:	4bbf      	ldr	r3, [pc, #764]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800151a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001526:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ac      	bne.n	80014a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8113 	beq.w	8001782 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001560:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d07c      	beq.n	8001666 <HAL_RCC_OscConfig+0x74e>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800157e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4ba2      	ldr	r3, [pc, #648]	; (8001814 <HAL_RCC_OscConfig+0x8fc>)
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	461a      	mov	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff f94d 	bl	8000834 <HAL_GetTick>
 800159a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff f948 	bl	8000834 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d902      	bls.n	80015b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f000 bcfe 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001602:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b7e      	ldr	r3, [pc, #504]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 8001618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001622:	2102      	movs	r1, #2
 8001624:	6019      	str	r1, [r3, #0]
 8001626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	fa93 f1a3 	rbit	r1, r3
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800163c:	6019      	str	r1, [r3, #0]
  return result;
 800163e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001642:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d09d      	beq.n	80015a0 <HAL_RCC_OscConfig+0x688>
 8001664:	e08d      	b.n	8001782 <HAL_RCC_OscConfig+0x86a>
 8001666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001676:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fa93 f2a3 	rbit	r2, r3
 8001680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001684:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001688:	601a      	str	r2, [r3, #0]
  return result;
 800168a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001692:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x8fc>)
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	461a      	mov	r2, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff f8c4 	bl	8000834 <HAL_GetTick>
 80016ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff f8bf 	bl	8000834 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d902      	bls.n	80016c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f000 bc75 	b.w	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80016c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001732:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 8001736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001740:	2102      	movs	r1, #2
 8001742:	6019      	str	r1, [r3, #0]
 8001744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001748:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f1a3 	rbit	r1, r3
 8001752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001756:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800175a:	6019      	str	r1, [r3, #0]
  return result;
 800175c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001760:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d197      	bne.n	80016b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 81a5 	beq.w	8001ae2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x8f8>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_RCC_OscConfig+0x900>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_RCC_OscConfig+0x900>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x900>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f0:	f7ff f820 	bl	8000834 <HAL_GetTick>
 80017f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	e010      	b.n	800181c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fa:	f7ff f81b 	bl	8000834 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d908      	bls.n	800181c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e3d1      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	10908120 	.word	0x10908120
 8001818:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b8d      	ldr	r3, [pc, #564]	; (8001a54 <HAL_RCC_OscConfig+0xb3c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0e8      	beq.n	80017fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x92e>
 8001838:	4b87      	ldr	r3, [pc, #540]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a86      	ldr	r2, [pc, #536]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e035      	b.n	80018b2 <HAL_RCC_OscConfig+0x99a>
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x958>
 8001856:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a7f      	ldr	r2, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b7d      	ldr	r3, [pc, #500]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a7c      	ldr	r2, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e020      	b.n	80018b2 <HAL_RCC_OscConfig+0x99a>
 8001870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001874:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x982>
 8001880:	4b75      	ldr	r3, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a74      	ldr	r2, [pc, #464]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a71      	ldr	r2, [pc, #452]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x99a>
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a6b      	ldr	r2, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8081 	beq.w	80019c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7fe ffb6 	bl	8000834 <HAL_GetTick>
 80018c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7fe ffb1 	bl	8000834 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e365      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001912:	2202      	movs	r2, #2
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800192c:	601a      	str	r2, [r3, #0]
  return result;
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001936:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0xa3a>
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	e013      	b.n	800197a <HAL_RCC_OscConfig+0xa62>
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800195a:	2202      	movs	r2, #2
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800197e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001982:	2102      	movs	r1, #2
 8001984:	6011      	str	r1, [r2, #0]
 8001986:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800198a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	fa92 f1a2 	rbit	r1, r2
 8001994:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001998:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800199c:	6011      	str	r1, [r2, #0]
  return result;
 800199e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d084      	beq.n	80018ce <HAL_RCC_OscConfig+0x9b6>
 80019c4:	e083      	b.n	8001ace <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7fe ff35 	bl	8000834 <HAL_GetTick>
 80019ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7fe ff30 	bl	8000834 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e2e4      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019f0:	2202      	movs	r2, #2
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a14:	2202      	movs	r2, #2
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a2e:	601a      	str	r2, [r3, #0]
  return result;
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0xb44>
 8001a4e:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_OscConfig+0xb40>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	e017      	b.n	8001a84 <HAL_RCC_OscConfig+0xb6c>
 8001a54:	40007000 	.word	0x40007000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	4bb3      	ldr	r3, [pc, #716]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	6011      	str	r1, [r2, #0]
 8001a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fa92 f1a2 	rbit	r1, r2
 8001a9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001aa6:	6011      	str	r1, [r2, #0]
  return result;
 8001aa8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aac:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	fab2 f282 	clz	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d180      	bne.n	80019d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ace:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a9d      	ldr	r2, [pc, #628]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 825e 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	4b96      	ldr	r3, [pc, #600]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f000 821f 	beq.w	8001f40 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 8170 	bne.w	8001df4 <HAL_RCC_OscConfig+0xedc>
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b38:	601a      	str	r2, [r3, #0]
  return result;
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b42:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	461a      	mov	r2, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fe6b 	bl	8000834 <HAL_GetTick>
 8001b5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	e009      	b.n	8001b78 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7fe fe66 	bl	8000834 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e21c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 8001b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b9c:	601a      	str	r2, [r3, #0]
  return result;
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ba6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_OscConfig+0xcaa>
 8001bbc:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e027      	b.n	8001c12 <HAL_RCC_OscConfig+0xcfa>
 8001bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c16:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c1e:	6011      	str	r1, [r2, #0]
 8001c20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c24:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fa92 f1a2 	rbit	r1, r2
 8001c2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c32:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c36:	6011      	str	r1, [r2, #0]
  return result;
 8001c38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c3c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d182      	bne.n	8001b64 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f023 020f 	bic.w	r2, r3, #15
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a19      	ldr	r1, [r3, #32]
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	492d      	ldr	r1, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cc4:	601a      	str	r2, [r3, #0]
  return result;
 8001cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fda5 	bl	8000834 <HAL_GetTick>
 8001cea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cee:	e009      	b.n	8001d04 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe fda0 	bl	8000834 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e156      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d28:	601a      	str	r2, [r3, #0]
  return result;
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0xe3c>
 8001d48:	4b01      	ldr	r3, [pc, #4]	; (8001d50 <HAL_RCC_OscConfig+0xe38>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e02a      	b.n	8001da4 <HAL_RCC_OscConfig+0xe8c>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_RCC_OscConfig+0x10a4>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fa92 f1a2 	rbit	r1, r2
 8001dc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001dc8:	6011      	str	r1, [r2, #0]
  return result;
 8001dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dce:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f43f af7f 	beq.w	8001cf0 <HAL_RCC_OscConfig+0xdd8>
 8001df2:	e0dd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1098>
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e18:	601a      	str	r2, [r3, #0]
  return result;
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e22:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fcfb 	bl	8000834 <HAL_GetTick>
 8001e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fcf6 	bl	8000834 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ac      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_OscConfig+0xf8a>
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x10a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e027      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfda>
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	fa93 f2a3 	rbit	r2, r3
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x10a4>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001efa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001efe:	6011      	str	r1, [r2, #0]
 8001f00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	fa92 f1a2 	rbit	r1, r2
 8001f0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f12:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f16:	6011      	str	r1, [r2, #0]
  return result;
 8001f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f1c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d182      	bne.n	8001e44 <HAL_RCC_OscConfig+0xf2c>
 8001f3e:	e037      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e02e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_OscConfig+0x10a4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x10a4>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f68:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d117      	bne.n	8001fac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f80:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10b      	bne.n	8001fac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09e      	sub	sp, #120	; 0x78
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e162      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	498b      	ldr	r1, [pc, #556]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e14a      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80dc 	beq.w	80021ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13c      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa6>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_RCC_ClockConfig+0xc6>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208a:	65ba      	str	r2, [r7, #88]	; 0x58
 800208c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d17b      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0f3      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d13c      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x128>
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0x148>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	63ba      	str	r2, [r7, #56]	; 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b2      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00d      	b.n	800217c <HAL_RCC_ClockConfig+0x1bc>
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	617a      	str	r2, [r7, #20]
  return result;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e079      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fb3a 	bl	8000834 <HAL_GetTick>
 80021c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fb36 	bl	8000834 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e061      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	4601      	mov	r1, r0
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	60fa      	str	r2, [r7, #12]
  return result;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x2ec>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fa88 	bl	80007ac <HAL_InitTick>
  
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3778      	adds	r7, #120	; 0x78
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08003e7c 	.word	0x08003e7c
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e03f      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	e03f      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	607a      	str	r2, [r7, #4]
  return result;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	220f      	movs	r2, #15
 800231c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	60fa      	str	r2, [r7, #12]
  return result;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e007      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fbb2 f2f3 	udiv	r2, r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	623b      	str	r3, [r7, #32]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6a3b      	ldr	r3, [r7, #32]
}
 8002370:	4618      	mov	r0, r3
 8002372:	372c      	adds	r7, #44	; 0x2c
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08003e94 	.word	0x08003e94
 8002388:	08003ea4 	.word	0x08003ea4

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023aa:	f7ff ffef 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003e8c 	.word	0x08003e8c

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ee:	f7ff ffcd 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08003e8c 	.word	0x08003e8c

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d4 	beq.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe f9cf 	bl	8000834 <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe f9cb 	bl	8000834 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1d6      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8084 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d07c      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe f97b 	bl	8000834 <HAL_GetTick>
 800253e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe f977 	bl	8000834 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e180      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
  return result;
 8002570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d108      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002586:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e00d      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	10908100 	.word	0x10908100
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b9a      	ldr	r3, [pc, #616]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	613a      	str	r2, [r7, #16]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	60fa      	str	r2, [r7, #12]
  return result;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0b7      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025d2:	4b8f      	ldr	r3, [pc, #572]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	498c      	ldr	r1, [pc, #560]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a87      	ldr	r2, [pc, #540]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002604:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	497f      	ldr	r1, [pc, #508]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002622:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4978      	ldr	r1, [pc, #480]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002640:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4970      	ldr	r1, [pc, #448]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265e:	4b6c      	ldr	r3, [pc, #432]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4969      	ldr	r1, [pc, #420]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800267c:	4b64      	ldr	r3, [pc, #400]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	4961      	ldr	r1, [pc, #388]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f023 0220 	bic.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	495a      	ldr	r1, [pc, #360]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b8:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	4952      	ldr	r1, [pc, #328]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	494b      	ldr	r1, [pc, #300]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4943      	ldr	r1, [pc, #268]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	493c      	ldr	r1, [pc, #240]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	492d      	ldr	r1, [pc, #180]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	4925      	ldr	r1, [pc, #148]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	491e      	ldr	r1, [pc, #120]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	490f      	ldr	r1, [pc, #60]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	e002      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	4913      	ldr	r1, [pc, #76]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002818:	4313      	orrs	r3, r2
 800281a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002836:	4313      	orrs	r3, r2
 8002838:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3748      	adds	r7, #72	; 0x48
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e040      	b.n	80028fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fd fe7a 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fbba 	bl	8003020 <UART_SetConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fd82 	bl	80033c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fe09 	bl	800350c <UART_CheckIdleState>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002918:	2b20      	cmp	r3, #32
 800291a:	d178      	bne.n	8002a0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Transmit+0x24>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e071      	b.n	8002a10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2221      	movs	r2, #33	; 0x21
 8002938:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293a:	f7fd ff7b 	bl	8000834 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x68>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002974:	e030      	b.n	80029d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fe6b 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e03c      	b.n	8002a10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a8:	b292      	uxth	r2, r2
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	3302      	adds	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e008      	b.n	80029c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b292      	uxth	r2, r2
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1c8      	bne.n	8002976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fe34 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e005      	b.n	8002a10 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0ba      	sub	sp, #232	; 0xe8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a46:	4013      	ands	r3, r2
 8002a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d115      	bne.n	8002a80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00f      	beq.n	8002a80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 82ab 	beq.w	8002fcc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
      }
      return;
 8002a7e:	e2a5      	b.n	8002fcc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8117 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a9a:	4b85      	ldr	r3, [pc, #532]	; (8002cb0 <HAL_UART_IRQHandler+0x298>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 810a 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d011      	beq.n	8002ad4 <HAL_UART_IRQHandler+0xbc>
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d011      	beq.n	8002b04 <HAL_UART_IRQHandler+0xec>
 8002ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2202      	movs	r2, #2
 8002af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d011      	beq.n	8002b34 <HAL_UART_IRQHandler+0x11c>
 8002b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2204      	movs	r2, #4
 8002b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d017      	beq.n	8002b70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d012      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x18a>
 8002b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8211 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d04f      	beq.n	8002c9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fe5c 	bl	80038b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d141      	bne.n	8002c92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3308      	adds	r3, #8
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3308      	adds	r3, #8
 8002c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1d9      	bne.n	8002c0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d013      	beq.n	8002c8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_UART_IRQHandler+0x29c>)
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd ff5a 	bl	8000b28 <HAL_DMA_Abort_IT>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c84:	4610      	mov	r0, r2
 8002c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e00f      	b.n	8002caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9be 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	e00b      	b.n	8002caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9ba 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	e007      	b.n	8002caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9b6 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ca8:	e192      	b.n	8002fd0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002caa:	bf00      	nop
    return;
 8002cac:	e190      	b.n	8002fd0 <HAL_UART_IRQHandler+0x5b8>
 8002cae:	bf00      	nop
 8002cb0:	04000120 	.word	0x04000120
 8002cb4:	08003981 	.word	0x08003981

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f040 814b 	bne.w	8002f58 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8144 	beq.w	8002f58 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 813d 	beq.w	8002f58 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	f040 80b5 	bne.w	8002e60 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8164 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d16:	429a      	cmp	r2, r3
 8002d18:	f080 815c 	bcs.w	8002fd4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f000 8086 	beq.w	8002e3e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1da      	bne.n	8002d32 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3308      	adds	r3, #8
 8002d82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002da0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002da4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002da8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e1      	bne.n	8002d7c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ddc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002de2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e3      	bne.n	8002db8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	f023 0310 	bic.w	r3, r3, #16
 8002e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e4      	bne.n	8002dfe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fe3c 	bl	8000ab6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd f9cd 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e5e:	e0b9      	b.n	8002fd4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ab 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80a6 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eae:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e4      	bne.n	8002e8c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e3      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0310 	bic.w	r3, r3, #16
 8002f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	69b9      	ldr	r1, [r7, #24]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e4      	bne.n	8002f0e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd f951 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f56:	e03f      	b.n	8002fd8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <HAL_UART_IRQHandler+0x56a>
 8002f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fee8 	bl	8003d50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f80:	e02d      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00e      	beq.n	8002fac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01c      	beq.n	8002fdc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
    }
    return;
 8002faa:	e017      	b.n	8002fdc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_UART_IRQHandler+0x5c6>
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fcf1 	bl	80039ac <UART_EndTransmit_IT>
    return;
 8002fca:	e008      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fcc:	bf00      	nop
 8002fce:	e006      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fd0:	bf00      	nop
 8002fd2:	e004      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fd4:	bf00      	nop
 8002fd6:	e002      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fdc:	bf00      	nop
  }

}
 8002fde:	37e8      	adds	r7, #232	; 0xe8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b92      	ldr	r3, [pc, #584]	; (8003294 <UART_SetConfig+0x274>)
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a80      	ldr	r2, [pc, #512]	; (8003298 <UART_SetConfig+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d120      	bne.n	80030de <UART_SetConfig+0xbe>
 800309c:	4b7f      	ldr	r3, [pc, #508]	; (800329c <UART_SetConfig+0x27c>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d817      	bhi.n	80030d8 <UART_SetConfig+0xb8>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0x90>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030cd 	.word	0x080030cd
 80030b8:	080030d3 	.word	0x080030d3
 80030bc:	080030c7 	.word	0x080030c7
 80030c0:	2301      	movs	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e0b5      	b.n	8003232 <UART_SetConfig+0x212>
 80030c6:	2302      	movs	r3, #2
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e0b2      	b.n	8003232 <UART_SetConfig+0x212>
 80030cc:	2304      	movs	r3, #4
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e0af      	b.n	8003232 <UART_SetConfig+0x212>
 80030d2:	2308      	movs	r3, #8
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e0ac      	b.n	8003232 <UART_SetConfig+0x212>
 80030d8:	2310      	movs	r3, #16
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e0a9      	b.n	8003232 <UART_SetConfig+0x212>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <UART_SetConfig+0x280>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d124      	bne.n	8003132 <UART_SetConfig+0x112>
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <UART_SetConfig+0x27c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f4:	d011      	beq.n	800311a <UART_SetConfig+0xfa>
 80030f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fa:	d817      	bhi.n	800312c <UART_SetConfig+0x10c>
 80030fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003100:	d011      	beq.n	8003126 <UART_SetConfig+0x106>
 8003102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003106:	d811      	bhi.n	800312c <UART_SetConfig+0x10c>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <UART_SetConfig+0xf4>
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d006      	beq.n	8003120 <UART_SetConfig+0x100>
 8003112:	e00b      	b.n	800312c <UART_SetConfig+0x10c>
 8003114:	2300      	movs	r3, #0
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e08b      	b.n	8003232 <UART_SetConfig+0x212>
 800311a:	2302      	movs	r3, #2
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e088      	b.n	8003232 <UART_SetConfig+0x212>
 8003120:	2304      	movs	r3, #4
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e085      	b.n	8003232 <UART_SetConfig+0x212>
 8003126:	2308      	movs	r3, #8
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e082      	b.n	8003232 <UART_SetConfig+0x212>
 800312c:	2310      	movs	r3, #16
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e07f      	b.n	8003232 <UART_SetConfig+0x212>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5b      	ldr	r2, [pc, #364]	; (80032a4 <UART_SetConfig+0x284>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d124      	bne.n	8003186 <UART_SetConfig+0x166>
 800313c:	4b57      	ldr	r3, [pc, #348]	; (800329c <UART_SetConfig+0x27c>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003144:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003148:	d011      	beq.n	800316e <UART_SetConfig+0x14e>
 800314a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800314e:	d817      	bhi.n	8003180 <UART_SetConfig+0x160>
 8003150:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003154:	d011      	beq.n	800317a <UART_SetConfig+0x15a>
 8003156:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800315a:	d811      	bhi.n	8003180 <UART_SetConfig+0x160>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <UART_SetConfig+0x148>
 8003160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003164:	d006      	beq.n	8003174 <UART_SetConfig+0x154>
 8003166:	e00b      	b.n	8003180 <UART_SetConfig+0x160>
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e061      	b.n	8003232 <UART_SetConfig+0x212>
 800316e:	2302      	movs	r3, #2
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e05e      	b.n	8003232 <UART_SetConfig+0x212>
 8003174:	2304      	movs	r3, #4
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e05b      	b.n	8003232 <UART_SetConfig+0x212>
 800317a:	2308      	movs	r3, #8
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e058      	b.n	8003232 <UART_SetConfig+0x212>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e055      	b.n	8003232 <UART_SetConfig+0x212>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <UART_SetConfig+0x288>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d124      	bne.n	80031da <UART_SetConfig+0x1ba>
 8003190:	4b42      	ldr	r3, [pc, #264]	; (800329c <UART_SetConfig+0x27c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800319c:	d011      	beq.n	80031c2 <UART_SetConfig+0x1a2>
 800319e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a2:	d817      	bhi.n	80031d4 <UART_SetConfig+0x1b4>
 80031a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a8:	d011      	beq.n	80031ce <UART_SetConfig+0x1ae>
 80031aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ae:	d811      	bhi.n	80031d4 <UART_SetConfig+0x1b4>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <UART_SetConfig+0x19c>
 80031b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b8:	d006      	beq.n	80031c8 <UART_SetConfig+0x1a8>
 80031ba:	e00b      	b.n	80031d4 <UART_SetConfig+0x1b4>
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e037      	b.n	8003232 <UART_SetConfig+0x212>
 80031c2:	2302      	movs	r3, #2
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e034      	b.n	8003232 <UART_SetConfig+0x212>
 80031c8:	2304      	movs	r3, #4
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e031      	b.n	8003232 <UART_SetConfig+0x212>
 80031ce:	2308      	movs	r3, #8
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e02e      	b.n	8003232 <UART_SetConfig+0x212>
 80031d4:	2310      	movs	r3, #16
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e02b      	b.n	8003232 <UART_SetConfig+0x212>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <UART_SetConfig+0x28c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d124      	bne.n	800322e <UART_SetConfig+0x20e>
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <UART_SetConfig+0x27c>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031f0:	d011      	beq.n	8003216 <UART_SetConfig+0x1f6>
 80031f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031f6:	d817      	bhi.n	8003228 <UART_SetConfig+0x208>
 80031f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fc:	d011      	beq.n	8003222 <UART_SetConfig+0x202>
 80031fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003202:	d811      	bhi.n	8003228 <UART_SetConfig+0x208>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <UART_SetConfig+0x1f0>
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320c:	d006      	beq.n	800321c <UART_SetConfig+0x1fc>
 800320e:	e00b      	b.n	8003228 <UART_SetConfig+0x208>
 8003210:	2300      	movs	r3, #0
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x212>
 8003216:	2302      	movs	r3, #2
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e00a      	b.n	8003232 <UART_SetConfig+0x212>
 800321c:	2304      	movs	r3, #4
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e007      	b.n	8003232 <UART_SetConfig+0x212>
 8003222:	2308      	movs	r3, #8
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e004      	b.n	8003232 <UART_SetConfig+0x212>
 8003228:	2310      	movs	r3, #16
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e001      	b.n	8003232 <UART_SetConfig+0x212>
 800322e:	2310      	movs	r3, #16
 8003230:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323a:	d16b      	bne.n	8003314 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800323c:	7ffb      	ldrb	r3, [r7, #31]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d838      	bhi.n	80032b4 <UART_SetConfig+0x294>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0x228>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003275 	.word	0x08003275
 8003250:	0800327d 	.word	0x0800327d
 8003254:	080032b5 	.word	0x080032b5
 8003258:	08003283 	.word	0x08003283
 800325c:	080032b5 	.word	0x080032b5
 8003260:	080032b5 	.word	0x080032b5
 8003264:	080032b5 	.word	0x080032b5
 8003268:	0800328b 	.word	0x0800328b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7ff f89a 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003270:	61b8      	str	r0, [r7, #24]
        break;
 8003272:	e024      	b.n	80032be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7ff f8b8 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003278:	61b8      	str	r0, [r7, #24]
        break;
 800327a:	e020      	b.n	80032be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <UART_SetConfig+0x290>)
 800327e:	61bb      	str	r3, [r7, #24]
        break;
 8003280:	e01d      	b.n	80032be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7ff f819 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003286:	61b8      	str	r0, [r7, #24]
        break;
 8003288:	e019      	b.n	80032be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	61bb      	str	r3, [r7, #24]
        break;
 8003290:	e015      	b.n	80032be <UART_SetConfig+0x29e>
 8003292:	bf00      	nop
 8003294:	efff69f3 	.word	0xefff69f3
 8003298:	40013800 	.word	0x40013800
 800329c:	40021000 	.word	0x40021000
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40005000 	.word	0x40005000
 80032b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	77bb      	strb	r3, [r7, #30]
        break;
 80032bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d073      	beq.n	80033ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	005a      	lsls	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d916      	bls.n	800330e <UART_SetConfig+0x2ee>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e6:	d212      	bcs.n	800330e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f023 030f 	bic.w	r3, r3, #15
 80032f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	4313      	orrs	r3, r2
 8003302:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	89fa      	ldrh	r2, [r7, #14]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e04e      	b.n	80033ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77bb      	strb	r3, [r7, #30]
 8003312:	e04b      	b.n	80033ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d827      	bhi.n	800336a <UART_SetConfig+0x34a>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0x300>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003345 	.word	0x08003345
 8003324:	0800334d 	.word	0x0800334d
 8003328:	08003355 	.word	0x08003355
 800332c:	0800336b 	.word	0x0800336b
 8003330:	0800335b 	.word	0x0800335b
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800336b 	.word	0x0800336b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003344:	f7ff f82e 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003348:	61b8      	str	r0, [r7, #24]
        break;
 800334a:	e013      	b.n	8003374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7ff f84c 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003350:	61b8      	str	r0, [r7, #24]
        break;
 8003352:	e00f      	b.n	8003374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <UART_SetConfig+0x3a4>)
 8003356:	61bb      	str	r3, [r7, #24]
        break;
 8003358:	e00c      	b.n	8003374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe ffad 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800335e:	61b8      	str	r0, [r7, #24]
        break;
 8003360:	e008      	b.n	8003374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	61bb      	str	r3, [r7, #24]
        break;
 8003368:	e004      	b.n	8003374 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	77bb      	strb	r3, [r7, #30]
        break;
 8003372:	bf00      	nop
    }

    if (pclk != 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	085a      	lsrs	r2, r3, #1
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d909      	bls.n	80033a8 <UART_SetConfig+0x388>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d205      	bcs.n	80033a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e001      	b.n	80033ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d10a      	bne.n	80034de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	; 0x60
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800351c:	f7fd f98a 	bl	8000834 <HAL_GetTick>
 8003520:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d12e      	bne.n	800358e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f88c 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d021      	beq.n	800358e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
 800356a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800356e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e6      	bne.n	800354a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e062      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d149      	bne.n	8003630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f856 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03c      	beq.n	8003630 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	623b      	str	r3, [r7, #32]
   return(result);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e6      	bne.n	80035b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e011      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3758      	adds	r7, #88	; 0x58
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e049      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d045      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fd f8dd 	bl	8000834 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e048      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d031      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d110      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f8ff 	bl	80038b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2208      	movs	r2, #8
 80036be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e029      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d111      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f8e5 	bl	80038b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00f      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d0a6      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800372c:	b480      	push	{r7}
 800372e:	b097      	sub	sp, #92	; 0x5c
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	d10e      	bne.n	800377e <UART_Start_Receive_IT+0x52>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <UART_Start_Receive_IT+0x48>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800376e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003772:	e02d      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377c:	e028      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <UART_Start_Receive_IT+0x76>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <UART_Start_Receive_IT+0x6c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003796:	e01b      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	227f      	movs	r2, #127	; 0x7f
 800379c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a0:	e016      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037aa:	d10d      	bne.n	80037c8 <UART_Start_Receive_IT+0x9c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <UART_Start_Receive_IT+0x92>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	227f      	movs	r2, #127	; 0x7f
 80037b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037bc:	e008      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	223f      	movs	r2, #63	; 0x3f
 80037c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c6:	e003      	b.n	80037d0 <UART_Start_Receive_IT+0xa4>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2222      	movs	r2, #34	; 0x22
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003800:	64ba      	str	r2, [r7, #72]	; 0x48
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d107      	bne.n	800382e <UART_Start_Receive_IT+0x102>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <UART_Start_Receive_IT+0x184>)
 800382a:	669a      	str	r2, [r3, #104]	; 0x68
 800382c:	e002      	b.n	8003834 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <UART_Start_Receive_IT+0x188>)
 8003832:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d019      	beq.n	8003870 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
 800385c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_Start_Receive_IT+0x110>
 800386e:	e018      	b.n	80038a2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	613b      	str	r3, [r7, #16]
   return(result);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f043 0320 	orr.w	r3, r3, #32
 8003884:	653b      	str	r3, [r7, #80]	; 0x50
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	69f9      	ldr	r1, [r7, #28]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	61bb      	str	r3, [r7, #24]
   return(result);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	375c      	adds	r7, #92	; 0x5c
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	08003ba9 	.word	0x08003ba9
 80038b4:	08003a01 	.word	0x08003a01

080038b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b095      	sub	sp, #84	; 0x54
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
 80038e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e6      	bne.n	80038c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	61fb      	str	r3, [r7, #28]
   return(result);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e5      	bne.n	80038f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	2b01      	cmp	r3, #1
 800392c:	d118      	bne.n	8003960 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	60bb      	str	r3, [r7, #8]
   return(result);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	613b      	str	r3, [r7, #16]
   return(result);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e6      	bne.n	800392e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003974:	bf00      	nop
 8003976:	3754      	adds	r7, #84	; 0x54
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fb34 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6979      	ldr	r1, [r7, #20]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	613b      	str	r3, [r7, #16]
   return(result);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e6      	bne.n	80039b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff faf6 	bl	8002fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f8:	bf00      	nop
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b09c      	sub	sp, #112	; 0x70
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a18:	2b22      	cmp	r3, #34	; 0x22
 8003a1a:	f040 80b9 	bne.w	8003b90 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a2c:	b2d9      	uxtb	r1, r3
 8003a2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	400a      	ands	r2, r1
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 809c 	bne.w	8003ba0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003aba:	647a      	str	r2, [r7, #68]	; 0x44
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	623b      	str	r3, [r7, #32]
   return(result);
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b04:	663b      	str	r3, [r7, #96]	; 0x60
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e6      	bne.n	8003af0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12e      	bne.n	8003b88 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f023 0310 	bic.w	r3, r3, #16
 8003b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e6      	bne.n	8003b30 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d103      	bne.n	8003b78 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fc fb39 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b86:	e00b      	b.n	8003ba0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fa35 	bl	8002ff8 <HAL_UART_RxCpltCallback>
}
 8003b8e:	e007      	b.n	8003ba0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	619a      	str	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	3770      	adds	r7, #112	; 0x70
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b09c      	sub	sp, #112	; 0x70
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc0:	2b22      	cmp	r3, #34	; 0x22
 8003bc2:	f040 80b9 	bne.w	8003d38 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003bda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003bde:	4013      	ands	r3, r2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 809c 	bne.w	8003d48 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c24:	667b      	str	r3, [r7, #100]	; 0x64
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c62:	643a      	str	r2, [r7, #64]	; 0x40
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d018      	beq.n	8003cca <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d12e      	bne.n	8003d30 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d103      	bne.n	8003d20 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fc fa65 	bl	80001f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d2e:	e00b      	b.n	8003d48 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff f961 	bl	8002ff8 <HAL_UART_RxCpltCallback>
}
 8003d36:	e007      	b.n	8003d48 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	3770      	adds	r7, #112	; 0x70
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d142      	bne.n	8003e02 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e03b      	b.n	8003e04 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fcc4 	bl	800372c <UART_Start_Receive_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d124      	bne.n	8003dfc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11d      	bne.n	8003df6 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f043 0310 	orr.w	r3, r3, #16
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003df4:	e002      	b.n	8003dfc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e00:	e000      	b.n	8003e04 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3730      	adds	r7, #48	; 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <memset>:
 8003e0c:	4402      	add	r2, r0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d100      	bne.n	8003e16 <memset+0xa>
 8003e14:	4770      	bx	lr
 8003e16:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1a:	e7f9      	b.n	8003e10 <memset+0x4>

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	; (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	; (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2600      	movs	r6, #0
 8003e28:	42a6      	cmp	r6, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	; (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	; (8003e60 <__libc_init_array+0x44>)
 8003e30:	f000 f818 	bl	8003e64 <_init>
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2600      	movs	r6, #0
 8003e3a:	42a6      	cmp	r6, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e44:	4798      	blx	r3
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4e:	4798      	blx	r3
 8003e50:	3601      	adds	r6, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	08003eb4 	.word	0x08003eb4
 8003e58:	08003eb4 	.word	0x08003eb4
 8003e5c:	08003eb4 	.word	0x08003eb4
 8003e60:	08003eb8 	.word	0x08003eb8

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
