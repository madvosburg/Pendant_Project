
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080046dc  080046dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046dc  080046dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080046e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000360  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f9a7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002134  00000000  00000000  0002fa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d50  00000000  00000000  00031bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a75  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020b12  00000000  00000000  0003337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011164  00000000  00000000  00053e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9e9b  00000000  00000000  00064ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a0c  00000000  00000000  0012ee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013289c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004580 	.word	0x08004580

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08004580 	.word	0x08004580

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <bitmask_set>:
char tmp[10];

/**
 * sets specific button pressed
 */
void bitmask_set(uint32_t bit_position){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	bit |= (1 << bit_position);
 80001ec:	2201      	movs	r2, #1
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	fa02 f303 	lsl.w	r3, r2, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <bitmask_set+0x28>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <bitmask_set+0x28>)
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	200001ec 	.word	0x200001ec

08000210 <bitmask_clear>:

/**
 * clears specific button pressed
 */
void bitmask_clear(uint32_t bit_position){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	 bit &= ~(1 << bit_position);
 8000218:	2201      	movs	r2, #1
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	fa02 f303 	lsl.w	r3, r2, r3
 8000220:	43db      	mvns	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <bitmask_clear+0x2c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4013      	ands	r3, r2
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <bitmask_clear+0x2c>)
 800022c:	6013      	str	r3, [r2, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200001ec 	.word	0x200001ec

08000240 <bitmask_check>:

/**
 * checks if specific button is pressed
 */
uint8_t bitmask_check(uint32_t bit_position){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	if(bit & (1 << bit_position)){
 8000248:	2201      	movs	r2, #1
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	fa02 f303 	lsl.w	r3, r2, r3
 8000250:	461a      	mov	r2, r3
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <bitmask_check+0x30>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4013      	ands	r3, r2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <bitmask_check+0x20>
		return 1;
 800025c:	2301      	movs	r3, #1
 800025e:	e000      	b.n	8000262 <bitmask_check+0x22>
	}else{
		return 0;
 8000260:	2300      	movs	r3, #0
	}
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	200001ec 	.word	0x200001ec

08000274 <xor>:

/**
 * XOR logic used to divide data by key
 */
void xor(char* str1, char* str2){
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 5; i++){
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e017      	b.n	80002b4 <xor+0x40>
		if(str1[i] == str2[i]){
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	6839      	ldr	r1, [r7, #0]
 8000290:	440b      	add	r3, r1
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d105      	bne.n	80002a4 <xor+0x30>
			result[i] = '0';			//if bits are same, XOR is 0
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <xor+0x58>)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	4413      	add	r3, r2
 800029e:	2230      	movs	r2, #48	; 0x30
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e004      	b.n	80002ae <xor+0x3a>
		}else{
			result[i] = '1';			//if bits are different, XOR is 1
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <xor+0x58>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	4413      	add	r3, r2
 80002aa:	2231      	movs	r2, #49	; 0x31
 80002ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	3301      	adds	r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	dde4      	ble.n	8000284 <xor+0x10>
		}
	}
	result[4] = '\0';
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <xor+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	711a      	strb	r2, [r3, #4]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	20000250 	.word	0x20000250

080002d0 <toStr>:

/**
 * converts uint32 to string
 */
void toStr(){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	uint32_t temp = data;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <toStr+0x54>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++){
 80002dc:	2300      	movs	r3, #0
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e015      	b.n	800030e <toStr+0x3e>
		if(temp & 1){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d005      	beq.n	80002f8 <toStr+0x28>
			data_str[i] = '1';
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <toStr+0x58>)
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	2231      	movs	r2, #49	; 0x31
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e004      	b.n	8000302 <toStr+0x32>
		}else{
			data_str[i] = '0';
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <toStr+0x58>)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	4413      	add	r3, r2
 80002fe:	2230      	movs	r2, #48	; 0x30
 8000300:	701a      	strb	r2, [r3, #0]
		}
		temp = temp >> 1;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	085b      	lsrs	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 32; i++){
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b1f      	cmp	r3, #31
 8000312:	dde6      	ble.n	80002e2 <toStr+0x12>
	}
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	200001f0 	.word	0x200001f0
 8000328:	200001f8 	.word	0x200001f8

0800032c <division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
void division(){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	int dividend_len = strlen(appended_data);
 8000332:	482c      	ldr	r0, [pc, #176]	; (80003e4 <division+0xb8>)
 8000334:	f7ff ff4e 	bl	80001d4 <strlen>
 8000338:	4603      	mov	r3, r0
 800033a:	603b      	str	r3, [r7, #0]
	int xor_bits = 4;
 800033c:	2304      	movs	r3, #4
 800033e:	607b      	str	r3, [r7, #4]

	strncpy(tmp, appended_data, xor_bits);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	461a      	mov	r2, r3
 8000344:	4927      	ldr	r1, [pc, #156]	; (80003e4 <division+0xb8>)
 8000346:	4828      	ldr	r0, [pc, #160]	; (80003e8 <division+0xbc>)
 8000348:	f004 f8d5 	bl	80044f6 <strncpy>

	while(xor_bits < dividend_len){
 800034c:	e029      	b.n	80003a2 <division+0x76>
		if(tmp[0] == '1'){		//if leftmost bit is 1, perform xor with key
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <division+0xbc>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b31      	cmp	r3, #49	; 0x31
 8000354:	d111      	bne.n	800037a <division+0x4e>
			xor(key, tmp);
 8000356:	4924      	ldr	r1, [pc, #144]	; (80003e8 <division+0xbc>)
 8000358:	4824      	ldr	r0, [pc, #144]	; (80003ec <division+0xc0>)
 800035a:	f7ff ff8b 	bl	8000274 <xor>
			strncpy(tmp, result+1, 4);
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <division+0xc4>)
 8000360:	2204      	movs	r2, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4820      	ldr	r0, [pc, #128]	; (80003e8 <division+0xbc>)
 8000366:	f004 f8c6 	bl	80044f6 <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <division+0xb8>)
 800036e:	4413      	add	r3, r2
 8000370:	4619      	mov	r1, r3
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <division+0xbc>)
 8000374:	f004 f8b0 	bl	80044d8 <strcat>
 8000378:	e010      	b.n	800039c <division+0x70>
		}else{					//if leftmost bit is 0, perform xor with string of zeros
			xor("0000", tmp);
 800037a:	491b      	ldr	r1, [pc, #108]	; (80003e8 <division+0xbc>)
 800037c:	481d      	ldr	r0, [pc, #116]	; (80003f4 <division+0xc8>)
 800037e:	f7ff ff79 	bl	8000274 <xor>
			strncpy(tmp, result+1, 4);
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <division+0xc4>)
 8000384:	2204      	movs	r2, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4817      	ldr	r0, [pc, #92]	; (80003e8 <division+0xbc>)
 800038a:	f004 f8b4 	bl	80044f6 <strncpy>
			strcat(tmp, &appended_data[xor_bits]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <division+0xb8>)
 8000392:	4413      	add	r3, r2
 8000394:	4619      	mov	r1, r3
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <division+0xbc>)
 8000398:	f004 f89e 	bl	80044d8 <strcat>
		}
		xor_bits++;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
	while(xor_bits < dividend_len){
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	dbd1      	blt.n	800034e <division+0x22>
	}

	if(tmp[0] == '1'){
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <division+0xbc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b31      	cmp	r3, #49	; 0x31
 80003b0:	d108      	bne.n	80003c4 <division+0x98>
		xor(key, tmp);
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <division+0xbc>)
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <division+0xc0>)
 80003b6:	f7ff ff5d 	bl	8000274 <xor>
		strcpy(tmp, result);
 80003ba:	490f      	ldr	r1, [pc, #60]	; (80003f8 <division+0xcc>)
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <division+0xbc>)
 80003be:	f004 f8d7 	bl	8004570 <strcpy>
 80003c2:	e007      	b.n	80003d4 <division+0xa8>
	}else{
		xor("0000", tmp);
 80003c4:	4908      	ldr	r1, [pc, #32]	; (80003e8 <division+0xbc>)
 80003c6:	480b      	ldr	r0, [pc, #44]	; (80003f4 <division+0xc8>)
 80003c8:	f7ff ff54 	bl	8000274 <xor>
		strcpy(tmp, result);
 80003cc:	490a      	ldr	r1, [pc, #40]	; (80003f8 <division+0xcc>)
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <division+0xbc>)
 80003d0:	f004 f8ce 	bl	8004570 <strcpy>
	}
	strcpy(remain, tmp);
 80003d4:	4904      	ldr	r1, [pc, #16]	; (80003e8 <division+0xbc>)
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <division+0xd0>)
 80003d8:	f004 f8ca 	bl	8004570 <strcpy>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000228 	.word	0x20000228
 80003e8:	20000280 	.word	0x20000280
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000251 	.word	0x20000251
 80003f4:	08004598 	.word	0x08004598
 80003f8:	20000250 	.word	0x20000250
 80003fc:	20000220 	.word	0x20000220

08000400 <str_rev>:

/**
 * reverses string
 */
char* str_rev(char* str){
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff fee3 	bl	80001d4 <strlen>
 800040e:	4603      	mov	r3, r0
 8000410:	60fb      	str	r3, [r7, #12]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3b01      	subs	r3, #1
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	e017      	b.n	800044e <str_rev+0x4e>
		char c = str[i];
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	72fb      	strb	r3, [r7, #11]
		str[i] = str[j];
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	441a      	add	r2, r3
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	440b      	add	r3, r1
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	701a      	strb	r2, [r3, #0]
		str[j] = c;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	7afa      	ldrb	r2, [r7, #11]
 8000440:	701a      	strb	r2, [r3, #0]
	for(int i = 0, j = len - 1; i <= j; i++, j--){
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	3b01      	subs	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	429a      	cmp	r2, r3
 8000454:	dde3      	ble.n	800041e <str_rev+0x1e>
	}
	return str;
 8000456:	687b      	ldr	r3, [r7, #4]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <encode_crc>:

/**
 * encodes crc values and appends them to send
 */
void encode_crc(){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
	toStr();
 8000466:	f7ff ff33 	bl	80002d0 <toStr>

	//appends n-1 zeros to data
	strcpy(appended_data, "000");
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <encode_crc+0x84>)
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <encode_crc+0x88>)
 800046e:	601a      	str	r2, [r3, #0]
	strcat(appended_data, data_str);
 8000470:	491e      	ldr	r1, [pc, #120]	; (80004ec <encode_crc+0x8c>)
 8000472:	481c      	ldr	r0, [pc, #112]	; (80004e4 <encode_crc+0x84>)
 8000474:	f004 f830 	bl	80044d8 <strcat>
	strcpy(appended_data, str_rev(appended_data));
 8000478:	481a      	ldr	r0, [pc, #104]	; (80004e4 <encode_crc+0x84>)
 800047a:	f7ff ffc1 	bl	8000400 <str_rev>
 800047e:	4603      	mov	r3, r0
 8000480:	4619      	mov	r1, r3
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <encode_crc+0x84>)
 8000484:	f004 f874 	bl	8004570 <strcpy>

	division();
 8000488:	f7ff ff50 	bl	800032c <division>

	//appends data and remainder
	char temp[10];
	strcpy(send_data, str_rev(data_str));
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <encode_crc+0x8c>)
 800048e:	f7ff ffb7 	bl	8000400 <str_rev>
 8000492:	4603      	mov	r3, r0
 8000494:	4619      	mov	r1, r3
 8000496:	4816      	ldr	r0, [pc, #88]	; (80004f0 <encode_crc+0x90>)
 8000498:	f004 f86a 	bl	8004570 <strcpy>
	strncpy(temp, remain+1, 4);
 800049c:	4915      	ldr	r1, [pc, #84]	; (80004f4 <encode_crc+0x94>)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2204      	movs	r2, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f004 f827 	bl	80044f6 <strncpy>
	strcat(send_data, temp);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <encode_crc+0x90>)
 80004ae:	f004 f813 	bl	80044d8 <strcat>

	char *endptr;
	TxData[0] = strtol(data_str, &endptr, 2);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2202      	movs	r2, #2
 80004b6:	4619      	mov	r1, r3
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <encode_crc+0x8c>)
 80004ba:	f003 fffb 	bl	80044b4 <strtol>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <encode_crc+0x98>)
 80004c4:	601a      	str	r2, [r3, #0]
	TxData[1] = strtol(send_data, &endptr, 2);
 80004c6:	463b      	mov	r3, r7
 80004c8:	2202      	movs	r2, #2
 80004ca:	4619      	mov	r1, r3
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <encode_crc+0x90>)
 80004ce:	f003 fff1 	bl	80044b4 <strtol>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <encode_crc+0x98>)
 80004d8:	605a      	str	r2, [r3, #4]
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000228 	.word	0x20000228
 80004e8:	00303030 	.word	0x00303030
 80004ec:	200001f8 	.word	0x200001f8
 80004f0:	20000258 	.word	0x20000258
 80004f4:	20000221 	.word	0x20000221
 80004f8:	200001e0 	.word	0x200001e0

080004fc <sendData>:

/**
 * sends data with crc every 10ms
 */
void sendData(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	encode_crc();
 8000500:	f7ff ffae 	bl	8000460 <encode_crc>

	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fc39 	bl	8000d7c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)TxData, sizeof(TxData), 1000);
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	220c      	movs	r2, #12
 8000510:	4902      	ldr	r1, [pc, #8]	; (800051c <sendData+0x20>)
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <sendData+0x24>)
 8000514:	f002 ff88 	bl	8003428 <HAL_UART_Transmit>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200001e0 	.word	0x200001e0
 8000520:	200000d0 	.word	0x200000d0

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fbc2 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f852 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f92e 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f8fc 	bl	8000730 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f8ca 	bl	80006d0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800053c:	f000 f8a2 	bl	8000684 <MX_TIM16_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sendData();
 8000540:	f7ff ffdc 	bl	80004fc <sendData>
	  	  if(bitmask_check(0)) //red
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fe7b 	bl	8000240 <bitmask_check>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00a      	beq.n	8000566 <main+0x42>
	  	  {
	  		  data = 1;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <main+0xac>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
	  		  sendData();
 8000556:	f7ff ffd1 	bl	80004fc <sendData>
	  		  data = 0;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <main+0xac>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff fe55 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(1)) //green
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff fe6a 	bl	8000240 <bitmask_check>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00a      	beq.n	8000588 <main+0x64>
	  	  {
	  		  data = 2;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <main+0xac>)
 8000574:	2202      	movs	r2, #2
 8000576:	601a      	str	r2, [r3, #0]
	  		  sendData();
 8000578:	f7ff ffc0 	bl	80004fc <sendData>
	  		  data = 0;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <main+0xac>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff fe44 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(2)) //yellow
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff fe59 	bl	8000240 <bitmask_check>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00a      	beq.n	80005aa <main+0x86>
	  	  {
	  		  data = 3;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0xac>)
 8000596:	2203      	movs	r2, #3
 8000598:	601a      	str	r2, [r3, #0]
	  		  sendData();
 800059a:	f7ff ffaf 	bl	80004fc <sendData>
	  		  data = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <main+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(2);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff fe33 	bl	8000210 <bitmask_clear>
	  	  }
	  	  if(bitmask_check(3)) //blue
 80005aa:	2003      	movs	r0, #3
 80005ac:	f7ff fe48 	bl	8000240 <bitmask_check>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0c4      	beq.n	8000540 <main+0x1c>
	  	  {
	  		  data = 4;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <main+0xac>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	601a      	str	r2, [r3, #0]
	  		  sendData();
 80005bc:	f7ff ff9e 	bl	80004fc <sendData>
	  		  data = 0;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <main+0xac>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	  		  bitmask_clear(3);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f7ff fe22 	bl	8000210 <bitmask_clear>
	  sendData();
 80005cc:	e7b8      	b.n	8000540 <main+0x1c>
 80005ce:	bf00      	nop
 80005d0:	200001f0 	.word	0x200001f0

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0a6      	sub	sp, #152	; 0x98
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005de:	2228      	movs	r2, #40	; 0x28
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ff70 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2258      	movs	r2, #88	; 0x58
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 ff62 	bl	80044c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff13 	bl	8001448 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000628:	f000 f9d0 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 ff52 	bl	80024f0 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000652:	f000 f9bb 	bl	80009cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <SystemClock_Config+0xac>)
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f977 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000674:	f000 f9aa 	bl	80009cc <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3798      	adds	r7, #152	; 0x98
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	00800003 	.word	0x00800003

08000684 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_TIM16_Init+0x44>)
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <MX_TIM16_Init+0x48>)
 800068c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 159;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_TIM16_Init+0x44>)
 8000690:	229f      	movs	r2, #159	; 0x9f
 8000692:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_TIM16_Init+0x44>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_TIM16_Init+0x44>)
 800069c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_TIM16_Init+0x44>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_TIM16_Init+0x44>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_TIM16_Init+0x44>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_TIM16_Init+0x44>)
 80006b6:	f002 fb6f 	bl	8002d98 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006c0:	f000 f984 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40014400 	.word	0x40014400

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART1_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000714:	f002 fe3a 	bl	800338c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f955 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d0 	.word	0x200000d0
 800072c:	40013800 	.word	0x40013800

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	f002 fe0a 	bl	800338c <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f925 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000158 	.word	0x20000158
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <MX_GPIO_Init+0xcc>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <MX_GPIO_Init+0xcc>)
 80007ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_GPIO_Init+0xcc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_GPIO_Init+0xcc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a26      	ldr	r2, [pc, #152]	; (800085c <MX_GPIO_Init+0xcc>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_GPIO_Init+0xcc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_GPIO_Init+0xcc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <MX_GPIO_Init+0xcc>)
 80007dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_GPIO_Init+0xcc>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_GPIO_Init+0xd0>)
 8000804:	f000 fc66 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000808:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_GPIO_Init+0xd4>)
 8000820:	f000 fc58 	bl	80010d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2008      	movs	r0, #8
 800082a:	f000 fba6 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800082e:	2008      	movs	r0, #8
 8000830:	f000 fbbf 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2009      	movs	r0, #9
 800083a:	f000 fb9e 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800083e:	2009      	movs	r0, #9
 8000840:	f000 fbb7 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f000 fb96 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084e:	2028      	movs	r0, #40	; 0x28
 8000850:	f000 fbaf 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800
 8000864:	48000400 	.word	0x48000400

08000868 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
	  UNUSED(GPIO_Pin);

  if (GPIO_Pin == GPIO_PIN_2){
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d10a      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0x26>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000878:	2104      	movs	r1, #4
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x90>)
 800087c:	f000 fdb4 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_GPIO_EXTI_Callback+0x94>)
 8000886:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_1;	//red
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_GPIO_EXTI_Callback+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_3){
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b08      	cmp	r3, #8
 8000892:	d10a      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x42>
	  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000894:	2108      	movs	r1, #8
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000898:	f000 fda6 	bl	80013e8 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_GPIO_EXTI_Callback+0x94>)
 80008a2:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_2;	//green
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_GPIO_EXTI_Callback+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_14){
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008b0:	d10b      	bne.n	80008ca <HAL_GPIO_EXTI_Callback+0x62>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80008b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008b8:	f000 fd96 	bl	80013e8 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_GPIO_EXTI_Callback+0x94>)
 80008c2:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_3;	//yellow
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_GPIO_EXTI_Callback+0x98>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_15){
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008d0:	d10b      	bne.n	80008ea <HAL_GPIO_EXTI_Callback+0x82>
	  state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80008d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008d8:	f000 fd86 	bl	80013e8 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_GPIO_EXTI_Callback+0x94>)
 80008e2:	701a      	strb	r2, [r3, #0]
	  button = BUTTON_4;	//blue
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_GPIO_EXTI_Callback+0x98>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	701a      	strb	r2, [r3, #0]
  }
  HAL_TIM_Base_Start_IT(&htim16);
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <HAL_GPIO_EXTI_Callback+0xa0>)
 80008ec:	f002 faac 	bl	8002e48 <HAL_TIM_Base_Start_IT>

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	48000800 	.word	0x48000800
 80008fc:	200001f4 	.word	0x200001f4
 8000900:	20000000 	.word	0x20000000
 8000904:	48000400 	.word	0x48000400
 8000908:	20000084 	.word	0x20000084

0800090c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	 UNUSED(htim);

	if(htim == &htim16){
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d145      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == state && button == BUTTON_1){
 800091c:	2104      	movs	r1, #4
 800091e:	4827      	ldr	r0, [pc, #156]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000920:	f000 fd62 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d106      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x32>
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x32>
			bitmask_set(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fc53 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == state && button == BUTTON_2){
 800093e:	2108      	movs	r1, #8
 8000940:	481e      	ldr	r0, [pc, #120]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000942:	f000 fd51 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d106      	bne.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d102      	bne.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x54>
			bitmask_set(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fc42 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == state && button == BUTTON_3){
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000966:	f000 fd3f 	bl	80013e8 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d106      	bne.n	8000984 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d102      	bne.n	8000984 <HAL_TIM_PeriodElapsedCallback+0x78>
			bitmask_set(2);
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff fc30 	bl	80001e4 <bitmask_set>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == state && button == BUTTON_4){
 8000984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800098a:	f000 fd2d 	bl	80013e8 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d106      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d102      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			bitmask_set(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff fc1e 	bl	80001e4 <bitmask_set>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009aa:	f002 fabd 	bl	8002f28 <HAL_TIM_Base_Stop_IT>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000084 	.word	0x20000084
 80009bc:	48000800 	.word	0x48000800
 80009c0:	200001f4 	.word	0x200001f4
 80009c4:	20000000 	.word	0x20000000
 80009c8:	48000400 	.word	0x48000400

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x44>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6193      	str	r3, [r2, #24]
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x44>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x44>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x44>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_TIM_Base_MspInit+0x44>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d113      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2019      	movs	r0, #25
 8000a50:	f000 fa93 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a54:	2019      	movs	r0, #25
 8000a56:	f000 faac 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40014400 	.word	0x40014400
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a36      	ldr	r2, [pc, #216]	; (8000b64 <HAL_UART_MspInit+0xf8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a35      	ldr	r2, [pc, #212]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000abe:	2330      	movs	r3, #48	; 0x30
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <HAL_UART_MspInit+0x100>)
 8000ada:	f000 fafb 	bl	80010d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2025      	movs	r0, #37	; 0x25
 8000ae4:	f000 fa49 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae8:	2025      	movs	r0, #37	; 0x25
 8000aea:	f000 fa62 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aee:	e035      	b.n	8000b5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_UART_MspInit+0x104>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d130      	bne.n	8000b5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fac4 	bl	80010d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f000 fa12 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b56:	2026      	movs	r0, #38	; 0x26
 8000b58:	f000 fa2b 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	40004400 	.word	0x40004400

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8bc 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f000 fc23 	bl	8001418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000bda:	2008      	movs	r0, #8
 8000bdc:	f000 fc1c 	bl	8001418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bea:	f002 f9cc 	bl	8002f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000084 	.word	0x20000084

08000bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART1_IRQHandler+0x10>)
 8000bfe:	f002 fc9d 	bl	800353c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000d0 	.word	0x200000d0

08000c0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <USART2_IRQHandler+0x10>)
 8000c12:	f002 fc93 	bl	800353c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000158 	.word	0x20000158

08000c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c28:	f000 fbf6 	bl	8001418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c30:	f000 fbf2 	bl	8001418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 fc4d 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fc49 	bl	8000524 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca0:	080046e4 	.word	0x080046e4
  ldr r2, =_sbss
 8000ca4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca8:	200003c8 	.word	0x200003c8

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f94f 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe84 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f967 	bl	8000fce <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f92f 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	20000014 	.word	0x20000014
 8000d38:	20000010 	.word	0x20000010

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000014 	.word	0x20000014
 8000d60:	2000028c 	.word	0x2000028c

08000d64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000028c 	.word	0x2000028c

08000d7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000014 	.word	0x20000014

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff3e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff31 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffa2 	bl	8000f20 <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d008      	beq.n	800100a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e020      	b.n	800104c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020e 	bic.w	r2, r2, #14
 8001018:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800106a:	2b02      	cmp	r3, #2
 800106c:	d005      	beq.n	800107a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2204      	movs	r2, #4
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e027      	b.n	80010ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	4798      	blx	r3
    } 
  }
  return status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	e160      	b.n	80013a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	2101      	movs	r1, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8152 	beq.w	80013a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d005      	beq.n	8001114 <HAL_GPIO_Init+0x40>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d130      	bne.n	8001176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114a:	2201      	movs	r2, #1
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 0201 	and.w	r2, r3, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b03      	cmp	r3, #3
 8001180:	d017      	beq.n	80011b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d123      	bne.n	8001206 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0203 	and.w	r2, r3, #3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80ac 	beq.w	80013a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001248:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <HAL_GPIO_Init+0x2f0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a5d      	ldr	r2, [pc, #372]	; (80013c4 <HAL_GPIO_Init+0x2f0>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_GPIO_Init+0x2f0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001260:	4a59      	ldr	r2, [pc, #356]	; (80013c8 <HAL_GPIO_Init+0x2f4>)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800128a:	d025      	beq.n	80012d8 <HAL_GPIO_Init+0x204>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x2f8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d01f      	beq.n	80012d4 <HAL_GPIO_Init+0x200>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x2fc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d019      	beq.n	80012d0 <HAL_GPIO_Init+0x1fc>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x300>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d013      	beq.n	80012cc <HAL_GPIO_Init+0x1f8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x304>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d00d      	beq.n	80012c8 <HAL_GPIO_Init+0x1f4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x308>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d007      	beq.n	80012c4 <HAL_GPIO_Init+0x1f0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d101      	bne.n	80012c0 <HAL_GPIO_Init+0x1ec>
 80012bc:	2306      	movs	r3, #6
 80012be:	e00c      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012c0:	2307      	movs	r3, #7
 80012c2:	e00a      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012c4:	2305      	movs	r3, #5
 80012c6:	e008      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012cc:	2303      	movs	r3, #3
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x206>
 80012d8:	2300      	movs	r3, #0
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ea:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x2f4>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_GPIO_Init+0x310>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800131c:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <HAL_GPIO_Init+0x310>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_GPIO_Init+0x310>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_GPIO_Init+0x310>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae97 	bne.w	80010e4 <HAL_GPIO_Init+0x10>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	48001800 	.word	0x48001800
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fa16 	bl	8000868 <HAL_GPIO_EXTI_Callback>
  }
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800144e:	af00      	add	r7, sp, #0
 8001450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001458:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f001 b83a 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001472:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 816f 	beq.w	8001762 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001484:	4bb5      	ldr	r3, [pc, #724]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00c      	beq.n	80014aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001490:	4bb2      	ldr	r3, [pc, #712]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d15c      	bne.n	8001556 <HAL_RCC_OscConfig+0x10e>
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <HAL_RCC_OscConfig+0x314>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d155      	bne.n	8001556 <HAL_RCC_OscConfig+0x10e>
 80014aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	095b      	lsrs	r3, r3, #5
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x94>
 80014d6:	4ba1      	ldr	r3, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0xc0>
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80014f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001504:	4b95      	ldr	r3, [pc, #596]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800150c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001510:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001514:	fa92 f2a2 	rbit	r2, r2
 8001518:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800151c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001520:	fab2 f282 	clz	r2, r2
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f042 0220 	orr.w	r2, r2, #32
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f002 021f 	and.w	r2, r2, #31
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8111 	beq.w	8001760 <HAL_RCC_OscConfig+0x318>
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8108 	bne.w	8001760 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	f000 bfc6 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x12e>
 8001568:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x314>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7b      	ldr	r2, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x314>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e036      	b.n	80015e4 <HAL_RCC_OscConfig+0x19c>
 8001576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x158>
 8001586:	4b75      	ldr	r3, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a74      	ldr	r2, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x314>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e021      	b.n	80015e4 <HAL_RCC_OscConfig+0x19c>
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x184>
 80015b2:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x19c>
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a62      	ldr	r2, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a5f      	ldr	r2, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80015de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d059      	beq.n	80016a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbb6 	bl	8000d64 <HAL_GetTick>
 80015f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7ff fbb1 	bl	8000d64 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d902      	bls.n	8001614 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	f000 bf67 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001618:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001628:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x1fe>
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x22a>
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800165a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001662:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001676:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800167a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800167e:	fa92 f2a2 	rbit	r2, r2
 8001682:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001686:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800168a:	fab2 f282 	clz	r2, r2
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f002 021f 	and.w	r2, r2, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ab      	beq.n	80015fe <HAL_RCC_OscConfig+0x1b6>
 80016a6:	e05c      	b.n	8001762 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb5c 	bl	8000d64 <HAL_GetTick>
 80016ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb57 	bl	8000d64 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d902      	bls.n	80016c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f000 bf0d 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x2b2>
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_OscConfig+0x314>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x2de>
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800170e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001712:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001716:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_RCC_OscConfig+0x314>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800172e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001732:	fa92 f2a2 	rbit	r2, r2
 8001736:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800173a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f002 021f 	and.w	r2, r2, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ab      	bne.n	80016b2 <HAL_RCC_OscConfig+0x26a>
 800175a:	e002      	b.n	8001762 <HAL_RCC_OscConfig+0x31a>
 800175c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001766:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 817f 	beq.w	8001a76 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001778:	4ba7      	ldr	r3, [pc, #668]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001784:	4ba4      	ldr	r3, [pc, #656]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d173      	bne.n	8001878 <HAL_RCC_OscConfig+0x430>
 8001790:	4ba1      	ldr	r3, [pc, #644]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179c:	d16c      	bne.n	8001878 <HAL_RCC_OscConfig+0x430>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x386>
 80017c8:	4b93      	ldr	r3, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x3ae>
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	2202      	movs	r2, #2
 80017f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001800:	fa92 f2a2 	rbit	r2, r2
 8001804:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001808:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_RCC_OscConfig+0x3f6>
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d002      	beq.n	800183e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f000 be52 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	21f8      	movs	r1, #248	; 0xf8
 8001854:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800185c:	fa91 f1a1 	rbit	r1, r1
 8001860:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001864:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001868:	fab1 f181 	clz	r1, r1
 800186c:	b2c9      	uxtb	r1, r1
 800186e:	408b      	lsls	r3, r1
 8001870:	4969      	ldr	r1, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e0fe      	b.n	8001a76 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8088 	beq.w	800199a <HAL_RCC_OscConfig+0x552>
 800188a:	2301      	movs	r3, #1
 800188c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800189c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	461a      	mov	r2, r3
 80018b2:	2301      	movs	r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa55 	bl	8000d64 <HAL_GetTick>
 80018ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fa50 	bl	8000d64 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d902      	bls.n	80018d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f000 be06 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x4be>
 8001900:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e013      	b.n	800192e <HAL_RCC_OscConfig+0x4e6>
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800191e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2202      	movs	r2, #2
 8001930:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001934:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001938:	fa92 f2a2 	rbit	r2, r2
 800193c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001940:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001944:	fab2 f282 	clz	r2, r2
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f042 0220 	orr.w	r2, r2, #32
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0af      	beq.n	80018c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	21f8      	movs	r1, #248	; 0xf8
 8001976:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800197e:	fa91 f1a1 	rbit	r1, r1
 8001982:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001986:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800198a:	fab1 f181 	clz	r1, r1
 800198e:	b2c9      	uxtb	r1, r1
 8001990:	408b      	lsls	r3, r1
 8001992:	4921      	ldr	r1, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e06d      	b.n	8001a76 <HAL_RCC_OscConfig+0x62e>
 800199a:	2301      	movs	r3, #1
 800199c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80019ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	461a      	mov	r2, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f9cd 	bl	8000d64 <HAL_GetTick>
 80019ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff f9c8 	bl	8000d64 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d902      	bls.n	80019e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f000 bd7e 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5d4>
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <HAL_RCC_OscConfig+0x5d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e016      	b.n	8001a44 <HAL_RCC_OscConfig+0x5fc>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a40:	4bbf      	ldr	r3, [pc, #764]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2202      	movs	r2, #2
 8001a46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a4a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ac      	bne.n	80019d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8113 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d07c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x74e>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001aae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4ba2      	ldr	r3, [pc, #648]	; (8001d44 <HAL_RCC_OscConfig+0x8fc>)
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f94d 	bl	8000d64 <HAL_GetTick>
 8001aca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f948 	bl	8000d64 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d902      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f000 bcfe 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b52:	2102      	movs	r1, #2
 8001b54:	6019      	str	r1, [r3, #0]
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f1a3 	rbit	r1, r3
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b6c:	6019      	str	r1, [r3, #0]
  return result;
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d09d      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x688>
 8001b94:	e08d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x86a>
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bb8:	601a      	str	r2, [r3, #0]
  return result;
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bc2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x8fc>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f8c4 	bl	8000d64 <HAL_GetTick>
 8001bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff f8bf 	bl	8000d64 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d902      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	f000 bc75 	b.w	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c48:	2202      	movs	r2, #2
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c70:	2102      	movs	r1, #2
 8001c72:	6019      	str	r1, [r3, #0]
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f1a3 	rbit	r1, r3
 8001c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c86:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c8a:	6019      	str	r1, [r3, #0]
  return result;
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d197      	bne.n	8001be2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 81a5 	beq.w	8002012 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_RCC_OscConfig+0x8f8>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_RCC_OscConfig+0x900>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d121      	bne.n	8001d58 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x900>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x900>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d20:	f7ff f820 	bl	8000d64 <HAL_GetTick>
 8001d24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e010      	b.n	8001d4c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff f81b 	bl	8000d64 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e3d1      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	10908120 	.word	0x10908120
 8001d48:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <HAL_RCC_OscConfig+0xb3c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0e8      	beq.n	8001d2a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x92e>
 8001d68:	4b87      	ldr	r3, [pc, #540]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a86      	ldr	r2, [pc, #536]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e035      	b.n	8001de2 <HAL_RCC_OscConfig+0x99a>
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x958>
 8001d86:	4b80      	ldr	r3, [pc, #512]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a7f      	ldr	r2, [pc, #508]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b7d      	ldr	r3, [pc, #500]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a7c      	ldr	r2, [pc, #496]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e020      	b.n	8001de2 <HAL_RCC_OscConfig+0x99a>
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x982>
 8001db0:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a74      	ldr	r2, [pc, #464]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a71      	ldr	r2, [pc, #452]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x99a>
 8001dca:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a6e      	ldr	r2, [pc, #440]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a6b      	ldr	r2, [pc, #428]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8081 	beq.w	8001ef6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffb6 	bl	8000d64 <HAL_GetTick>
 8001df8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ffb1 	bl	8000d64 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e365      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e42:	2202      	movs	r2, #2
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e5c:	601a      	str	r2, [r3, #0]
  return result;
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_OscConfig+0xa3a>
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0xa62>
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fa92 f1a2 	rbit	r1, r2
 8001ec4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ecc:	6011      	str	r1, [r2, #0]
  return result;
 8001ece:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d084      	beq.n	8001dfe <HAL_RCC_OscConfig+0x9b6>
 8001ef4:	e083      	b.n	8001ffe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff35 	bl	8000d64 <HAL_GetTick>
 8001efa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff30 	bl	8000d64 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e2e4      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f5e:	601a      	str	r2, [r3, #0]
  return result;
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0xb44>
 8001f7e:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_RCC_OscConfig+0xb40>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	e017      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb6c>
 8001f84:	40007000 	.word	0x40007000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001faa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4bb3      	ldr	r3, [pc, #716]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fb8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	6011      	str	r1, [r2, #0]
 8001fc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	fa92 f1a2 	rbit	r1, r2
 8001fce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fd6:	6011      	str	r1, [r2, #0]
  return result;
 8001fd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fdc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d180      	bne.n	8001f00 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ffe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b9e      	ldr	r3, [pc, #632]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a9d      	ldr	r2, [pc, #628]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 825e 	beq.w	80024e0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b96      	ldr	r3, [pc, #600]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	f000 821f 	beq.w	8002470 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 8170 	bne.w	8002324 <HAL_RCC_OscConfig+0xedc>
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800204c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002072:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2300      	movs	r3, #0
 8002088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fe6b 	bl	8000d64 <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fe66 	bl	8000d64 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e21c      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0xcaa>
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e027      	b.n	8002142 <HAL_RCC_OscConfig+0xcfa>
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002146:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800214a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800214e:	6011      	str	r1, [r2, #0]
 8002150:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002154:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fa92 f1a2 	rbit	r1, r2
 800215e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002162:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002166:	6011      	str	r1, [r2, #0]
  return result;
 8002168:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800216c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d182      	bne.n	8002094 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	4937      	ldr	r1, [pc, #220]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80021b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a19      	ldr	r1, [r3, #32]
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
 80021d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800220a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	2301      	movs	r3, #1
 8002214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fda5 	bl	8000d64 <HAL_GetTick>
 800221a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fda0 	bl	8000d64 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e156      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800223c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002258:	601a      	str	r2, [r3, #0]
  return result;
 800225a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002262:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCC_OscConfig+0xe3c>
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <HAL_RCC_OscConfig+0xe38>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	e02a      	b.n	80022d4 <HAL_RCC_OscConfig+0xe8c>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002288:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002296:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b86      	ldr	r3, [pc, #536]	; (80024ec <HAL_RCC_OscConfig+0x10a4>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	fa92 f1a2 	rbit	r1, r2
 80022f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022f4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022f8:	6011      	str	r1, [r2, #0]
  return result;
 80022fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022fe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	f43f af7f 	beq.w	8002220 <HAL_RCC_OscConfig+0xdd8>
 8002322:	e0dd      	b.n	80024e0 <HAL_RCC_OscConfig+0x1098>
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800232c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002336:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002348:	601a      	str	r2, [r3, #0]
  return result;
 800234a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002352:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800235e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fcfb 	bl	8000d64 <HAL_GetTick>
 800236e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e009      	b.n	8002388 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fcf6 	bl	8000d64 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0ac      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0xf8a>
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x10a4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e027      	b.n	8002422 <HAL_RCC_OscConfig+0xfda>
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002418:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_OscConfig+0x10a4>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002426:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800242a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002434:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fa92 f1a2 	rbit	r1, r2
 800243e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002442:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800244c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d182      	bne.n	8002374 <HAL_RCC_OscConfig+0xf2c>
 800246e:	e037      	b.n	80024e0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e02e      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x10a4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_RCC_OscConfig+0x10a4>)
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002494:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002498:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800249c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d117      	bne.n	80024dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024b0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b09e      	sub	sp, #120	; 0x78
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e162      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b90      	ldr	r3, [pc, #576]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b8d      	ldr	r3, [pc, #564]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	498b      	ldr	r1, [pc, #556]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b89      	ldr	r3, [pc, #548]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e14a      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b82      	ldr	r3, [pc, #520]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	497f      	ldr	r1, [pc, #508]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80dc 	beq.w	800271c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d13c      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xf6>
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800257a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d102      	bne.n	8002596 <HAL_RCC_ClockConfig+0xa6>
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	e00f      	b.n	80025b6 <HAL_RCC_ClockConfig+0xc6>
 8002596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	667b      	str	r3, [r7, #100]	; 0x64
 80025a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
 80025aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80025bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025be:	fa92 f2a2 	rbit	r2, r2
 80025c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025c6:	fab2 f282 	clz	r2, r2
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f042 0220 	orr.w	r2, r2, #32
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f002 021f 	and.w	r2, r2, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d17b      	bne.n	80026da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0f3      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d13c      	bne.n	8002668 <HAL_RCC_ClockConfig+0x178>
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d102      	bne.n	8002618 <HAL_RCC_ClockConfig+0x128>
 8002612:	4b4f      	ldr	r3, [pc, #316]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	e00f      	b.n	8002638 <HAL_RCC_ClockConfig+0x148>
 8002618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
 8002626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262a:	643b      	str	r3, [r7, #64]	; 0x40
 800262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002634:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	63ba      	str	r2, [r7, #56]	; 0x38
 800263e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d13a      	bne.n	80026da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b2      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
 8002668:	2302      	movs	r3, #2
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1a0>
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e00d      	b.n	80026ac <HAL_RCC_ClockConfig+0x1bc>
 8002690:	2302      	movs	r3, #2
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	2302      	movs	r3, #2
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2202      	movs	r2, #2
 80026ae:	61ba      	str	r2, [r7, #24]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	617a      	str	r2, [r7, #20]
  return result;
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e079      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	491a      	ldr	r1, [pc, #104]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fb3a 	bl	8000d64 <HAL_GetTick>
 80026f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fb36 	bl	8000d64 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e061      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_ClockConfig+0x260>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d214      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4906      	ldr	r1, [pc, #24]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_ClockConfig+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e040      	b.n	80027ce <HAL_RCC_ClockConfig+0x2de>
 800274c:	40022000 	.word	0x40022000
 8002750:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	491a      	ldr	r1, [pc, #104]	; (80027d8 <HAL_RCC_ClockConfig+0x2e8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4912      	ldr	r1, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x2e8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002792:	f000 f829 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_RCC_ClockConfig+0x2e8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a0:	22f0      	movs	r2, #240	; 0xf0
 80027a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	60fa      	str	r2, [r7, #12]
  return result;
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	40d3      	lsrs	r3, r2
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x2ec>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	fa21 f303 	lsr.w	r3, r1, r3
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_RCC_ClockConfig+0x2f0>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_RCC_ClockConfig+0x2f4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fa88 	bl	8000cdc <HAL_InitTick>
  
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3778      	adds	r7, #120	; 0x78
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	080045a0 	.word	0x080045a0
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	20000010 	.word	0x20000010

080027e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b04      	cmp	r3, #4
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x30>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x36>
 8002816:	e03f      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	e03f      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002824:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002828:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	607a      	str	r2, [r7, #4]
  return result;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	40d3      	lsrs	r3, r2
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	220f      	movs	r2, #15
 800284c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	60fa      	str	r2, [r7, #12]
  return result;
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	40d3      	lsrs	r3, r2
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002870:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	fbb2 f2f3 	udiv	r2, r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	e007      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fbb2 f2f3 	udiv	r2, r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	623b      	str	r3, [r7, #32]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800289a:	623b      	str	r3, [r7, #32]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	6a3b      	ldr	r3, [r7, #32]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	372c      	adds	r7, #44	; 0x2c
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	007a1200 	.word	0x007a1200
 80028b4:	080045b8 	.word	0x080045b8
 80028b8:	080045c8 	.word	0x080045c8

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000000c 	.word	0x2000000c

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028da:	f7ff ffef 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028de:	4601      	mov	r1, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	fa92 f2a2 	rbit	r2, r2
 80028f4:	603a      	str	r2, [r7, #0]
  return result;
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	40d3      	lsrs	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	080045b0 	.word	0x080045b0

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800291e:	f7ff ffcd 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800292c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002930:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	fa92 f2a2 	rbit	r2, r2
 8002938:	603a      	str	r2, [r7, #0]
  return result;
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	40d3      	lsrs	r3, r2
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	080045b0 	.word	0x080045b0

0800295c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b092      	sub	sp, #72	; 0x48
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80d4 	beq.w	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002980:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10e      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b48      	ldr	r3, [pc, #288]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a41      	ldr	r2, [pc, #260]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe f9cf 	bl	8000d64 <HAL_GetTick>
 80029c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe f9cb 	bl	8000d64 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d901      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1d6      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8084 	beq.w	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d07c      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	461a      	mov	r2, r3
 8002a56:	2300      	movs	r3, #0
 8002a58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d04b      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe f97b 	bl	8000d64 <HAL_GetTick>
 8002a6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe f977 	bl	8000d64 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e180      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ab6:	4b01      	ldr	r3, [pc, #4]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	e00d      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	10908100 	.word	0x10908100
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	4b9a      	ldr	r3, [pc, #616]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2202      	movs	r2, #2
 8002ada:	613a      	str	r2, [r7, #16]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	fa92 f2a2 	rbit	r2, r2
 8002ae2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	fab2 f282 	clz	r2, r2
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f002 021f 	and.w	r2, r2, #31
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0b7      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b02:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	498c      	ldr	r1, [pc, #560]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b34:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f023 0203 	bic.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	497f      	ldr	r1, [pc, #508]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b52:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4978      	ldr	r1, [pc, #480]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4970      	ldr	r1, [pc, #448]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f023 0210 	bic.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4969      	ldr	r1, [pc, #420]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bac:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	4961      	ldr	r1, [pc, #388]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f023 0220 	bic.w	r2, r3, #32
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	495a      	ldr	r1, [pc, #360]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002be8:	4b55      	ldr	r3, [pc, #340]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	4952      	ldr	r1, [pc, #328]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c06:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	494b      	ldr	r1, [pc, #300]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4943      	ldr	r1, [pc, #268]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	493c      	ldr	r1, [pc, #240]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c60:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	4934      	ldr	r1, [pc, #208]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c7e:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	492d      	ldr	r1, [pc, #180]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	4925      	ldr	r1, [pc, #148]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	491e      	ldr	r1, [pc, #120]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	4916      	ldr	r1, [pc, #88]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	490f      	ldr	r1, [pc, #60]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d46:	4913      	ldr	r1, [pc, #76]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d64:	490b      	ldr	r1, [pc, #44]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3748      	adds	r7, #72	; 0x48
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e049      	b.n	8002e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd fe2e 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 fa1c 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d001      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04f      	b.n	8002f00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d018      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x76>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d115      	bne.n	8002eea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d015      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0xb4>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d011      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	e008      	b.n	8002efc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e000      	b.n	8002efe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40015000 	.word	0x40015000
 8002f24:	00010007 	.word	0x00010007

08002f28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <HAL_TIM_Base_Stop_IT+0x48>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1a      	ldr	r2, [r3, #32]
 8002f56:	f240 4344 	movw	r3, #1092	; 0x444
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_TIM_Base_Stop_IT+0x48>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d122      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0202 	mvn.w	r2, #2
 8002fb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f905 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8002fce:	e005      	b.n	8002fdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8f7 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f908 	bl	80031ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d122      	bne.n	8003036 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d11b      	bne.n	8003036 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0204 	mvn.w	r2, #4
 8003006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8db 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8003022:	e005      	b.n	8003030 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8cd 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8de 	bl	80031ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d122      	bne.n	800308a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11b      	bne.n	800308a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0208 	mvn.w	r2, #8
 800305a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2204      	movs	r2, #4
 8003060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8b1 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8003076:	e005      	b.n	8003084 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8a3 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8b4 	bl	80031ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b10      	cmp	r3, #16
 8003096:	d122      	bne.n	80030de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d11b      	bne.n	80030de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0210 	mvn.w	r2, #16
 80030ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2208      	movs	r2, #8
 80030b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f887 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 80030ca:	e005      	b.n	80030d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f879 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f88a 	bl	80031ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10e      	bne.n	800310a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0201 	mvn.w	r2, #1
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd fc01 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d10e      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d107      	bne.n	8003136 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800312e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f917 	bl	8003364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f90a 	bl	8003378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f838 	bl	8003200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0220 	mvn.w	r2, #32
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8ca 	bl	8003350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a42      	ldr	r2, [pc, #264]	; (8003330 <TIM_Base_SetConfig+0x11c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d00f      	beq.n	8003254 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <TIM_Base_SetConfig+0x120>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00b      	beq.n	8003254 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3e      	ldr	r2, [pc, #248]	; (8003338 <TIM_Base_SetConfig+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3d      	ldr	r2, [pc, #244]	; (800333c <TIM_Base_SetConfig+0x128>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3c      	ldr	r2, [pc, #240]	; (8003340 <TIM_Base_SetConfig+0x12c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d108      	bne.n	8003266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <TIM_Base_SetConfig+0x11c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d01b      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <TIM_Base_SetConfig+0x120>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d017      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <TIM_Base_SetConfig+0x124>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <TIM_Base_SetConfig+0x128>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00f      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <TIM_Base_SetConfig+0x130>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <TIM_Base_SetConfig+0x134>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	; (800334c <TIM_Base_SetConfig+0x138>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_Base_SetConfig+0x9a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a25      	ldr	r2, [pc, #148]	; (8003340 <TIM_Base_SetConfig+0x12c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d108      	bne.n	80032c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <TIM_Base_SetConfig+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <TIM_Base_SetConfig+0x100>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <TIM_Base_SetConfig+0x128>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00f      	beq.n	8003314 <TIM_Base_SetConfig+0x100>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <TIM_Base_SetConfig+0x130>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_Base_SetConfig+0x100>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <TIM_Base_SetConfig+0x134>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_Base_SetConfig+0x100>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <TIM_Base_SetConfig+0x138>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0x100>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <TIM_Base_SetConfig+0x12c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40013400 	.word	0x40013400
 8003340:	40015000 	.word	0x40015000
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e040      	b.n	8003420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fb5c 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fbbc 	bl	8003b48 <UART_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fd84 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fe0b 	bl	8004034 <UART_CheckIdleState>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800343c:	2b20      	cmp	r3, #32
 800343e:	d178      	bne.n	8003532 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Transmit+0x24>
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e071      	b.n	8003534 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2221      	movs	r2, #33	; 0x21
 800345c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800345e:	f7fd fc81 	bl	8000d64 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d108      	bne.n	8003490 <HAL_UART_Transmit+0x68>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e003      	b.n	8003498 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003498:	e030      	b.n	80034fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fe6d 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e03c      	b.n	8003534 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034cc:	b292      	uxth	r2, r2
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	3302      	adds	r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e008      	b.n	80034ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b292      	uxth	r2, r2
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1c8      	bne.n	800349a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	2140      	movs	r1, #64	; 0x40
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fe36 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e005      	b.n	8003534 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0ba      	sub	sp, #232	; 0xe8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003566:	f640 030f 	movw	r3, #2063	; 0x80f
 800356a:	4013      	ands	r3, r2
 800356c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d115      	bne.n	80035a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00f      	beq.n	80035a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 82ab 	beq.w	8003af0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
      }
      return;
 80035a2:	e2a5      	b.n	8003af0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8117 	beq.w	80037dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035be:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_UART_IRQHandler+0x298>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 810a 	beq.w	80037dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_UART_IRQHandler+0xbc>
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d011      	beq.n	8003628 <HAL_UART_IRQHandler+0xec>
 8003604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_UART_IRQHandler+0x11c>
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2204      	movs	r2, #4
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003674:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	f043 0208 	orr.w	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_UART_IRQHandler+0x18a>
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8211 	beq.w	8003af4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04f      	beq.n	80037be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fd97 	bl	8004252 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d141      	bne.n	80037b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800375e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800376a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1d9      	bne.n	8003732 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_UART_IRQHandler+0x29c>)
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fc60 	bl	8001058 <HAL_DMA_Abort_IT>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037a8:	4610      	mov	r0, r2
 80037aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00f      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9b4 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00b      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9b0 	bl	8003b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e007      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f9ac 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80037cc:	e192      	b.n	8003af4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ce:	bf00      	nop
    return;
 80037d0:	e190      	b.n	8003af4 <HAL_UART_IRQHandler+0x5b8>
 80037d2:	bf00      	nop
 80037d4:	04000120 	.word	0x04000120
 80037d8:	0800431b 	.word	0x0800431b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	f040 814b 	bne.w	8003a7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8144 	beq.w	8003a7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 813d 	beq.w	8003a7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	f040 80b5 	bne.w	8003984 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003826:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8164 	beq.w	8003af8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383a:	429a      	cmp	r2, r3
 800383c:	f080 815c 	bcs.w	8003af8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b20      	cmp	r3, #32
 8003852:	f000 8086 	beq.w	8003962 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800386a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800386e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003872:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003884:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800388c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1da      	bne.n	8003856 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e1      	bne.n	80038a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003900:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003902:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800390e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e3      	bne.n	80038dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003944:	65bb      	str	r3, [r7, #88]	; 0x58
 8003946:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800394a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e4      	bne.n	8003922 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd fb42 	bl	8000fe6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003974:	b29b      	uxth	r3, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8d7 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003982:	e0b9      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003990:	b29b      	uxth	r3, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80ab 	beq.w	8003afc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80039a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a6 	beq.w	8003afc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039d2:	647b      	str	r3, [r7, #68]	; 0x44
 80039d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e4      	bne.n	80039b0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	623b      	str	r3, [r7, #32]
   return(result);
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e3      	bne.n	80039e6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e4      	bne.n	8003a32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f85b 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a7a:	e03f      	b.n	8003afc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00e      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x56a>
 8003a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fc7b 	bl	800439a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aa4:	e02d      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01c      	beq.n	8003b00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
    }
    return;
 8003ace:	e017      	b.n	8003b00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fc2c 	bl	8004346 <UART_EndTransmit_IT>
    return;
 8003aee:	e008      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003af0:	bf00      	nop
 8003af2:	e006      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003af4:	bf00      	nop
 8003af6:	e004      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003af8:	bf00      	nop
 8003afa:	e002      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b00:	bf00      	nop
  }

}
 8003b02:	37e8      	adds	r7, #232	; 0xe8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b92      	ldr	r3, [pc, #584]	; (8003dbc <UART_SetConfig+0x274>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a80      	ldr	r2, [pc, #512]	; (8003dc0 <UART_SetConfig+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d120      	bne.n	8003c06 <UART_SetConfig+0xbe>
 8003bc4:	4b7f      	ldr	r3, [pc, #508]	; (8003dc4 <UART_SetConfig+0x27c>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d817      	bhi.n	8003c00 <UART_SetConfig+0xb8>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x90>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bf5 	.word	0x08003bf5
 8003be0:	08003bfb 	.word	0x08003bfb
 8003be4:	08003bef 	.word	0x08003bef
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0b5      	b.n	8003d5a <UART_SetConfig+0x212>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0b2      	b.n	8003d5a <UART_SetConfig+0x212>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0af      	b.n	8003d5a <UART_SetConfig+0x212>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e0ac      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e0a9      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <UART_SetConfig+0x280>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d124      	bne.n	8003c5a <UART_SetConfig+0x112>
 8003c10:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <UART_SetConfig+0x27c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1c:	d011      	beq.n	8003c42 <UART_SetConfig+0xfa>
 8003c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c22:	d817      	bhi.n	8003c54 <UART_SetConfig+0x10c>
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c28:	d011      	beq.n	8003c4e <UART_SetConfig+0x106>
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2e:	d811      	bhi.n	8003c54 <UART_SetConfig+0x10c>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <UART_SetConfig+0xf4>
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d006      	beq.n	8003c48 <UART_SetConfig+0x100>
 8003c3a:	e00b      	b.n	8003c54 <UART_SetConfig+0x10c>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e08b      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c42:	2302      	movs	r3, #2
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e088      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e085      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e082      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c54:	2310      	movs	r3, #16
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e07f      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	; (8003dcc <UART_SetConfig+0x284>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d124      	bne.n	8003cae <UART_SetConfig+0x166>
 8003c64:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <UART_SetConfig+0x27c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c70:	d011      	beq.n	8003c96 <UART_SetConfig+0x14e>
 8003c72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c76:	d817      	bhi.n	8003ca8 <UART_SetConfig+0x160>
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7c:	d011      	beq.n	8003ca2 <UART_SetConfig+0x15a>
 8003c7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c82:	d811      	bhi.n	8003ca8 <UART_SetConfig+0x160>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <UART_SetConfig+0x148>
 8003c88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8c:	d006      	beq.n	8003c9c <UART_SetConfig+0x154>
 8003c8e:	e00b      	b.n	8003ca8 <UART_SetConfig+0x160>
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e061      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e05e      	b.n	8003d5a <UART_SetConfig+0x212>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e05b      	b.n	8003d5a <UART_SetConfig+0x212>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e058      	b.n	8003d5a <UART_SetConfig+0x212>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e055      	b.n	8003d5a <UART_SetConfig+0x212>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a47      	ldr	r2, [pc, #284]	; (8003dd0 <UART_SetConfig+0x288>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d124      	bne.n	8003d02 <UART_SetConfig+0x1ba>
 8003cb8:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <UART_SetConfig+0x27c>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003cc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cc4:	d011      	beq.n	8003cea <UART_SetConfig+0x1a2>
 8003cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cca:	d817      	bhi.n	8003cfc <UART_SetConfig+0x1b4>
 8003ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd0:	d011      	beq.n	8003cf6 <UART_SetConfig+0x1ae>
 8003cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd6:	d811      	bhi.n	8003cfc <UART_SetConfig+0x1b4>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <UART_SetConfig+0x19c>
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d006      	beq.n	8003cf0 <UART_SetConfig+0x1a8>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x1b4>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e037      	b.n	8003d5a <UART_SetConfig+0x212>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e034      	b.n	8003d5a <UART_SetConfig+0x212>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e031      	b.n	8003d5a <UART_SetConfig+0x212>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e02e      	b.n	8003d5a <UART_SetConfig+0x212>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e02b      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <UART_SetConfig+0x28c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d124      	bne.n	8003d56 <UART_SetConfig+0x20e>
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <UART_SetConfig+0x27c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d18:	d011      	beq.n	8003d3e <UART_SetConfig+0x1f6>
 8003d1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d1e:	d817      	bhi.n	8003d50 <UART_SetConfig+0x208>
 8003d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d24:	d011      	beq.n	8003d4a <UART_SetConfig+0x202>
 8003d26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d2a:	d811      	bhi.n	8003d50 <UART_SetConfig+0x208>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0x1f0>
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d006      	beq.n	8003d44 <UART_SetConfig+0x1fc>
 8003d36:	e00b      	b.n	8003d50 <UART_SetConfig+0x208>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e00a      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d44:	2304      	movs	r3, #4
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e007      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e004      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d50:	2310      	movs	r3, #16
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e001      	b.n	8003d5a <UART_SetConfig+0x212>
 8003d56:	2310      	movs	r3, #16
 8003d58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	d16b      	bne.n	8003e3c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d838      	bhi.n	8003ddc <UART_SetConfig+0x294>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <UART_SetConfig+0x228>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003ddd 	.word	0x08003ddd
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003ddd 	.word	0x08003ddd
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe fd9e 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003d98:	61b8      	str	r0, [r7, #24]
        break;
 8003d9a:	e024      	b.n	8003de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fdbc 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8003da0:	61b8      	str	r0, [r7, #24]
        break;
 8003da2:	e020      	b.n	8003de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <UART_SetConfig+0x290>)
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e01d      	b.n	8003de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe fd1d 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8003dae:	61b8      	str	r0, [r7, #24]
        break;
 8003db0:	e019      	b.n	8003de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e015      	b.n	8003de6 <UART_SetConfig+0x29e>
 8003dba:	bf00      	nop
 8003dbc:	efff69f3 	.word	0xefff69f3
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	40004c00 	.word	0x40004c00
 8003dd4:	40005000 	.word	0x40005000
 8003dd8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77bb      	strb	r3, [r7, #30]
        break;
 8003de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d073      	beq.n	8003ed4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	005a      	lsls	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d916      	bls.n	8003e36 <UART_SetConfig+0x2ee>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0e:	d212      	bcs.n	8003e36 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f023 030f 	bic.w	r3, r3, #15
 8003e18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	89fb      	ldrh	r3, [r7, #14]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	89fa      	ldrh	r2, [r7, #14]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	e04e      	b.n	8003ed4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	77bb      	strb	r3, [r7, #30]
 8003e3a:	e04b      	b.n	8003ed4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e3c:	7ffb      	ldrb	r3, [r7, #31]
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d827      	bhi.n	8003e92 <UART_SetConfig+0x34a>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x300>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fd32 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003e70:	61b8      	str	r0, [r7, #24]
        break;
 8003e72:	e013      	b.n	8003e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fd50 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8003e78:	61b8      	str	r0, [r7, #24]
        break;
 8003e7a:	e00f      	b.n	8003e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <UART_SetConfig+0x3a4>)
 8003e7e:	61bb      	str	r3, [r7, #24]
        break;
 8003e80:	e00c      	b.n	8003e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fcb1 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8003e86:	61b8      	str	r0, [r7, #24]
        break;
 8003e88:	e008      	b.n	8003e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e004      	b.n	8003e9c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	77bb      	strb	r3, [r7, #30]
        break;
 8003e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	085a      	lsrs	r2, r3, #1
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d909      	bls.n	8003ed0 <UART_SetConfig+0x388>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d205      	bcs.n	8003ed0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	e001      	b.n	8003ed4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b098      	sub	sp, #96	; 0x60
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004044:	f7fc fe8e 	bl	8000d64 <HAL_GetTick>
 8004048:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d12e      	bne.n	80040b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f88c 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d021      	beq.n	80040b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	653b      	str	r3, [r7, #80]	; 0x50
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e6      	bne.n	8004072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e062      	b.n	800417c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d149      	bne.n	8004158 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	2200      	movs	r2, #0
 80040ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f856 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03c      	beq.n	8004158 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	623b      	str	r3, [r7, #32]
   return(result);
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 80040fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	617b      	str	r3, [r7, #20]
   return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e011      	b.n	800417c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3758      	adds	r7, #88	; 0x58
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	e049      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d045      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fc fde1 	bl	8000d64 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e048      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d031      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d110      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2208      	movs	r2, #8
 80041da:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f838 	bl	8004252 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2208      	movs	r2, #8
 80041e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e029      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d111      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f81e 	bl	8004252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e00f      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d0a6      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004252:	b480      	push	{r7}
 8004254:	b095      	sub	sp, #84	; 0x54
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
 800427a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800427e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	61fb      	str	r3, [r7, #28]
   return(result);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e5      	bne.n	800428c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d118      	bne.n	80042fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6979      	ldr	r1, [r7, #20]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	613b      	str	r3, [r7, #16]
   return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e6      	bne.n	80042c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800430e:	bf00      	nop
 8004310:	3754      	adds	r7, #84	; 0x54
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fbef 	bl	8003b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60bb      	str	r3, [r7, #8]
   return(result);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fbbb 	bl	8003b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004392:	bf00      	nop
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <_strtol_l.constprop.0>:
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b6:	d001      	beq.n	80043bc <_strtol_l.constprop.0+0xc>
 80043b8:	2b24      	cmp	r3, #36	; 0x24
 80043ba:	d906      	bls.n	80043ca <_strtol_l.constprop.0+0x1a>
 80043bc:	f000 f8ae 	bl	800451c <__errno>
 80043c0:	2316      	movs	r3, #22
 80043c2:	6003      	str	r3, [r0, #0]
 80043c4:	2000      	movs	r0, #0
 80043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80044b0 <_strtol_l.constprop.0+0x100>
 80043ce:	460d      	mov	r5, r1
 80043d0:	462e      	mov	r6, r5
 80043d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043d6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80043da:	f017 0708 	ands.w	r7, r7, #8
 80043de:	d1f7      	bne.n	80043d0 <_strtol_l.constprop.0+0x20>
 80043e0:	2c2d      	cmp	r4, #45	; 0x2d
 80043e2:	d132      	bne.n	800444a <_strtol_l.constprop.0+0x9a>
 80043e4:	782c      	ldrb	r4, [r5, #0]
 80043e6:	2701      	movs	r7, #1
 80043e8:	1cb5      	adds	r5, r6, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d05b      	beq.n	80044a6 <_strtol_l.constprop.0+0xf6>
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d109      	bne.n	8004406 <_strtol_l.constprop.0+0x56>
 80043f2:	2c30      	cmp	r4, #48	; 0x30
 80043f4:	d107      	bne.n	8004406 <_strtol_l.constprop.0+0x56>
 80043f6:	782c      	ldrb	r4, [r5, #0]
 80043f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043fc:	2c58      	cmp	r4, #88	; 0x58
 80043fe:	d14d      	bne.n	800449c <_strtol_l.constprop.0+0xec>
 8004400:	786c      	ldrb	r4, [r5, #1]
 8004402:	2310      	movs	r3, #16
 8004404:	3502      	adds	r5, #2
 8004406:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800440a:	f108 38ff 	add.w	r8, r8, #4294967295
 800440e:	f04f 0e00 	mov.w	lr, #0
 8004412:	fbb8 f9f3 	udiv	r9, r8, r3
 8004416:	4676      	mov	r6, lr
 8004418:	fb03 8a19 	mls	sl, r3, r9, r8
 800441c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004420:	f1bc 0f09 	cmp.w	ip, #9
 8004424:	d816      	bhi.n	8004454 <_strtol_l.constprop.0+0xa4>
 8004426:	4664      	mov	r4, ip
 8004428:	42a3      	cmp	r3, r4
 800442a:	dd24      	ble.n	8004476 <_strtol_l.constprop.0+0xc6>
 800442c:	f1be 3fff 	cmp.w	lr, #4294967295
 8004430:	d008      	beq.n	8004444 <_strtol_l.constprop.0+0x94>
 8004432:	45b1      	cmp	r9, r6
 8004434:	d31c      	bcc.n	8004470 <_strtol_l.constprop.0+0xc0>
 8004436:	d101      	bne.n	800443c <_strtol_l.constprop.0+0x8c>
 8004438:	45a2      	cmp	sl, r4
 800443a:	db19      	blt.n	8004470 <_strtol_l.constprop.0+0xc0>
 800443c:	fb06 4603 	mla	r6, r6, r3, r4
 8004440:	f04f 0e01 	mov.w	lr, #1
 8004444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004448:	e7e8      	b.n	800441c <_strtol_l.constprop.0+0x6c>
 800444a:	2c2b      	cmp	r4, #43	; 0x2b
 800444c:	bf04      	itt	eq
 800444e:	782c      	ldrbeq	r4, [r5, #0]
 8004450:	1cb5      	addeq	r5, r6, #2
 8004452:	e7ca      	b.n	80043ea <_strtol_l.constprop.0+0x3a>
 8004454:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004458:	f1bc 0f19 	cmp.w	ip, #25
 800445c:	d801      	bhi.n	8004462 <_strtol_l.constprop.0+0xb2>
 800445e:	3c37      	subs	r4, #55	; 0x37
 8004460:	e7e2      	b.n	8004428 <_strtol_l.constprop.0+0x78>
 8004462:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004466:	f1bc 0f19 	cmp.w	ip, #25
 800446a:	d804      	bhi.n	8004476 <_strtol_l.constprop.0+0xc6>
 800446c:	3c57      	subs	r4, #87	; 0x57
 800446e:	e7db      	b.n	8004428 <_strtol_l.constprop.0+0x78>
 8004470:	f04f 3eff 	mov.w	lr, #4294967295
 8004474:	e7e6      	b.n	8004444 <_strtol_l.constprop.0+0x94>
 8004476:	f1be 3fff 	cmp.w	lr, #4294967295
 800447a:	d105      	bne.n	8004488 <_strtol_l.constprop.0+0xd8>
 800447c:	2322      	movs	r3, #34	; 0x22
 800447e:	6003      	str	r3, [r0, #0]
 8004480:	4646      	mov	r6, r8
 8004482:	b942      	cbnz	r2, 8004496 <_strtol_l.constprop.0+0xe6>
 8004484:	4630      	mov	r0, r6
 8004486:	e79e      	b.n	80043c6 <_strtol_l.constprop.0+0x16>
 8004488:	b107      	cbz	r7, 800448c <_strtol_l.constprop.0+0xdc>
 800448a:	4276      	negs	r6, r6
 800448c:	2a00      	cmp	r2, #0
 800448e:	d0f9      	beq.n	8004484 <_strtol_l.constprop.0+0xd4>
 8004490:	f1be 0f00 	cmp.w	lr, #0
 8004494:	d000      	beq.n	8004498 <_strtol_l.constprop.0+0xe8>
 8004496:	1e69      	subs	r1, r5, #1
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	e7f3      	b.n	8004484 <_strtol_l.constprop.0+0xd4>
 800449c:	2430      	movs	r4, #48	; 0x30
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1b1      	bne.n	8004406 <_strtol_l.constprop.0+0x56>
 80044a2:	2308      	movs	r3, #8
 80044a4:	e7af      	b.n	8004406 <_strtol_l.constprop.0+0x56>
 80044a6:	2c30      	cmp	r4, #48	; 0x30
 80044a8:	d0a5      	beq.n	80043f6 <_strtol_l.constprop.0+0x46>
 80044aa:	230a      	movs	r3, #10
 80044ac:	e7ab      	b.n	8004406 <_strtol_l.constprop.0+0x56>
 80044ae:	bf00      	nop
 80044b0:	080045d9 	.word	0x080045d9

080044b4 <strtol>:
 80044b4:	4613      	mov	r3, r2
 80044b6:	460a      	mov	r2, r1
 80044b8:	4601      	mov	r1, r0
 80044ba:	4802      	ldr	r0, [pc, #8]	; (80044c4 <strtol+0x10>)
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f7ff bf77 	b.w	80043b0 <_strtol_l.constprop.0>
 80044c2:	bf00      	nop
 80044c4:	20000064 	.word	0x20000064

080044c8 <memset>:
 80044c8:	4402      	add	r2, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <strcat>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	4602      	mov	r2, r0
 80044dc:	7814      	ldrb	r4, [r2, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	3201      	adds	r2, #1
 80044e2:	2c00      	cmp	r4, #0
 80044e4:	d1fa      	bne.n	80044dc <strcat+0x4>
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d1f9      	bne.n	80044e8 <strcat+0x10>
 80044f4:	bd10      	pop	{r4, pc}

080044f6 <strncpy>:
 80044f6:	b510      	push	{r4, lr}
 80044f8:	3901      	subs	r1, #1
 80044fa:	4603      	mov	r3, r0
 80044fc:	b132      	cbz	r2, 800450c <strncpy+0x16>
 80044fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004502:	f803 4b01 	strb.w	r4, [r3], #1
 8004506:	3a01      	subs	r2, #1
 8004508:	2c00      	cmp	r4, #0
 800450a:	d1f7      	bne.n	80044fc <strncpy+0x6>
 800450c:	441a      	add	r2, r3
 800450e:	2100      	movs	r1, #0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <strncpy+0x20>
 8004514:	bd10      	pop	{r4, pc}
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <strncpy+0x1a>

0800451c <__errno>:
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <__errno+0x8>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000064 	.word	0x20000064

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4d0d      	ldr	r5, [pc, #52]	; (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2600      	movs	r6, #0
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4d0b      	ldr	r5, [pc, #44]	; (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	; (800456c <__libc_init_array+0x44>)
 800453c:	f000 f820 	bl	8004580 <_init>
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2600      	movs	r6, #0
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	080046dc 	.word	0x080046dc
 8004564:	080046dc 	.word	0x080046dc
 8004568:	080046dc 	.word	0x080046dc
 800456c:	080046e0 	.word	0x080046e0

08004570 <strcpy>:
 8004570:	4603      	mov	r3, r0
 8004572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004576:	f803 2b01 	strb.w	r2, [r3], #1
 800457a:	2a00      	cmp	r2, #0
 800457c:	d1f9      	bne.n	8004572 <strcpy+0x2>
 800457e:	4770      	bx	lr

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
